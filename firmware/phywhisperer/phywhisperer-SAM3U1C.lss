
phywhisperer-SAM3U1C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ad0c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008ad0c  0008ad0c  0001ad0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000d60  20000000  0008ad14  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000600  20000d60  0008ba74  00020d60  2**2
                  ALLOC
  4 .stack        00000400  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020d60  2**0
                  CONTENTS, READONLY
  6 .comment      0000007f  00000000  00000000  00020d89  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001f80c  00000000  00000000  00020e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003dee  00000000  00000000  00040614  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000088ca  00000000  00000000  00044402  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ff8  00000000  00000000  0004cccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000e98  00000000  00000000  0004dcc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000183d2  00000000  00000000  0004eb5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001196e  00000000  00000000  00066f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00059490  00000000  00000000  0007889c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004fc4  00000000  00000000  000d1d2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 04 08 20 b5 27 08 00 39 17 08 00 39 17 08 00     ... .'..9...9...
   80010:	39 17 08 00 39 17 08 00 39 17 08 00 00 00 00 00     9...9...9.......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 39 17 08 00     ............9...
   80030:	39 17 08 00 00 00 00 00 39 17 08 00 39 17 08 00     9.......9...9...
   80040:	39 17 08 00 39 17 08 00 39 17 08 00 39 17 08 00     9...9...9...9...
   80050:	39 17 08 00 39 17 08 00 39 17 08 00 39 17 08 00     9...9...9...9...
   80060:	39 17 08 00 39 17 08 00 39 1e 08 00 51 1e 08 00     9...9...9...Q...
   80070:	39 17 08 00 39 17 08 00 39 17 08 00 39 17 08 00     9...9...9...9...
   80080:	39 17 08 00 39 17 08 00 39 17 08 00 39 17 08 00     9...9...9...9...
   80090:	39 17 08 00 39 17 08 00 39 17 08 00 39 17 08 00     9...9...9...9...
   800a0:	39 17 08 00 39 17 08 00 39 17 08 00 39 17 08 00     9...9...9...9...
   800b0:	39 17 08 00 b9 3e 08 00 39 17 08 00                 9....>..9...

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000d60 	.word	0x20000d60
   800d8:	00000000 	.word	0x00000000
   800dc:	0008ad14 	.word	0x0008ad14

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	20000d64 	.word	0x20000d64
   800f8:	0008ad14 	.word	0x0008ad14

000800fc <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   800fc:	b580      	push	{r7, lr}
   800fe:	b082      	sub	sp, #8
   80100:	af00      	add	r7, sp, #0
   80102:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80104:	687b      	ldr	r3, [r7, #4]
   80106:	2b07      	cmp	r3, #7
   80108:	d82e      	bhi.n	80168 <osc_enable+0x6c>
   8010a:	a201      	add	r2, pc, #4	; (adr r2, 80110 <osc_enable+0x14>)
   8010c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80110:	00080167 	.word	0x00080167
   80114:	00080131 	.word	0x00080131
   80118:	00080139 	.word	0x00080139
   8011c:	00080141 	.word	0x00080141
   80120:	00080149 	.word	0x00080149
   80124:	00080151 	.word	0x00080151
   80128:	00080159 	.word	0x00080159
   8012c:	00080161 	.word	0x00080161
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80130:	2000      	movs	r0, #0
   80132:	4b0f      	ldr	r3, [pc, #60]	; (80170 <osc_enable+0x74>)
   80134:	4798      	blx	r3
		break;
   80136:	e017      	b.n	80168 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80138:	2001      	movs	r0, #1
   8013a:	4b0d      	ldr	r3, [pc, #52]	; (80170 <osc_enable+0x74>)
   8013c:	4798      	blx	r3
		break;
   8013e:	e013      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80140:	2000      	movs	r0, #0
   80142:	4b0c      	ldr	r3, [pc, #48]	; (80174 <osc_enable+0x78>)
   80144:	4798      	blx	r3
		break;
   80146:	e00f      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80148:	2010      	movs	r0, #16
   8014a:	4b0a      	ldr	r3, [pc, #40]	; (80174 <osc_enable+0x78>)
   8014c:	4798      	blx	r3
		break;
   8014e:	e00b      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80150:	2020      	movs	r0, #32
   80152:	4b08      	ldr	r3, [pc, #32]	; (80174 <osc_enable+0x78>)
   80154:	4798      	blx	r3
		break;
   80156:	e007      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80158:	203e      	movs	r0, #62	; 0x3e
   8015a:	4b07      	ldr	r3, [pc, #28]	; (80178 <osc_enable+0x7c>)
   8015c:	4798      	blx	r3
				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
		break;
   8015e:	e003      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_osc_bypass_main_xtal();
   80160:	4b06      	ldr	r3, [pc, #24]	; (8017c <osc_enable+0x80>)
   80162:	4798      	blx	r3
		break;
   80164:	e000      	b.n	80168 <osc_enable+0x6c>
		break;
   80166:	bf00      	nop
	}
}
   80168:	bf00      	nop
   8016a:	3708      	adds	r7, #8
   8016c:	46bd      	mov	sp, r7
   8016e:	bd80      	pop	{r7, pc}
   80170:	00081f69 	.word	0x00081f69
   80174:	00081fd5 	.word	0x00081fd5
   80178:	00082049 	.word	0x00082049
   8017c:	00082095 	.word	0x00082095

00080180 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   80180:	b580      	push	{r7, lr}
   80182:	b082      	sub	sp, #8
   80184:	af00      	add	r7, sp, #0
   80186:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80188:	687b      	ldr	r3, [r7, #4]
   8018a:	2b07      	cmp	r3, #7
   8018c:	d82f      	bhi.n	801ee <osc_is_ready+0x6e>
   8018e:	a201      	add	r2, pc, #4	; (adr r2, 80194 <osc_is_ready+0x14>)
   80190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80194:	000801b5 	.word	0x000801b5
   80198:	000801b9 	.word	0x000801b9
   8019c:	000801b9 	.word	0x000801b9
   801a0:	000801cb 	.word	0x000801cb
   801a4:	000801cb 	.word	0x000801cb
   801a8:	000801cb 	.word	0x000801cb
   801ac:	000801dd 	.word	0x000801dd
   801b0:	000801dd 	.word	0x000801dd
	case OSC_SLCK_32K_RC:
		return 1;
   801b4:	2301      	movs	r3, #1
   801b6:	e01b      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   801b8:	4b0f      	ldr	r3, [pc, #60]	; (801f8 <osc_is_ready+0x78>)
   801ba:	4798      	blx	r3
   801bc:	4603      	mov	r3, r0
   801be:	2b00      	cmp	r3, #0
   801c0:	bf14      	ite	ne
   801c2:	2301      	movne	r3, #1
   801c4:	2300      	moveq	r3, #0
   801c6:	b2db      	uxtb	r3, r3
   801c8:	e012      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();
   801ca:	4b0c      	ldr	r3, [pc, #48]	; (801fc <osc_is_ready+0x7c>)
   801cc:	4798      	blx	r3
   801ce:	4603      	mov	r3, r0
   801d0:	2b00      	cmp	r3, #0
   801d2:	bf14      	ite	ne
   801d4:	2301      	movne	r3, #1
   801d6:	2300      	moveq	r3, #0
   801d8:	b2db      	uxtb	r3, r3
   801da:	e009      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   801dc:	4b08      	ldr	r3, [pc, #32]	; (80200 <osc_is_ready+0x80>)
   801de:	4798      	blx	r3
   801e0:	4603      	mov	r3, r0
   801e2:	2b00      	cmp	r3, #0
   801e4:	bf14      	ite	ne
   801e6:	2301      	movne	r3, #1
   801e8:	2300      	moveq	r3, #0
   801ea:	b2db      	uxtb	r3, r3
   801ec:	e000      	b.n	801f0 <osc_is_ready+0x70>
	}

	return 0;
   801ee:	2300      	movs	r3, #0
}
   801f0:	4618      	mov	r0, r3
   801f2:	3708      	adds	r7, #8
   801f4:	46bd      	mov	sp, r7
   801f6:	bd80      	pop	{r7, pc}
   801f8:	00081fa1 	.word	0x00081fa1
   801fc:	00082031 	.word	0x00082031
   80200:	000820e1 	.word	0x000820e1

00080204 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80204:	b480      	push	{r7}
   80206:	b083      	sub	sp, #12
   80208:	af00      	add	r7, sp, #0
   8020a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8020c:	687b      	ldr	r3, [r7, #4]
   8020e:	2b07      	cmp	r3, #7
   80210:	d823      	bhi.n	8025a <osc_get_rate+0x56>
   80212:	a201      	add	r2, pc, #4	; (adr r2, 80218 <osc_get_rate+0x14>)
   80214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80218:	00080239 	.word	0x00080239
   8021c:	0008023f 	.word	0x0008023f
   80220:	00080243 	.word	0x00080243
   80224:	00080247 	.word	0x00080247
   80228:	0008024b 	.word	0x0008024b
   8022c:	0008024f 	.word	0x0008024f
   80230:	00080253 	.word	0x00080253
   80234:	00080257 	.word	0x00080257
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80238:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8023c:	e00e      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8023e:	2300      	movs	r3, #0
   80240:	e00c      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80242:	2300      	movs	r3, #0
   80244:	e00a      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80246:	4b08      	ldr	r3, [pc, #32]	; (80268 <osc_get_rate+0x64>)
   80248:	e008      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8024a:	4b08      	ldr	r3, [pc, #32]	; (8026c <osc_get_rate+0x68>)
   8024c:	e006      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8024e:	4b08      	ldr	r3, [pc, #32]	; (80270 <osc_get_rate+0x6c>)
   80250:	e004      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80252:	4b07      	ldr	r3, [pc, #28]	; (80270 <osc_get_rate+0x6c>)
   80254:	e002      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80256:	4b06      	ldr	r3, [pc, #24]	; (80270 <osc_get_rate+0x6c>)
   80258:	e000      	b.n	8025c <osc_get_rate+0x58>
	}

	return 0;
   8025a:	2300      	movs	r3, #0
}
   8025c:	4618      	mov	r0, r3
   8025e:	370c      	adds	r7, #12
   80260:	46bd      	mov	sp, r7
   80262:	bc80      	pop	{r7}
   80264:	4770      	bx	lr
   80266:	bf00      	nop
   80268:	003d0900 	.word	0x003d0900
   8026c:	007a1200 	.word	0x007a1200
   80270:	00b71b00 	.word	0x00b71b00

00080274 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   80274:	b580      	push	{r7, lr}
   80276:	b082      	sub	sp, #8
   80278:	af00      	add	r7, sp, #0
   8027a:	4603      	mov	r3, r0
   8027c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8027e:	bf00      	nop
   80280:	79fb      	ldrb	r3, [r7, #7]
   80282:	4618      	mov	r0, r3
   80284:	4b05      	ldr	r3, [pc, #20]	; (8029c <osc_wait_ready+0x28>)
   80286:	4798      	blx	r3
   80288:	4603      	mov	r3, r0
   8028a:	f083 0301 	eor.w	r3, r3, #1
   8028e:	b2db      	uxtb	r3, r3
   80290:	2b00      	cmp	r3, #0
   80292:	d1f5      	bne.n	80280 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   80294:	bf00      	nop
   80296:	3708      	adds	r7, #8
   80298:	46bd      	mov	sp, r7
   8029a:	bd80      	pop	{r7, pc}
   8029c:	00080181 	.word	0x00080181

000802a0 <pll_config_init>:
 *       hardware mul+1 is hidden in this implementation. Use mul as mul
 *       effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802a0:	b580      	push	{r7, lr}
   802a2:	b086      	sub	sp, #24
   802a4:	af00      	add	r7, sp, #0
   802a6:	60f8      	str	r0, [r7, #12]
   802a8:	607a      	str	r2, [r7, #4]
   802aa:	603b      	str	r3, [r7, #0]
   802ac:	460b      	mov	r3, r1
   802ae:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802b0:	687b      	ldr	r3, [r7, #4]
   802b2:	2b00      	cmp	r3, #0
   802b4:	d107      	bne.n	802c6 <pll_config_init+0x26>
   802b6:	683b      	ldr	r3, [r7, #0]
   802b8:	2b00      	cmp	r3, #0
   802ba:	d104      	bne.n	802c6 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   802bc:	68fb      	ldr	r3, [r7, #12]
   802be:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   802c2:	601a      	str	r2, [r3, #0]
   802c4:	e019      	b.n	802fa <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   802c6:	7afb      	ldrb	r3, [r7, #11]
   802c8:	4618      	mov	r0, r3
   802ca:	4b0e      	ldr	r3, [pc, #56]	; (80304 <pll_config_init+0x64>)
   802cc:	4798      	blx	r3
   802ce:	4602      	mov	r2, r0
   802d0:	687b      	ldr	r3, [r7, #4]
   802d2:	fbb2 f3f3 	udiv	r3, r2, r3
   802d6:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   802d8:	697b      	ldr	r3, [r7, #20]
   802da:	683a      	ldr	r2, [r7, #0]
   802dc:	fb02 f303 	mul.w	r3, r2, r3
   802e0:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802e2:	683b      	ldr	r3, [r7, #0]
   802e4:	3b01      	subs	r3, #1
   802e6:	041a      	lsls	r2, r3, #16
   802e8:	4b07      	ldr	r3, [pc, #28]	; (80308 <pll_config_init+0x68>)
   802ea:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802ec:	687a      	ldr	r2, [r7, #4]
   802ee:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802f0:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f2:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802f6:	68fb      	ldr	r3, [r7, #12]
   802f8:	601a      	str	r2, [r3, #0]
			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
   802fa:	bf00      	nop
   802fc:	3718      	adds	r7, #24
   802fe:	46bd      	mov	sp, r7
   80300:	bd80      	pop	{r7, pc}
   80302:	bf00      	nop
   80304:	00080205 	.word	0x00080205
   80308:	07ff0000 	.word	0x07ff0000

0008030c <pll_enable>:
	}
}

static inline void pll_enable(const struct pll_config *p_cfg,
		uint32_t ul_pll_id)
{
   8030c:	b580      	push	{r7, lr}
   8030e:	b082      	sub	sp, #8
   80310:	af00      	add	r7, sp, #0
   80312:	6078      	str	r0, [r7, #4]
   80314:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80316:	683b      	ldr	r3, [r7, #0]
   80318:	2b00      	cmp	r3, #0
   8031a:	d108      	bne.n	8032e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   8031c:	4b09      	ldr	r3, [pc, #36]	; (80344 <pll_enable+0x38>)
   8031e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80320:	687b      	ldr	r3, [r7, #4]
   80322:	681b      	ldr	r3, [r3, #0]
   80324:	4a08      	ldr	r2, [pc, #32]	; (80348 <pll_enable+0x3c>)
   80326:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8032a:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   8032c:	e005      	b.n	8033a <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8032e:	687b      	ldr	r3, [r7, #4]
   80330:	681b      	ldr	r3, [r3, #0]
   80332:	4a05      	ldr	r2, [pc, #20]	; (80348 <pll_enable+0x3c>)
   80334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80338:	61d3      	str	r3, [r2, #28]
}
   8033a:	bf00      	nop
   8033c:	3708      	adds	r7, #8
   8033e:	46bd      	mov	sp, r7
   80340:	bd80      	pop	{r7, pc}
   80342:	bf00      	nop
   80344:	00082151 	.word	0x00082151
   80348:	400e0400 	.word	0x400e0400

0008034c <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   8034c:	b580      	push	{r7, lr}
   8034e:	b082      	sub	sp, #8
   80350:	af00      	add	r7, sp, #0
   80352:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80354:	687b      	ldr	r3, [r7, #4]
   80356:	2b00      	cmp	r3, #0
   80358:	d103      	bne.n	80362 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8035a:	4b05      	ldr	r3, [pc, #20]	; (80370 <pll_is_locked+0x24>)
   8035c:	4798      	blx	r3
   8035e:	4603      	mov	r3, r0
   80360:	e002      	b.n	80368 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   80362:	4b04      	ldr	r3, [pc, #16]	; (80374 <pll_is_locked+0x28>)
   80364:	4798      	blx	r3
   80366:	4603      	mov	r3, r0
	}
}
   80368:	4618      	mov	r0, r3
   8036a:	3708      	adds	r7, #8
   8036c:	46bd      	mov	sp, r7
   8036e:	bd80      	pop	{r7, pc}
   80370:	00082169 	.word	0x00082169
   80374:	0008219d 	.word	0x0008219d

00080378 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   80378:	b580      	push	{r7, lr}
   8037a:	b082      	sub	sp, #8
   8037c:	af00      	add	r7, sp, #0
   8037e:	4603      	mov	r3, r0
   80380:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80382:	79fb      	ldrb	r3, [r7, #7]
   80384:	3b03      	subs	r3, #3
   80386:	2b04      	cmp	r3, #4
   80388:	d808      	bhi.n	8039c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8038a:	79fb      	ldrb	r3, [r7, #7]
   8038c:	4618      	mov	r0, r3
   8038e:	4b06      	ldr	r3, [pc, #24]	; (803a8 <pll_enable_source+0x30>)
   80390:	4798      	blx	r3
		osc_wait_ready(e_src);
   80392:	79fb      	ldrb	r3, [r7, #7]
   80394:	4618      	mov	r0, r3
   80396:	4b05      	ldr	r3, [pc, #20]	; (803ac <pll_enable_source+0x34>)
   80398:	4798      	blx	r3
		break;
   8039a:	e000      	b.n	8039e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   8039c:	bf00      	nop
	}
}
   8039e:	bf00      	nop
   803a0:	3708      	adds	r7, #8
   803a2:	46bd      	mov	sp, r7
   803a4:	bd80      	pop	{r7, pc}
   803a6:	bf00      	nop
   803a8:	000800fd 	.word	0x000800fd
   803ac:	00080275 	.word	0x00080275

000803b0 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int ul_pll_id)
{
   803b0:	b590      	push	{r4, r7, lr}
   803b2:	b085      	sub	sp, #20
   803b4:	af00      	add	r7, sp, #0
   803b6:	6078      	str	r0, [r7, #4]
	struct pll_config pllcfg;

	if (pll_is_locked(ul_pll_id)) {
   803b8:	6878      	ldr	r0, [r7, #4]
   803ba:	4b21      	ldr	r3, [pc, #132]	; (80440 <pll_enable_config_defaults+0x90>)
   803bc:	4798      	blx	r3
   803be:	4603      	mov	r3, r0
   803c0:	2b00      	cmp	r3, #0
   803c2:	d138      	bne.n	80436 <pll_enable_config_defaults+0x86>
		return; // Pll already running
	}
	switch (ul_pll_id) {
   803c4:	687b      	ldr	r3, [r7, #4]
   803c6:	2b00      	cmp	r3, #0
   803c8:	d002      	beq.n	803d0 <pll_enable_config_defaults+0x20>
   803ca:	2b01      	cmp	r3, #1
   803cc:	d015      	beq.n	803fa <pll_enable_config_defaults+0x4a>
				CONFIG_PLL1_MUL);
		break;
#endif
	default:
		Assert(false);
		break;
   803ce:	e024      	b.n	8041a <pll_enable_config_defaults+0x6a>
		pll_enable_source(CONFIG_PLL0_SOURCE);
   803d0:	2006      	movs	r0, #6
   803d2:	4b1c      	ldr	r3, [pc, #112]	; (80444 <pll_enable_config_defaults+0x94>)
   803d4:	4798      	blx	r3
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   803d6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   803da:	4b1b      	ldr	r3, [pc, #108]	; (80448 <pll_enable_config_defaults+0x98>)
   803dc:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   803de:	bf00      	nop
   803e0:	4b1a      	ldr	r3, [pc, #104]	; (8044c <pll_enable_config_defaults+0x9c>)
   803e2:	4798      	blx	r3
   803e4:	4603      	mov	r3, r0
   803e6:	2b00      	cmp	r3, #0
   803e8:	d0fa      	beq.n	803e0 <pll_enable_config_defaults+0x30>
		pll_config_init(&pllcfg,
   803ea:	f107 000c 	add.w	r0, r7, #12
   803ee:	2310      	movs	r3, #16
   803f0:	2201      	movs	r2, #1
   803f2:	2106      	movs	r1, #6
   803f4:	4c16      	ldr	r4, [pc, #88]	; (80450 <pll_enable_config_defaults+0xa0>)
   803f6:	47a0      	blx	r4
		break;
   803f8:	e00f      	b.n	8041a <pll_enable_config_defaults+0x6a>
		if (pmc_osc_is_bypassed_main_xtal()) {
   803fa:	4b16      	ldr	r3, [pc, #88]	; (80454 <pll_enable_config_defaults+0xa4>)
   803fc:	4798      	blx	r3
   803fe:	4603      	mov	r3, r0
   80400:	2b00      	cmp	r3, #0
   80402:	d102      	bne.n	8040a <pll_enable_config_defaults+0x5a>
			pll_enable_source(CONFIG_PLL1_SOURCE);
   80404:	2006      	movs	r0, #6
   80406:	4b0f      	ldr	r3, [pc, #60]	; (80444 <pll_enable_config_defaults+0x94>)
   80408:	4798      	blx	r3
		pll_config_init(&pllcfg,
   8040a:	f107 000c 	add.w	r0, r7, #12
   8040e:	2300      	movs	r3, #0
   80410:	2200      	movs	r2, #0
   80412:	2106      	movs	r1, #6
   80414:	4c0e      	ldr	r4, [pc, #56]	; (80450 <pll_enable_config_defaults+0xa0>)
   80416:	47a0      	blx	r4
		break;
   80418:	bf00      	nop
	}
	pll_enable(&pllcfg, ul_pll_id);
   8041a:	f107 030c 	add.w	r3, r7, #12
   8041e:	6879      	ldr	r1, [r7, #4]
   80420:	4618      	mov	r0, r3
   80422:	4b0d      	ldr	r3, [pc, #52]	; (80458 <pll_enable_config_defaults+0xa8>)
   80424:	4798      	blx	r3
	while (!pll_is_locked(ul_pll_id));
   80426:	bf00      	nop
   80428:	6878      	ldr	r0, [r7, #4]
   8042a:	4b05      	ldr	r3, [pc, #20]	; (80440 <pll_enable_config_defaults+0x90>)
   8042c:	4798      	blx	r3
   8042e:	4603      	mov	r3, r0
   80430:	2b00      	cmp	r3, #0
   80432:	d0f9      	beq.n	80428 <pll_enable_config_defaults+0x78>
   80434:	e000      	b.n	80438 <pll_enable_config_defaults+0x88>
		return; // Pll already running
   80436:	bf00      	nop
}
   80438:	3714      	adds	r7, #20
   8043a:	46bd      	mov	sp, r7
   8043c:	bd90      	pop	{r4, r7, pc}
   8043e:	bf00      	nop
   80440:	0008034d 	.word	0x0008034d
   80444:	00080379 	.word	0x00080379
   80448:	00082111 	.word	0x00082111
   8044c:	000820f9 	.word	0x000820f9
   80450:	000802a1 	.word	0x000802a1
   80454:	000820c9 	.word	0x000820c9
   80458:	0008030d 	.word	0x0008030d

0008045c <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
   8045c:	b480      	push	{r7}
   8045e:	b08d      	sub	sp, #52	; 0x34
   80460:	af00      	add	r7, sp, #0
   80462:	6078      	str	r0, [r7, #4]
   80464:	6039      	str	r1, [r7, #0]
   80466:	687b      	ldr	r3, [r7, #4]
   80468:	62fb      	str	r3, [r7, #44]	; 0x2c
   8046a:	683b      	ldr	r3, [r7, #0]
   8046c:	62bb      	str	r3, [r7, #40]	; 0x28
   8046e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80470:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   80472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80474:	095a      	lsrs	r2, r3, #5
   80476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80478:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   8047a:	6a3b      	ldr	r3, [r7, #32]
   8047c:	f003 031f 	and.w	r3, r3, #31
   80480:	2101      	movs	r1, #1
   80482:	fa01 f303 	lsl.w	r3, r1, r3
   80486:	61fa      	str	r2, [r7, #28]
   80488:	61bb      	str	r3, [r7, #24]
   8048a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8048c:	617b      	str	r3, [r7, #20]
   8048e:	69fb      	ldr	r3, [r7, #28]
   80490:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80492:	693b      	ldr	r3, [r7, #16]
   80494:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80498:	f203 7306 	addw	r3, r3, #1798	; 0x706
   8049c:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
   8049e:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
   804a0:	697b      	ldr	r3, [r7, #20]
   804a2:	f003 0308 	and.w	r3, r3, #8
   804a6:	2b00      	cmp	r3, #0
   804a8:	d003      	beq.n	804b2 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   804aa:	68fb      	ldr	r3, [r7, #12]
   804ac:	69ba      	ldr	r2, [r7, #24]
   804ae:	665a      	str	r2, [r3, #100]	; 0x64
   804b0:	e002      	b.n	804b8 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
   804b2:	68fb      	ldr	r3, [r7, #12]
   804b4:	69ba      	ldr	r2, [r7, #24]
   804b6:	661a      	str	r2, [r3, #96]	; 0x60
	} else {
		base->PIO_PPDDR = mask;
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   804b8:	697b      	ldr	r3, [r7, #20]
   804ba:	f003 0320 	and.w	r3, r3, #32
   804be:	2b00      	cmp	r3, #0
   804c0:	d003      	beq.n	804ca <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   804c2:	68fb      	ldr	r3, [r7, #12]
   804c4:	69ba      	ldr	r2, [r7, #24]
   804c6:	651a      	str	r2, [r3, #80]	; 0x50
   804c8:	e002      	b.n	804d0 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_MDDR = mask;
   804ca:	68fb      	ldr	r3, [r7, #12]
   804cc:	69ba      	ldr	r2, [r7, #24]
   804ce:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   804d0:	697b      	ldr	r3, [r7, #20]
   804d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   804d6:	2b00      	cmp	r3, #0
   804d8:	d003      	beq.n	804e2 <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   804da:	68fb      	ldr	r3, [r7, #12]
   804dc:	69ba      	ldr	r2, [r7, #24]
   804de:	621a      	str	r2, [r3, #32]
   804e0:	e002      	b.n	804e8 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_IFDR = mask;
   804e2:	68fb      	ldr	r3, [r7, #12]
   804e4:	69ba      	ldr	r2, [r7, #24]
   804e6:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
   804e8:	697b      	ldr	r3, [r7, #20]
   804ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
   804ee:	2b00      	cmp	r3, #0
   804f0:	d004      	beq.n	804fc <ioport_set_pin_mode+0xa0>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   804f2:	68fb      	ldr	r3, [r7, #12]
   804f4:	69ba      	ldr	r2, [r7, #24]
   804f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   804fa:	e003      	b.n	80504 <ioport_set_pin_mode+0xa8>
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   804fc:	68fb      	ldr	r3, [r7, #12]
   804fe:	69ba      	ldr	r2, [r7, #24]
   80500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_IFSCDR = mask;
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
   80504:	697b      	ldr	r3, [r7, #20]
   80506:	f003 0301 	and.w	r3, r3, #1
   8050a:	2b00      	cmp	r3, #0
   8050c:	d006      	beq.n	8051c <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   8050e:	68fb      	ldr	r3, [r7, #12]
   80510:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80512:	69bb      	ldr	r3, [r7, #24]
   80514:	431a      	orrs	r2, r3
   80516:	68fb      	ldr	r3, [r7, #12]
   80518:	671a      	str	r2, [r3, #112]	; 0x70
	arch_ioport_set_pin_mode(pin, mode);
}
   8051a:	e006      	b.n	8052a <ioport_set_pin_mode+0xce>
	} else {
		base->PIO_ABSR &= ~mask;
   8051c:	68fb      	ldr	r3, [r7, #12]
   8051e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80520:	69bb      	ldr	r3, [r7, #24]
   80522:	43db      	mvns	r3, r3
   80524:	401a      	ands	r2, r3
   80526:	68fb      	ldr	r3, [r7, #12]
   80528:	671a      	str	r2, [r3, #112]	; 0x70
   8052a:	bf00      	nop
   8052c:	3734      	adds	r7, #52	; 0x34
   8052e:	46bd      	mov	sp, r7
   80530:	bc80      	pop	{r7}
   80532:	4770      	bx	lr

00080534 <sleepmgr_sleep>:
#endif /* CONFIG_SLEEPMGR_ENABLE */
//! @}


static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
   80534:	b580      	push	{r7, lr}
   80536:	b082      	sub	sp, #8
   80538:	af00      	add	r7, sp, #0
   8053a:	4603      	mov	r3, r0
   8053c:	71fb      	strb	r3, [r7, #7]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8053e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80540:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
   80544:	4b05      	ldr	r3, [pc, #20]	; (8055c <sleepmgr_sleep+0x28>)
   80546:	2200      	movs	r2, #0
   80548:	701a      	strb	r2, [r3, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
   8054a:	79fb      	ldrb	r3, [r7, #7]
   8054c:	4618      	mov	r0, r3
   8054e:	4b04      	ldr	r3, [pc, #16]	; (80560 <sleepmgr_sleep+0x2c>)
   80550:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
   80552:	bf00      	nop
   80554:	3708      	adds	r7, #8
   80556:	46bd      	mov	sp, r7
   80558:	bd80      	pop	{r7, pc}
   8055a:	bf00      	nop
   8055c:	20000294 	.word	0x20000294
   80560:	000822f5 	.word	0x000822f5

00080564 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
   80564:	b480      	push	{r7}
   80566:	b083      	sub	sp, #12
   80568:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   8056a:	2300      	movs	r3, #0
   8056c:	71fb      	strb	r3, [r7, #7]
   8056e:	e006      	b.n	8057e <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
   80570:	79fb      	ldrb	r3, [r7, #7]
   80572:	4a08      	ldr	r2, [pc, #32]	; (80594 <sleepmgr_init+0x30>)
   80574:	2100      	movs	r1, #0
   80576:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   80578:	79fb      	ldrb	r3, [r7, #7]
   8057a:	3301      	adds	r3, #1
   8057c:	71fb      	strb	r3, [r7, #7]
   8057e:	79fb      	ldrb	r3, [r7, #7]
   80580:	2b04      	cmp	r3, #4
   80582:	d9f5      	bls.n	80570 <sleepmgr_init+0xc>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   80584:	4b03      	ldr	r3, [pc, #12]	; (80594 <sleepmgr_init+0x30>)
   80586:	2201      	movs	r2, #1
   80588:	715a      	strb	r2, [r3, #5]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   8058a:	bf00      	nop
   8058c:	370c      	adds	r7, #12
   8058e:	46bd      	mov	sp, r7
   80590:	bc80      	pop	{r7}
   80592:	4770      	bx	lr
   80594:	20001318 	.word	0x20001318

00080598 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
   80598:	b480      	push	{r7}
   8059a:	b083      	sub	sp, #12
   8059c:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
   8059e:	2300      	movs	r3, #0
   805a0:	71fb      	strb	r3, [r7, #7]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
   805a2:	4b09      	ldr	r3, [pc, #36]	; (805c8 <sleepmgr_get_sleep_mode+0x30>)
   805a4:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
   805a6:	e005      	b.n	805b4 <sleepmgr_get_sleep_mode+0x1c>
		lock_ptr++;
   805a8:	683b      	ldr	r3, [r7, #0]
   805aa:	3301      	adds	r3, #1
   805ac:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
   805ae:	79fb      	ldrb	r3, [r7, #7]
   805b0:	3301      	adds	r3, #1
   805b2:	71fb      	strb	r3, [r7, #7]
	while (!(*lock_ptr)) {
   805b4:	683b      	ldr	r3, [r7, #0]
   805b6:	781b      	ldrb	r3, [r3, #0]
   805b8:	2b00      	cmp	r3, #0
   805ba:	d0f5      	beq.n	805a8 <sleepmgr_get_sleep_mode+0x10>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
   805bc:	79fb      	ldrb	r3, [r7, #7]
}
   805be:	4618      	mov	r0, r3
   805c0:	370c      	adds	r7, #12
   805c2:	46bd      	mov	sp, r7
   805c4:	bc80      	pop	{r7}
   805c6:	4770      	bx	lr
   805c8:	20001318 	.word	0x20001318

000805cc <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
   805cc:	b580      	push	{r7, lr}
   805ce:	b082      	sub	sp, #8
   805d0:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode;

	//cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
   805d2:	4b0a      	ldr	r3, [pc, #40]	; (805fc <sleepmgr_enter_sleep+0x30>)
   805d4:	4798      	blx	r3
   805d6:	4603      	mov	r3, r0
   805d8:	71fb      	strb	r3, [r7, #7]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
   805da:	79fb      	ldrb	r3, [r7, #7]
   805dc:	2b00      	cmp	r3, #0
   805de:	d106      	bne.n	805ee <sleepmgr_enter_sleep+0x22>
		cpu_irq_enable();
   805e0:	4b07      	ldr	r3, [pc, #28]	; (80600 <sleepmgr_enter_sleep+0x34>)
   805e2:	2201      	movs	r2, #1
   805e4:	701a      	strb	r2, [r3, #0]
   805e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   805ea:	b662      	cpsie	i
		return;
   805ec:	e003      	b.n	805f6 <sleepmgr_enter_sleep+0x2a>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
   805ee:	79fb      	ldrb	r3, [r7, #7]
   805f0:	4618      	mov	r0, r3
   805f2:	4b04      	ldr	r3, [pc, #16]	; (80604 <sleepmgr_enter_sleep+0x38>)
   805f4:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   805f6:	3708      	adds	r7, #8
   805f8:	46bd      	mov	sp, r7
   805fa:	bd80      	pop	{r7, pc}
   805fc:	00080599 	.word	0x00080599
   80600:	20000294 	.word	0x20000294
   80604:	00080535 	.word	0x00080535

00080608 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   80608:	b480      	push	{r7}
   8060a:	b083      	sub	sp, #12
   8060c:	af00      	add	r7, sp, #0
   8060e:	6078      	str	r0, [r7, #4]
   80610:	6039      	str	r1, [r7, #0]
	ul_id = ul_id;
	p_cfg->ctrl = 0;
   80612:	687b      	ldr	r3, [r7, #4]
   80614:	2200      	movs	r2, #0
   80616:	601a      	str	r2, [r3, #0]
}
   80618:	bf00      	nop
   8061a:	370c      	adds	r7, #12
   8061c:	46bd      	mov	sp, r7
   8061e:	bc80      	pop	{r7}
   80620:	4770      	bx	lr
   80622:	0000      	movs	r0, r0

00080624 <genclk_config_set_source>:
//! \name Programmable Clock Source and Prescaler configuration
//@{

static inline void genclk_config_set_source(struct genclk_config *p_cfg,
		enum genclk_source e_src)
{
   80624:	b480      	push	{r7}
   80626:	b083      	sub	sp, #12
   80628:	af00      	add	r7, sp, #0
   8062a:	6078      	str	r0, [r7, #4]
   8062c:	460b      	mov	r3, r1
   8062e:	70fb      	strb	r3, [r7, #3]
	p_cfg->ctrl &= (~PMC_PCK_CSS_Msk);
   80630:	687b      	ldr	r3, [r7, #4]
   80632:	681b      	ldr	r3, [r3, #0]
   80634:	f023 0207 	bic.w	r2, r3, #7
   80638:	687b      	ldr	r3, [r7, #4]
   8063a:	601a      	str	r2, [r3, #0]

	switch (e_src) {
   8063c:	78fb      	ldrb	r3, [r7, #3]
   8063e:	2b0a      	cmp	r3, #10
   80640:	d839      	bhi.n	806b6 <genclk_config_set_source+0x92>
   80642:	a201      	add	r2, pc, #4	; (adr r2, 80648 <genclk_config_set_source+0x24>)
   80644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80648:	00080675 	.word	0x00080675
   8064c:	00080675 	.word	0x00080675
   80650:	00080675 	.word	0x00080675
   80654:	0008067f 	.word	0x0008067f
   80658:	0008067f 	.word	0x0008067f
   8065c:	0008067f 	.word	0x0008067f
   80660:	0008067f 	.word	0x0008067f
   80664:	0008067f 	.word	0x0008067f
   80668:	0008068d 	.word	0x0008068d
   8066c:	0008069b 	.word	0x0008069b
   80670:	000806a9 	.word	0x000806a9
	case GENCLK_PCK_SRC_SLCK_RC:
	case GENCLK_PCK_SRC_SLCK_XTAL:
	case GENCLK_PCK_SRC_SLCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_SLOW_CLK);
   80674:	687b      	ldr	r3, [r7, #4]
   80676:	681a      	ldr	r2, [r3, #0]
   80678:	687b      	ldr	r3, [r7, #4]
   8067a:	601a      	str	r2, [r3, #0]
		break;
   8067c:	e01b      	b.n	806b6 <genclk_config_set_source+0x92>
	case GENCLK_PCK_SRC_MAINCK_4M_RC:
	case GENCLK_PCK_SRC_MAINCK_8M_RC:
	case GENCLK_PCK_SRC_MAINCK_12M_RC:
	case GENCLK_PCK_SRC_MAINCK_XTAL:
	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_MAIN_CLK);
   8067e:	687b      	ldr	r3, [r7, #4]
   80680:	681b      	ldr	r3, [r3, #0]
   80682:	f043 0201 	orr.w	r2, r3, #1
   80686:	687b      	ldr	r3, [r7, #4]
   80688:	601a      	str	r2, [r3, #0]
		break;
   8068a:	e014      	b.n	806b6 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLACK:
		p_cfg->ctrl |= (PMC_PCK_CSS_PLLA_CLK);
   8068c:	687b      	ldr	r3, [r7, #4]
   8068e:	681b      	ldr	r3, [r3, #0]
   80690:	f043 0202 	orr.w	r2, r3, #2
   80694:	687b      	ldr	r3, [r7, #4]
   80696:	601a      	str	r2, [r3, #0]
		break;
   80698:	e00d      	b.n	806b6 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLBCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_UPLL_CLK);
   8069a:	687b      	ldr	r3, [r7, #4]
   8069c:	681b      	ldr	r3, [r3, #0]
   8069e:	f043 0203 	orr.w	r2, r3, #3
   806a2:	687b      	ldr	r3, [r7, #4]
   806a4:	601a      	str	r2, [r3, #0]
		break;
   806a6:	e006      	b.n	806b6 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_MCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_MCK);
   806a8:	687b      	ldr	r3, [r7, #4]
   806aa:	681b      	ldr	r3, [r3, #0]
   806ac:	f043 0204 	orr.w	r2, r3, #4
   806b0:	687b      	ldr	r3, [r7, #4]
   806b2:	601a      	str	r2, [r3, #0]
		break;
   806b4:	bf00      	nop
	}
}
   806b6:	bf00      	nop
   806b8:	370c      	adds	r7, #12
   806ba:	46bd      	mov	sp, r7
   806bc:	bc80      	pop	{r7}
   806be:	4770      	bx	lr

000806c0 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *p_cfg,
		uint32_t e_divider)
{
   806c0:	b480      	push	{r7}
   806c2:	b083      	sub	sp, #12
   806c4:	af00      	add	r7, sp, #0
   806c6:	6078      	str	r0, [r7, #4]
   806c8:	6039      	str	r1, [r7, #0]
	p_cfg->ctrl &= ~PMC_PCK_PRES_Msk;
   806ca:	687b      	ldr	r3, [r7, #4]
   806cc:	681b      	ldr	r3, [r3, #0]
   806ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   806d2:	687b      	ldr	r3, [r7, #4]
   806d4:	601a      	str	r2, [r3, #0]
	p_cfg->ctrl |= e_divider;
   806d6:	687b      	ldr	r3, [r7, #4]
   806d8:	681a      	ldr	r2, [r3, #0]
   806da:	683b      	ldr	r3, [r7, #0]
   806dc:	431a      	orrs	r2, r3
   806de:	687b      	ldr	r3, [r7, #4]
   806e0:	601a      	str	r2, [r3, #0]
}
   806e2:	bf00      	nop
   806e4:	370c      	adds	r7, #12
   806e6:	46bd      	mov	sp, r7
   806e8:	bc80      	pop	{r7}
   806ea:	4770      	bx	lr

000806ec <genclk_enable>:

//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   806ec:	b580      	push	{r7, lr}
   806ee:	b082      	sub	sp, #8
   806f0:	af00      	add	r7, sp, #0
   806f2:	6078      	str	r0, [r7, #4]
   806f4:	6039      	str	r1, [r7, #0]
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   806f6:	4907      	ldr	r1, [pc, #28]	; (80714 <genclk_enable+0x28>)
   806f8:	687b      	ldr	r3, [r7, #4]
   806fa:	681a      	ldr	r2, [r3, #0]
   806fc:	683b      	ldr	r3, [r7, #0]
   806fe:	3310      	adds	r3, #16
   80700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	pmc_enable_pck(ul_id);
   80704:	6838      	ldr	r0, [r7, #0]
   80706:	4b04      	ldr	r3, [pc, #16]	; (80718 <genclk_enable+0x2c>)
   80708:	4798      	blx	r3
}
   8070a:	bf00      	nop
   8070c:	3708      	adds	r7, #8
   8070e:	46bd      	mov	sp, r7
   80710:	bd80      	pop	{r7, pc}
   80712:	bf00      	nop
   80714:	400e0400 	.word	0x400e0400
   80718:	0008224d 	.word	0x0008224d

0008071c <genclk_enable_source>:
{
	pmc_disable_pck(ul_id);
}

static inline void genclk_enable_source(enum genclk_source e_src)
{
   8071c:	b580      	push	{r7, lr}
   8071e:	b082      	sub	sp, #8
   80720:	af00      	add	r7, sp, #0
   80722:	4603      	mov	r3, r0
   80724:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80726:	79fb      	ldrb	r3, [r7, #7]
   80728:	2b0a      	cmp	r3, #10
   8072a:	f200 80a2 	bhi.w	80872 <genclk_enable_source+0x156>
   8072e:	a201      	add	r2, pc, #4	; (adr r2, 80734 <genclk_enable_source+0x18>)
   80730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80734:	00080761 	.word	0x00080761
   80738:	00080783 	.word	0x00080783
   8073c:	000807a3 	.word	0x000807a3
   80740:	000807c3 	.word	0x000807c3
   80744:	000807e3 	.word	0x000807e3
   80748:	00080803 	.word	0x00080803
   8074c:	00080823 	.word	0x00080823
   80750:	00080843 	.word	0x00080843
   80754:	00080863 	.word	0x00080863
   80758:	0008086b 	.word	0x0008086b
   8075c:	00080873 	.word	0x00080873
	case GENCLK_PCK_SRC_SLCK_RC:
		if (!osc_is_ready(OSC_SLCK_32K_RC)) {
   80760:	2000      	movs	r0, #0
   80762:	4b4e      	ldr	r3, [pc, #312]	; (8089c <genclk_enable_source+0x180>)
   80764:	4798      	blx	r3
   80766:	4603      	mov	r3, r0
   80768:	f083 0301 	eor.w	r3, r3, #1
   8076c:	b2db      	uxtb	r3, r3
   8076e:	2b00      	cmp	r3, #0
   80770:	f000 8081 	beq.w	80876 <genclk_enable_source+0x15a>
			osc_enable(OSC_SLCK_32K_RC);
   80774:	2000      	movs	r0, #0
   80776:	4b4a      	ldr	r3, [pc, #296]	; (808a0 <genclk_enable_source+0x184>)
   80778:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_RC);
   8077a:	2000      	movs	r0, #0
   8077c:	4b49      	ldr	r3, [pc, #292]	; (808a4 <genclk_enable_source+0x188>)
   8077e:	4798      	blx	r3
		}
		break;
   80780:	e079      	b.n	80876 <genclk_enable_source+0x15a>

	case GENCLK_PCK_SRC_SLCK_XTAL:
		if (!osc_is_ready(OSC_SLCK_32K_XTAL)) {
   80782:	2001      	movs	r0, #1
   80784:	4b45      	ldr	r3, [pc, #276]	; (8089c <genclk_enable_source+0x180>)
   80786:	4798      	blx	r3
   80788:	4603      	mov	r3, r0
   8078a:	f083 0301 	eor.w	r3, r3, #1
   8078e:	b2db      	uxtb	r3, r3
   80790:	2b00      	cmp	r3, #0
   80792:	d072      	beq.n	8087a <genclk_enable_source+0x15e>
			osc_enable(OSC_SLCK_32K_XTAL);
   80794:	2001      	movs	r0, #1
   80796:	4b42      	ldr	r3, [pc, #264]	; (808a0 <genclk_enable_source+0x184>)
   80798:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_XTAL);
   8079a:	2001      	movs	r0, #1
   8079c:	4b41      	ldr	r3, [pc, #260]	; (808a4 <genclk_enable_source+0x188>)
   8079e:	4798      	blx	r3
		}
		break;
   807a0:	e06b      	b.n	8087a <genclk_enable_source+0x15e>

	case GENCLK_PCK_SRC_SLCK_BYPASS:
		if (!osc_is_ready(OSC_SLCK_32K_BYPASS)) {
   807a2:	2002      	movs	r0, #2
   807a4:	4b3d      	ldr	r3, [pc, #244]	; (8089c <genclk_enable_source+0x180>)
   807a6:	4798      	blx	r3
   807a8:	4603      	mov	r3, r0
   807aa:	f083 0301 	eor.w	r3, r3, #1
   807ae:	b2db      	uxtb	r3, r3
   807b0:	2b00      	cmp	r3, #0
   807b2:	d064      	beq.n	8087e <genclk_enable_source+0x162>
			osc_enable(OSC_SLCK_32K_BYPASS);
   807b4:	2002      	movs	r0, #2
   807b6:	4b3a      	ldr	r3, [pc, #232]	; (808a0 <genclk_enable_source+0x184>)
   807b8:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_BYPASS);
   807ba:	2002      	movs	r0, #2
   807bc:	4b39      	ldr	r3, [pc, #228]	; (808a4 <genclk_enable_source+0x188>)
   807be:	4798      	blx	r3
		}
		break;
   807c0:	e05d      	b.n	8087e <genclk_enable_source+0x162>

	case GENCLK_PCK_SRC_MAINCK_4M_RC:
		if (!osc_is_ready(OSC_MAINCK_4M_RC)) {
   807c2:	2003      	movs	r0, #3
   807c4:	4b35      	ldr	r3, [pc, #212]	; (8089c <genclk_enable_source+0x180>)
   807c6:	4798      	blx	r3
   807c8:	4603      	mov	r3, r0
   807ca:	f083 0301 	eor.w	r3, r3, #1
   807ce:	b2db      	uxtb	r3, r3
   807d0:	2b00      	cmp	r3, #0
   807d2:	d056      	beq.n	80882 <genclk_enable_source+0x166>
			osc_enable(OSC_MAINCK_4M_RC);
   807d4:	2003      	movs	r0, #3
   807d6:	4b32      	ldr	r3, [pc, #200]	; (808a0 <genclk_enable_source+0x184>)
   807d8:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_4M_RC);
   807da:	2003      	movs	r0, #3
   807dc:	4b31      	ldr	r3, [pc, #196]	; (808a4 <genclk_enable_source+0x188>)
   807de:	4798      	blx	r3
		}
		break;
   807e0:	e04f      	b.n	80882 <genclk_enable_source+0x166>

	case GENCLK_PCK_SRC_MAINCK_8M_RC:
		if (!osc_is_ready(OSC_MAINCK_8M_RC)) {
   807e2:	2004      	movs	r0, #4
   807e4:	4b2d      	ldr	r3, [pc, #180]	; (8089c <genclk_enable_source+0x180>)
   807e6:	4798      	blx	r3
   807e8:	4603      	mov	r3, r0
   807ea:	f083 0301 	eor.w	r3, r3, #1
   807ee:	b2db      	uxtb	r3, r3
   807f0:	2b00      	cmp	r3, #0
   807f2:	d048      	beq.n	80886 <genclk_enable_source+0x16a>
			osc_enable(OSC_MAINCK_8M_RC);
   807f4:	2004      	movs	r0, #4
   807f6:	4b2a      	ldr	r3, [pc, #168]	; (808a0 <genclk_enable_source+0x184>)
   807f8:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_8M_RC);
   807fa:	2004      	movs	r0, #4
   807fc:	4b29      	ldr	r3, [pc, #164]	; (808a4 <genclk_enable_source+0x188>)
   807fe:	4798      	blx	r3
		}
		break;
   80800:	e041      	b.n	80886 <genclk_enable_source+0x16a>

	case GENCLK_PCK_SRC_MAINCK_12M_RC:
		if (!osc_is_ready(OSC_MAINCK_12M_RC)) {
   80802:	2005      	movs	r0, #5
   80804:	4b25      	ldr	r3, [pc, #148]	; (8089c <genclk_enable_source+0x180>)
   80806:	4798      	blx	r3
   80808:	4603      	mov	r3, r0
   8080a:	f083 0301 	eor.w	r3, r3, #1
   8080e:	b2db      	uxtb	r3, r3
   80810:	2b00      	cmp	r3, #0
   80812:	d03a      	beq.n	8088a <genclk_enable_source+0x16e>
			osc_enable(OSC_MAINCK_12M_RC);
   80814:	2005      	movs	r0, #5
   80816:	4b22      	ldr	r3, [pc, #136]	; (808a0 <genclk_enable_source+0x184>)
   80818:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_12M_RC);
   8081a:	2005      	movs	r0, #5
   8081c:	4b21      	ldr	r3, [pc, #132]	; (808a4 <genclk_enable_source+0x188>)
   8081e:	4798      	blx	r3
		}
		break;
   80820:	e033      	b.n	8088a <genclk_enable_source+0x16e>

	case GENCLK_PCK_SRC_MAINCK_XTAL:
		if (!osc_is_ready(OSC_MAINCK_XTAL)) {
   80822:	2006      	movs	r0, #6
   80824:	4b1d      	ldr	r3, [pc, #116]	; (8089c <genclk_enable_source+0x180>)
   80826:	4798      	blx	r3
   80828:	4603      	mov	r3, r0
   8082a:	f083 0301 	eor.w	r3, r3, #1
   8082e:	b2db      	uxtb	r3, r3
   80830:	2b00      	cmp	r3, #0
   80832:	d02c      	beq.n	8088e <genclk_enable_source+0x172>
			osc_enable(OSC_MAINCK_XTAL);
   80834:	2006      	movs	r0, #6
   80836:	4b1a      	ldr	r3, [pc, #104]	; (808a0 <genclk_enable_source+0x184>)
   80838:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_XTAL);
   8083a:	2006      	movs	r0, #6
   8083c:	4b19      	ldr	r3, [pc, #100]	; (808a4 <genclk_enable_source+0x188>)
   8083e:	4798      	blx	r3
		}
		break;
   80840:	e025      	b.n	8088e <genclk_enable_source+0x172>

	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		if (!osc_is_ready(OSC_MAINCK_BYPASS)) {
   80842:	2007      	movs	r0, #7
   80844:	4b15      	ldr	r3, [pc, #84]	; (8089c <genclk_enable_source+0x180>)
   80846:	4798      	blx	r3
   80848:	4603      	mov	r3, r0
   8084a:	f083 0301 	eor.w	r3, r3, #1
   8084e:	b2db      	uxtb	r3, r3
   80850:	2b00      	cmp	r3, #0
   80852:	d01e      	beq.n	80892 <genclk_enable_source+0x176>
			osc_enable(OSC_MAINCK_BYPASS);
   80854:	2007      	movs	r0, #7
   80856:	4b12      	ldr	r3, [pc, #72]	; (808a0 <genclk_enable_source+0x184>)
   80858:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_BYPASS);
   8085a:	2007      	movs	r0, #7
   8085c:	4b11      	ldr	r3, [pc, #68]	; (808a4 <genclk_enable_source+0x188>)
   8085e:	4798      	blx	r3
		}
		break;
   80860:	e017      	b.n	80892 <genclk_enable_source+0x176>

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_PCK_SRC_PLLACK:
		pll_enable_config_defaults(0);
   80862:	2000      	movs	r0, #0
   80864:	4b10      	ldr	r3, [pc, #64]	; (808a8 <genclk_enable_source+0x18c>)
   80866:	4798      	blx	r3
		break;
   80868:	e014      	b.n	80894 <genclk_enable_source+0x178>
#endif

#ifdef CONFIG_PLL1_SOURCE
	case GENCLK_PCK_SRC_PLLBCK:
		pll_enable_config_defaults(1);
   8086a:	2001      	movs	r0, #1
   8086c:	4b0e      	ldr	r3, [pc, #56]	; (808a8 <genclk_enable_source+0x18c>)
   8086e:	4798      	blx	r3
		break;
   80870:	e010      	b.n	80894 <genclk_enable_source+0x178>
	case GENCLK_PCK_SRC_MCK:
		break;

	default:
		Assert(false);
		break;
   80872:	bf00      	nop
   80874:	e00e      	b.n	80894 <genclk_enable_source+0x178>
		break;
   80876:	bf00      	nop
   80878:	e00c      	b.n	80894 <genclk_enable_source+0x178>
		break;
   8087a:	bf00      	nop
   8087c:	e00a      	b.n	80894 <genclk_enable_source+0x178>
		break;
   8087e:	bf00      	nop
   80880:	e008      	b.n	80894 <genclk_enable_source+0x178>
		break;
   80882:	bf00      	nop
   80884:	e006      	b.n	80894 <genclk_enable_source+0x178>
		break;
   80886:	bf00      	nop
   80888:	e004      	b.n	80894 <genclk_enable_source+0x178>
		break;
   8088a:	bf00      	nop
   8088c:	e002      	b.n	80894 <genclk_enable_source+0x178>
		break;
   8088e:	bf00      	nop
   80890:	e000      	b.n	80894 <genclk_enable_source+0x178>
		break;
   80892:	bf00      	nop
	}
}
   80894:	bf00      	nop
   80896:	3708      	adds	r7, #8
   80898:	46bd      	mov	sp, r7
   8089a:	bd80      	pop	{r7, pc}
   8089c:	00080181 	.word	0x00080181
   808a0:	000800fd 	.word	0x000800fd
   808a4:	00080275 	.word	0x00080275
   808a8:	000803b1 	.word	0x000803b1

000808ac <phywhisperer_no_pwr>:

//Serial Number - will be read by device ID
char usb_serial_number[33] = "000000000000DEADBEEF";

void phywhisperer_no_pwr(void)
{
   808ac:	b480      	push	{r7}
   808ae:	af00      	add	r7, sp, #0
    PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   808b0:	4b05      	ldr	r3, [pc, #20]	; (808c8 <phywhisperer_no_pwr+0x1c>)
   808b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   808b6:	635a      	str	r2, [r3, #52]	; 0x34
    PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   808b8:	4b03      	ldr	r3, [pc, #12]	; (808c8 <phywhisperer_no_pwr+0x1c>)
   808ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   808be:	635a      	str	r2, [r3, #52]	; 0x34
}
   808c0:	bf00      	nop
   808c2:	46bd      	mov	sp, r7
   808c4:	bc80      	pop	{r7}
   808c6:	4770      	bx	lr
   808c8:	400e0c00 	.word	0x400e0c00

000808cc <phywhisperer_5V_pwr>:

void phywhisperer_5V_pwr(void)
{
   808cc:	b480      	push	{r7}
   808ce:	af00      	add	r7, sp, #0
    PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   808d0:	4b05      	ldr	r3, [pc, #20]	; (808e8 <phywhisperer_5V_pwr+0x1c>)
   808d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   808d6:	635a      	str	r2, [r3, #52]	; 0x34
    PIOA->PIO_SODR = (1 << F_VB5V); //enable host power
   808d8:	4b03      	ldr	r3, [pc, #12]	; (808e8 <phywhisperer_5V_pwr+0x1c>)
   808da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   808de:	631a      	str	r2, [r3, #48]	; 0x30
}
   808e0:	bf00      	nop
   808e2:	46bd      	mov	sp, r7
   808e4:	bc80      	pop	{r7}
   808e6:	4770      	bx	lr
   808e8:	400e0c00 	.word	0x400e0c00

000808ec <phywhisperer_host_pwr>:

void phywhisperer_host_pwr(void)
{
   808ec:	b480      	push	{r7}
   808ee:	af00      	add	r7, sp, #0
    PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   808f0:	4b05      	ldr	r3, [pc, #20]	; (80908 <phywhisperer_host_pwr+0x1c>)
   808f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   808f6:	635a      	str	r2, [r3, #52]	; 0x34
    PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
   808f8:	4b03      	ldr	r3, [pc, #12]	; (80908 <phywhisperer_host_pwr+0x1c>)
   808fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   808fe:	631a      	str	r2, [r3, #48]	; 0x30
}
   80900:	bf00      	nop
   80902:	46bd      	mov	sp, r7
   80904:	bc80      	pop	{r7}
   80906:	4770      	bx	lr
   80908:	400e0c00 	.word	0x400e0c00

0008090c <pwr_st_from_io>:
        phywhisperer_host_pwr();
    }
}

uint8_t pwr_st_from_io(void)
{
   8090c:	b480      	push	{r7}
   8090e:	af00      	add	r7, sp, #0
    if (!(PIOA->PIO_ODSR & (1 << F_VBHOST)) && !(PIOA->PIO_ODSR & (1 << F_VB5V))) {
   80910:	4b17      	ldr	r3, [pc, #92]	; (80970 <pwr_st_from_io+0x64>)
   80912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   80918:	2b00      	cmp	r3, #0
   8091a:	d107      	bne.n	8092c <pwr_st_from_io+0x20>
   8091c:	4b14      	ldr	r3, [pc, #80]	; (80970 <pwr_st_from_io+0x64>)
   8091e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80920:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   80924:	2b00      	cmp	r3, #0
   80926:	d101      	bne.n	8092c <pwr_st_from_io+0x20>
        //USB off
        return 0;
   80928:	2300      	movs	r3, #0
   8092a:	e01c      	b.n	80966 <pwr_st_from_io+0x5a>
    } else if (!(PIOA->PIO_ODSR & (1 << F_VBHOST)) && (PIOA->PIO_ODSR & (1 << F_VB5V))) {
   8092c:	4b10      	ldr	r3, [pc, #64]	; (80970 <pwr_st_from_io+0x64>)
   8092e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   80934:	2b00      	cmp	r3, #0
   80936:	d107      	bne.n	80948 <pwr_st_from_io+0x3c>
   80938:	4b0d      	ldr	r3, [pc, #52]	; (80970 <pwr_st_from_io+0x64>)
   8093a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8093c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   80940:	2b00      	cmp	r3, #0
   80942:	d001      	beq.n	80948 <pwr_st_from_io+0x3c>
        //Host power
        return 1;
   80944:	2301      	movs	r3, #1
   80946:	e00e      	b.n	80966 <pwr_st_from_io+0x5a>
    } else if ((PIOA->PIO_ODSR & (1 << F_VBHOST)) && !(PIOA->PIO_ODSR & (1 << F_VB5V))) {
   80948:	4b09      	ldr	r3, [pc, #36]	; (80970 <pwr_st_from_io+0x64>)
   8094a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8094c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   80950:	2b00      	cmp	r3, #0
   80952:	d007      	beq.n	80964 <pwr_st_from_io+0x58>
   80954:	4b06      	ldr	r3, [pc, #24]	; (80970 <pwr_st_from_io+0x64>)
   80956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80958:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   8095c:	2b00      	cmp	r3, #0
   8095e:	d101      	bne.n	80964 <pwr_st_from_io+0x58>
        //Sniffer power
        return 2;
   80960:	2302      	movs	r3, #2
   80962:	e000      	b.n	80966 <pwr_st_from_io+0x5a>
    } else {
        //Everything's on...
        return 0xFF;
   80964:	23ff      	movs	r3, #255	; 0xff
    }

}
   80966:	4618      	mov	r0, r3
   80968:	46bd      	mov	sp, r7
   8096a:	bc80      	pop	{r7}
   8096c:	4770      	bx	lr
   8096e:	bf00      	nop
   80970:	400e0c00 	.word	0x400e0c00

00080974 <phywhisperer_setup_pins>:

void phywhisperer_setup_pins(void)
{
   80974:	b580      	push	{r7, lr}
   80976:	af00      	add	r7, sp, #0
    board_init();
   80978:	4b3a      	ldr	r3, [pc, #232]	; (80a64 <phywhisperer_setup_pins+0xf0>)
   8097a:	4798      	blx	r3
    ioport_set_pin_mode(BUTTON_IN, IOPORT_MODE_PULLUP); //(1 << 2) = PULL UP
   8097c:	2108      	movs	r1, #8
   8097e:	2018      	movs	r0, #24
   80980:	4b39      	ldr	r3, [pc, #228]	; (80a68 <phywhisperer_setup_pins+0xf4>)
   80982:	4798      	blx	r3
    PIOA->PIO_ODR = (1 << BUTTON_IN);
   80984:	4b39      	ldr	r3, [pc, #228]	; (80a6c <phywhisperer_setup_pins+0xf8>)
   80986:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   8098a:	615a      	str	r2, [r3, #20]
    PIOA->PIO_PUER = (1 << BUTTON_IN); // enable pullup
   8098c:	4b37      	ldr	r3, [pc, #220]	; (80a6c <phywhisperer_setup_pins+0xf8>)
   8098e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   80992:	665a      	str	r2, [r3, #100]	; 0x64
    PIOA->PIO_DIFSR = (1 << BUTTON_IN); //enable debounce
   80994:	4b35      	ldr	r3, [pc, #212]	; (80a6c <phywhisperer_setup_pins+0xf8>)
   80996:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   8099a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    PIOA->PIO_OER = (1 << F_VB5V) | (1 << F_VBHOST); //enable output mode on VBHOST/VBSNIFF pins
   8099e:	4b33      	ldr	r3, [pc, #204]	; (80a6c <phywhisperer_setup_pins+0xf8>)
   809a0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
   809a4:	611a      	str	r2, [r3, #16]

    phywhisperer_host_pwr();
   809a6:	4b32      	ldr	r3, [pc, #200]	; (80a70 <phywhisperer_setup_pins+0xfc>)
   809a8:	4798      	blx	r3
    
    //Configure FPGA to allow programming via USB
    fpga_program_init();
   809aa:	4b32      	ldr	r3, [pc, #200]	; (80a74 <phywhisperer_setup_pins+0x100>)
   809ac:	4798      	blx	r3

    /* Enable SMC */
    pmc_enable_periph_clk(ID_SMC);
   809ae:	2009      	movs	r0, #9
   809b0:	4b31      	ldr	r3, [pc, #196]	; (80a78 <phywhisperer_setup_pins+0x104>)
   809b2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   809b4:	4931      	ldr	r1, [pc, #196]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809b6:	2029      	movs	r0, #41	; 0x29
   809b8:	4b31      	ldr	r3, [pc, #196]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809ba:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   809bc:	492f      	ldr	r1, [pc, #188]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809be:	202a      	movs	r0, #42	; 0x2a
   809c0:	4b2f      	ldr	r3, [pc, #188]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809c2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   809c4:	492d      	ldr	r1, [pc, #180]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809c6:	202b      	movs	r0, #43	; 0x2b
   809c8:	4b2d      	ldr	r3, [pc, #180]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809ca:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   809cc:	492b      	ldr	r1, [pc, #172]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809ce:	202c      	movs	r0, #44	; 0x2c
   809d0:	4b2b      	ldr	r3, [pc, #172]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809d2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   809d4:	4929      	ldr	r1, [pc, #164]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809d6:	202d      	movs	r0, #45	; 0x2d
   809d8:	4b29      	ldr	r3, [pc, #164]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809da:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   809dc:	4927      	ldr	r1, [pc, #156]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809de:	202e      	movs	r0, #46	; 0x2e
   809e0:	4b27      	ldr	r3, [pc, #156]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809e2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   809e4:	4925      	ldr	r1, [pc, #148]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809e6:	202f      	movs	r0, #47	; 0x2f
   809e8:	4b25      	ldr	r3, [pc, #148]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809ea:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   809ec:	4923      	ldr	r1, [pc, #140]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809ee:	2030      	movs	r0, #48	; 0x30
   809f0:	4b23      	ldr	r3, [pc, #140]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809f2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   809f4:	4921      	ldr	r1, [pc, #132]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809f6:	2033      	movs	r0, #51	; 0x33
   809f8:	4b21      	ldr	r3, [pc, #132]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809fa:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   809fc:	491f      	ldr	r1, [pc, #124]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809fe:	2037      	movs	r0, #55	; 0x37
   80a00:	4b1f      	ldr	r3, [pc, #124]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   80a02:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   80a04:	491d      	ldr	r1, [pc, #116]	; (80a7c <phywhisperer_setup_pins+0x108>)
   80a06:	2034      	movs	r0, #52	; 0x34
   80a08:	4b1d      	ldr	r3, [pc, #116]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   80a0a:	4798      	blx	r3

    gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80a0c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   80a10:	f240 11bf 	movw	r1, #447	; 0x1bf
   80a14:	481b      	ldr	r0, [pc, #108]	; (80a84 <phywhisperer_setup_pins+0x110>)
   80a16:	4b1c      	ldr	r3, [pc, #112]	; (80a88 <phywhisperer_setup_pins+0x114>)
   80a18:	4798      	blx	r3
    pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   80a1a:	f240 11bf 	movw	r1, #447	; 0x1bf
   80a1e:	4819      	ldr	r0, [pc, #100]	; (80a84 <phywhisperer_setup_pins+0x110>)
   80a20:	4b1a      	ldr	r3, [pc, #104]	; (80a8c <phywhisperer_setup_pins+0x118>)
   80a22:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG1);
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG1);
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG1);
    */

    gpio_configure_pin(PIN_EBI_USB_SPARE0, PIN_EBI_USB_SPARE0_FLAGS);
   80a24:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80a28:	2026      	movs	r0, #38	; 0x26
   80a2a:	4b15      	ldr	r3, [pc, #84]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   80a2c:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_USB_SPARE1, PIN_EBI_USB_SPARE1_FLAGS);
   80a2e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80a32:	2031      	movs	r0, #49	; 0x31
   80a34:	4b12      	ldr	r3, [pc, #72]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   80a36:	4798      	blx	r3

    smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   80a38:	4a15      	ldr	r2, [pc, #84]	; (80a90 <phywhisperer_setup_pins+0x11c>)
   80a3a:	2100      	movs	r1, #0
   80a3c:	4815      	ldr	r0, [pc, #84]	; (80a94 <phywhisperer_setup_pins+0x120>)
   80a3e:	4b16      	ldr	r3, [pc, #88]	; (80a98 <phywhisperer_setup_pins+0x124>)
   80a40:	4798      	blx	r3
                         | SMC_SETUP_NCS_WR_SETUP(1)
                         | SMC_SETUP_NRD_SETUP(1)
                         | SMC_SETUP_NCS_RD_SETUP(1));
    smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   80a42:	4a16      	ldr	r2, [pc, #88]	; (80a9c <phywhisperer_setup_pins+0x128>)
   80a44:	2100      	movs	r1, #0
   80a46:	4813      	ldr	r0, [pc, #76]	; (80a94 <phywhisperer_setup_pins+0x120>)
   80a48:	4b15      	ldr	r3, [pc, #84]	; (80aa0 <phywhisperer_setup_pins+0x12c>)
   80a4a:	4798      	blx	r3
                         | SMC_PULSE_NCS_WR_PULSE(1)
                         | SMC_PULSE_NRD_PULSE(3)
                         | SMC_PULSE_NCS_RD_PULSE(1));
    smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   80a4c:	4a15      	ldr	r2, [pc, #84]	; (80aa4 <phywhisperer_setup_pins+0x130>)
   80a4e:	2100      	movs	r1, #0
   80a50:	4810      	ldr	r0, [pc, #64]	; (80a94 <phywhisperer_setup_pins+0x120>)
   80a52:	4b15      	ldr	r3, [pc, #84]	; (80aa8 <phywhisperer_setup_pins+0x134>)
   80a54:	4798      	blx	r3
                         | SMC_CYCLE_NRD_CYCLE(4));
    smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   80a56:	2203      	movs	r2, #3
   80a58:	2100      	movs	r1, #0
   80a5a:	480e      	ldr	r0, [pc, #56]	; (80a94 <phywhisperer_setup_pins+0x120>)
   80a5c:	4b13      	ldr	r3, [pc, #76]	; (80aac <phywhisperer_setup_pins+0x138>)
   80a5e:	4798      	blx	r3
                 | SMC_MODE_DBW_BIT_8);
}
   80a60:	bf00      	nop
   80a62:	bd80      	pop	{r7, pc}
   80a64:	00081831 	.word	0x00081831
   80a68:	0008045d 	.word	0x0008045d
   80a6c:	400e0c00 	.word	0x400e0c00
   80a70:	000808ed 	.word	0x000808ed
   80a74:	00081579 	.word	0x00081579
   80a78:	000821b5 	.word	0x000821b5
   80a7c:	08000001 	.word	0x08000001
   80a80:	00081b69 	.word	0x00081b69
   80a84:	400e0e00 	.word	0x400e0e00
   80a88:	00081c8d 	.word	0x00081c8d
   80a8c:	00081a75 	.word	0x00081a75
   80a90:	01010100 	.word	0x01010100
   80a94:	400e0000 	.word	0x400e0000
   80a98:	0008270d 	.word	0x0008270d
   80a9c:	01030101 	.word	0x01030101
   80aa0:	00082737 	.word	0x00082737
   80aa4:	00040002 	.word	0x00040002
   80aa8:	00082761 	.word	0x00082761
   80aac:	0008278b 	.word	0x0008278b

00080ab0 <hacky_delay>:

void hacky_delay(void)
{
   80ab0:	b480      	push	{r7}
   80ab2:	b083      	sub	sp, #12
   80ab4:	af00      	add	r7, sp, #0
    for (volatile uint32_t i = 0; i < 250000; i++);
   80ab6:	2300      	movs	r3, #0
   80ab8:	607b      	str	r3, [r7, #4]
   80aba:	e002      	b.n	80ac2 <hacky_delay+0x12>
   80abc:	687b      	ldr	r3, [r7, #4]
   80abe:	3301      	adds	r3, #1
   80ac0:	607b      	str	r3, [r7, #4]
   80ac2:	687b      	ldr	r3, [r7, #4]
   80ac4:	4a03      	ldr	r2, [pc, #12]	; (80ad4 <hacky_delay+0x24>)
   80ac6:	4293      	cmp	r3, r2
   80ac8:	d9f8      	bls.n	80abc <hacky_delay+0xc>
}
   80aca:	bf00      	nop
   80acc:	370c      	adds	r7, #12
   80ace:	46bd      	mov	sp, r7
   80ad0:	bc80      	pop	{r7}
   80ad2:	4770      	bx	lr
   80ad4:	0003d08f 	.word	0x0003d08f

00080ad8 <genclk_enable_config>:

static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
   80ad8:	b580      	push	{r7, lr}
   80ada:	b086      	sub	sp, #24
   80adc:	af00      	add	r7, sp, #0
   80ade:	60f8      	str	r0, [r7, #12]
   80ae0:	460b      	mov	r3, r1
   80ae2:	607a      	str	r2, [r7, #4]
   80ae4:	72fb      	strb	r3, [r7, #11]
    struct genclk_config gcfg;

    genclk_config_defaults(&gcfg, id);
   80ae6:	f107 0314 	add.w	r3, r7, #20
   80aea:	68f9      	ldr	r1, [r7, #12]
   80aec:	4618      	mov	r0, r3
   80aee:	4b0e      	ldr	r3, [pc, #56]	; (80b28 <genclk_enable_config+0x50>)
   80af0:	4798      	blx	r3
    genclk_enable_source(src);
   80af2:	7afb      	ldrb	r3, [r7, #11]
   80af4:	4618      	mov	r0, r3
   80af6:	4b0d      	ldr	r3, [pc, #52]	; (80b2c <genclk_enable_config+0x54>)
   80af8:	4798      	blx	r3
    genclk_config_set_source(&gcfg, src);
   80afa:	7afa      	ldrb	r2, [r7, #11]
   80afc:	f107 0314 	add.w	r3, r7, #20
   80b00:	4611      	mov	r1, r2
   80b02:	4618      	mov	r0, r3
   80b04:	4b0a      	ldr	r3, [pc, #40]	; (80b30 <genclk_enable_config+0x58>)
   80b06:	4798      	blx	r3
    genclk_config_set_divider(&gcfg, divider);
   80b08:	f107 0314 	add.w	r3, r7, #20
   80b0c:	6879      	ldr	r1, [r7, #4]
   80b0e:	4618      	mov	r0, r3
   80b10:	4b08      	ldr	r3, [pc, #32]	; (80b34 <genclk_enable_config+0x5c>)
   80b12:	4798      	blx	r3
    genclk_enable(&gcfg, id);
   80b14:	f107 0314 	add.w	r3, r7, #20
   80b18:	68f9      	ldr	r1, [r7, #12]
   80b1a:	4618      	mov	r0, r3
   80b1c:	4b06      	ldr	r3, [pc, #24]	; (80b38 <genclk_enable_config+0x60>)
   80b1e:	4798      	blx	r3
}
   80b20:	bf00      	nop
   80b22:	3718      	adds	r7, #24
   80b24:	46bd      	mov	sp, r7
   80b26:	bd80      	pop	{r7, pc}
   80b28:	00080609 	.word	0x00080609
   80b2c:	0008071d 	.word	0x0008071d
   80b30:	00080625 	.word	0x00080625
   80b34:	000806c1 	.word	0x000806c1
   80b38:	000806ed 	.word	0x000806ed

00080b3c <main>:

void (*pwr_list[])(void) = {phywhisperer_no_pwr, phywhisperer_5V_pwr, phywhisperer_host_pwr};

int main(void)
{
   80b3c:	b580      	push	{r7, lr}
   80b3e:	b086      	sub	sp, #24
   80b40:	af00      	add	r7, sp, #0
    uint32_t serial_number[4];

    // Read Device-ID from SAM3U. Do this before enabling interrupts etc.
    flash_read_unique_id(serial_number, sizeof(serial_number));
   80b42:	463b      	mov	r3, r7
   80b44:	2110      	movs	r1, #16
   80b46:	4618      	mov	r0, r3
   80b48:	4b37      	ldr	r3, [pc, #220]	; (80c28 <main+0xec>)
   80b4a:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
   80b4c:	4b37      	ldr	r3, [pc, #220]	; (80c2c <main+0xf0>)
   80b4e:	2201      	movs	r2, #1
   80b50:	701a      	strb	r2, [r3, #0]
   80b52:	f3bf 8f5f 	dmb	sy
   80b56:	b662      	cpsie	i

    // Initialize the sleep manager
    sleepmgr_init();
   80b58:	4b35      	ldr	r3, [pc, #212]	; (80c30 <main+0xf4>)
   80b5a:	4798      	blx	r3
#if !SAMD21 && !SAMR21
    sysclk_init();
   80b5c:	4b35      	ldr	r3, [pc, #212]	; (80c34 <main+0xf8>)
   80b5e:	4798      	blx	r3
    phywhisperer_setup_pins();
   80b60:	4b35      	ldr	r3, [pc, #212]	; (80c38 <main+0xfc>)
   80b62:	4798      	blx	r3
#else
    system_init();
#endif

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
   80b64:	2300      	movs	r3, #0
   80b66:	617b      	str	r3, [r7, #20]
   80b68:	e011      	b.n	80b8e <main+0x52>
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   80b6a:	697b      	ldr	r3, [r7, #20]
   80b6c:	00db      	lsls	r3, r3, #3
   80b6e:	4a33      	ldr	r2, [pc, #204]	; (80c3c <main+0x100>)
   80b70:	1898      	adds	r0, r3, r2
   80b72:	697b      	ldr	r3, [r7, #20]
   80b74:	009b      	lsls	r3, r3, #2
   80b76:	f107 0218 	add.w	r2, r7, #24
   80b7a:	4413      	add	r3, r2
   80b7c:	f853 3c18 	ldr.w	r3, [r3, #-24]
   80b80:	461a      	mov	r2, r3
   80b82:	492f      	ldr	r1, [pc, #188]	; (80c40 <main+0x104>)
   80b84:	4b2f      	ldr	r3, [pc, #188]	; (80c44 <main+0x108>)
   80b86:	4798      	blx	r3
	for(unsigned int i = 0; i < 4; i++){
   80b88:	697b      	ldr	r3, [r7, #20]
   80b8a:	3301      	adds	r3, #1
   80b8c:	617b      	str	r3, [r7, #20]
   80b8e:	697b      	ldr	r3, [r7, #20]
   80b90:	2b03      	cmp	r3, #3
   80b92:	d9ea      	bls.n	80b6a <main+0x2e>
	}
	usb_serial_number[32] = 0;
   80b94:	4b29      	ldr	r3, [pc, #164]	; (80c3c <main+0x100>)
   80b96:	2200      	movs	r2, #0
   80b98:	f883 2020 	strb.w	r2, [r3, #32]

    genclk_enable_config(GENCLK_PCK_1, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
   80b9c:	2200      	movs	r2, #0
   80b9e:	210a      	movs	r1, #10
   80ba0:	2001      	movs	r0, #1
   80ba2:	4b29      	ldr	r3, [pc, #164]	; (80c48 <main+0x10c>)
   80ba4:	4798      	blx	r3
    udc_start();
   80ba6:	4b29      	ldr	r3, [pc, #164]	; (80c4c <main+0x110>)
   80ba8:	4798      	blx	r3
    gpio_set_pin_high(LED0_GPIO);
   80baa:	201d      	movs	r0, #29
   80bac:	4b28      	ldr	r3, [pc, #160]	; (80c50 <main+0x114>)
   80bae:	4798      	blx	r3
    gpio_set_pin_low(LED1_GPIO);
   80bb0:	201f      	movs	r0, #31
   80bb2:	4b28      	ldr	r3, [pc, #160]	; (80c54 <main+0x118>)
   80bb4:	4798      	blx	r3

    phywhisperer_no_pwr();
   80bb6:	4b28      	ldr	r3, [pc, #160]	; (80c58 <main+0x11c>)
   80bb8:	4798      	blx	r3
    USB_PWR_STATE = 0;
   80bba:	4b28      	ldr	r3, [pc, #160]	; (80c5c <main+0x120>)
   80bbc:	2200      	movs	r2, #0
   80bbe:	701a      	strb	r2, [r3, #0]

    uint8_t curr_pwr_setting = 0;
   80bc0:	2300      	movs	r3, #0
   80bc2:	74fb      	strb	r3, [r7, #19]
    while(1) {
        sleepmgr_enter_sleep();
   80bc4:	4b26      	ldr	r3, [pc, #152]	; (80c60 <main+0x124>)
   80bc6:	4798      	blx	r3
        uint8_t button_status = !(PIOA->PIO_PDSR & (1 << BUTTON_IN));
   80bc8:	4b26      	ldr	r3, [pc, #152]	; (80c64 <main+0x128>)
   80bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80bd0:	2b00      	cmp	r3, #0
   80bd2:	bf0c      	ite	eq
   80bd4:	2301      	moveq	r3, #1
   80bd6:	2300      	movne	r3, #0
   80bd8:	b2db      	uxtb	r3, r3
   80bda:	74bb      	strb	r3, [r7, #18]
        if (button_status){
   80bdc:	7cbb      	ldrb	r3, [r7, #18]
   80bde:	2b00      	cmp	r3, #0
   80be0:	d0f0      	beq.n	80bc4 <main+0x88>
            hacky_delay(); //delay to try to debounce
   80be2:	4b21      	ldr	r3, [pc, #132]	; (80c68 <main+0x12c>)
   80be4:	4798      	blx	r3
            while (!(PIOA->PIO_PDSR & (1 << BUTTON_IN))); //wait for trigger to be unpressed
   80be6:	bf00      	nop
   80be8:	4b1e      	ldr	r3, [pc, #120]	; (80c64 <main+0x128>)
   80bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80bf0:	2b00      	cmp	r3, #0
   80bf2:	d0f9      	beq.n	80be8 <main+0xac>

            if (USB_PWR_STATE && USB_PWR_STATE <= 2) {
   80bf4:	4b19      	ldr	r3, [pc, #100]	; (80c5c <main+0x120>)
   80bf6:	781b      	ldrb	r3, [r3, #0]
   80bf8:	2b00      	cmp	r3, #0
   80bfa:	d012      	beq.n	80c22 <main+0xe6>
   80bfc:	4b17      	ldr	r3, [pc, #92]	; (80c5c <main+0x120>)
   80bfe:	781b      	ldrb	r3, [r3, #0]
   80c00:	2b02      	cmp	r3, #2
   80c02:	d80e      	bhi.n	80c22 <main+0xe6>
                if (pwr_st_from_io()) { //currently on
   80c04:	4b19      	ldr	r3, [pc, #100]	; (80c6c <main+0x130>)
   80c06:	4798      	blx	r3
   80c08:	4603      	mov	r3, r0
   80c0a:	2b00      	cmp	r3, #0
   80c0c:	d002      	beq.n	80c14 <main+0xd8>
                    phywhisperer_no_pwr();
   80c0e:	4b12      	ldr	r3, [pc, #72]	; (80c58 <main+0x11c>)
   80c10:	4798      	blx	r3
   80c12:	e006      	b.n	80c22 <main+0xe6>
                } else {
                    pwr_list[USB_PWR_STATE]();
   80c14:	4b11      	ldr	r3, [pc, #68]	; (80c5c <main+0x120>)
   80c16:	781b      	ldrb	r3, [r3, #0]
   80c18:	461a      	mov	r2, r3
   80c1a:	4b15      	ldr	r3, [pc, #84]	; (80c70 <main+0x134>)
   80c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80c20:	4798      	blx	r3
                }
            }
            hacky_delay();
   80c22:	4b11      	ldr	r3, [pc, #68]	; (80c68 <main+0x12c>)
   80c24:	4798      	blx	r3
    while(1) {
   80c26:	e7cd      	b.n	80bc4 <main+0x88>
   80c28:	00081741 	.word	0x00081741
   80c2c:	20000294 	.word	0x20000294
   80c30:	00080565 	.word	0x00080565
   80c34:	00082bf9 	.word	0x00082bf9
   80c38:	00080975 	.word	0x00080975
   80c3c:	2000025c 	.word	0x2000025c
   80c40:	0008aa20 	.word	0x0008aa20
   80c44:	00085d89 	.word	0x00085d89
   80c48:	00080ad9 	.word	0x00080ad9
   80c4c:	00083081 	.word	0x00083081
   80c50:	00081b09 	.word	0x00081b09
   80c54:	00081b39 	.word	0x00081b39
   80c58:	000808ad 	.word	0x000808ad
   80c5c:	20000d7c 	.word	0x20000d7c
   80c60:	000805cd 	.word	0x000805cd
   80c64:	400e0c00 	.word	0x400e0c00
   80c68:	00080ab1 	.word	0x00080ab1
   80c6c:	0008090d 	.word	0x0008090d
   80c70:	20000280 	.word	0x20000280

00080c74 <osc_enable>:
{
   80c74:	b580      	push	{r7, lr}
   80c76:	b082      	sub	sp, #8
   80c78:	af00      	add	r7, sp, #0
   80c7a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80c7c:	687b      	ldr	r3, [r7, #4]
   80c7e:	2b07      	cmp	r3, #7
   80c80:	d82e      	bhi.n	80ce0 <osc_enable+0x6c>
   80c82:	a201      	add	r2, pc, #4	; (adr r2, 80c88 <osc_enable+0x14>)
   80c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80c88:	00080cdf 	.word	0x00080cdf
   80c8c:	00080ca9 	.word	0x00080ca9
   80c90:	00080cb1 	.word	0x00080cb1
   80c94:	00080cb9 	.word	0x00080cb9
   80c98:	00080cc1 	.word	0x00080cc1
   80c9c:	00080cc9 	.word	0x00080cc9
   80ca0:	00080cd1 	.word	0x00080cd1
   80ca4:	00080cd9 	.word	0x00080cd9
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80ca8:	2000      	movs	r0, #0
   80caa:	4b0f      	ldr	r3, [pc, #60]	; (80ce8 <osc_enable+0x74>)
   80cac:	4798      	blx	r3
		break;
   80cae:	e017      	b.n	80ce0 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80cb0:	2001      	movs	r0, #1
   80cb2:	4b0d      	ldr	r3, [pc, #52]	; (80ce8 <osc_enable+0x74>)
   80cb4:	4798      	blx	r3
		break;
   80cb6:	e013      	b.n	80ce0 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80cb8:	2000      	movs	r0, #0
   80cba:	4b0c      	ldr	r3, [pc, #48]	; (80cec <osc_enable+0x78>)
   80cbc:	4798      	blx	r3
		break;
   80cbe:	e00f      	b.n	80ce0 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80cc0:	2010      	movs	r0, #16
   80cc2:	4b0a      	ldr	r3, [pc, #40]	; (80cec <osc_enable+0x78>)
   80cc4:	4798      	blx	r3
		break;
   80cc6:	e00b      	b.n	80ce0 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80cc8:	2020      	movs	r0, #32
   80cca:	4b08      	ldr	r3, [pc, #32]	; (80cec <osc_enable+0x78>)
   80ccc:	4798      	blx	r3
		break;
   80cce:	e007      	b.n	80ce0 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80cd0:	203e      	movs	r0, #62	; 0x3e
   80cd2:	4b07      	ldr	r3, [pc, #28]	; (80cf0 <osc_enable+0x7c>)
   80cd4:	4798      	blx	r3
		break;
   80cd6:	e003      	b.n	80ce0 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   80cd8:	4b06      	ldr	r3, [pc, #24]	; (80cf4 <osc_enable+0x80>)
   80cda:	4798      	blx	r3
		break;
   80cdc:	e000      	b.n	80ce0 <osc_enable+0x6c>
		break;
   80cde:	bf00      	nop
}
   80ce0:	bf00      	nop
   80ce2:	3708      	adds	r7, #8
   80ce4:	46bd      	mov	sp, r7
   80ce6:	bd80      	pop	{r7, pc}
   80ce8:	00081f69 	.word	0x00081f69
   80cec:	00081fd5 	.word	0x00081fd5
   80cf0:	00082049 	.word	0x00082049
   80cf4:	00082095 	.word	0x00082095

00080cf8 <osc_is_ready>:
{
   80cf8:	b580      	push	{r7, lr}
   80cfa:	b082      	sub	sp, #8
   80cfc:	af00      	add	r7, sp, #0
   80cfe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80d00:	687b      	ldr	r3, [r7, #4]
   80d02:	2b07      	cmp	r3, #7
   80d04:	d82f      	bhi.n	80d66 <osc_is_ready+0x6e>
   80d06:	a201      	add	r2, pc, #4	; (adr r2, 80d0c <osc_is_ready+0x14>)
   80d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80d0c:	00080d2d 	.word	0x00080d2d
   80d10:	00080d31 	.word	0x00080d31
   80d14:	00080d31 	.word	0x00080d31
   80d18:	00080d43 	.word	0x00080d43
   80d1c:	00080d43 	.word	0x00080d43
   80d20:	00080d43 	.word	0x00080d43
   80d24:	00080d55 	.word	0x00080d55
   80d28:	00080d55 	.word	0x00080d55
		return 1;
   80d2c:	2301      	movs	r3, #1
   80d2e:	e01b      	b.n	80d68 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   80d30:	4b0f      	ldr	r3, [pc, #60]	; (80d70 <osc_is_ready+0x78>)
   80d32:	4798      	blx	r3
   80d34:	4603      	mov	r3, r0
   80d36:	2b00      	cmp	r3, #0
   80d38:	bf14      	ite	ne
   80d3a:	2301      	movne	r3, #1
   80d3c:	2300      	moveq	r3, #0
   80d3e:	b2db      	uxtb	r3, r3
   80d40:	e012      	b.n	80d68 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   80d42:	4b0c      	ldr	r3, [pc, #48]	; (80d74 <osc_is_ready+0x7c>)
   80d44:	4798      	blx	r3
   80d46:	4603      	mov	r3, r0
   80d48:	2b00      	cmp	r3, #0
   80d4a:	bf14      	ite	ne
   80d4c:	2301      	movne	r3, #1
   80d4e:	2300      	moveq	r3, #0
   80d50:	b2db      	uxtb	r3, r3
   80d52:	e009      	b.n	80d68 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   80d54:	4b08      	ldr	r3, [pc, #32]	; (80d78 <osc_is_ready+0x80>)
   80d56:	4798      	blx	r3
   80d58:	4603      	mov	r3, r0
   80d5a:	2b00      	cmp	r3, #0
   80d5c:	bf14      	ite	ne
   80d5e:	2301      	movne	r3, #1
   80d60:	2300      	moveq	r3, #0
   80d62:	b2db      	uxtb	r3, r3
   80d64:	e000      	b.n	80d68 <osc_is_ready+0x70>
	return 0;
   80d66:	2300      	movs	r3, #0
}
   80d68:	4618      	mov	r0, r3
   80d6a:	3708      	adds	r7, #8
   80d6c:	46bd      	mov	sp, r7
   80d6e:	bd80      	pop	{r7, pc}
   80d70:	00081fa1 	.word	0x00081fa1
   80d74:	00082031 	.word	0x00082031
   80d78:	000820e1 	.word	0x000820e1

00080d7c <osc_wait_ready>:
{
   80d7c:	b580      	push	{r7, lr}
   80d7e:	b082      	sub	sp, #8
   80d80:	af00      	add	r7, sp, #0
   80d82:	4603      	mov	r3, r0
   80d84:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   80d86:	bf00      	nop
   80d88:	79fb      	ldrb	r3, [r7, #7]
   80d8a:	4618      	mov	r0, r3
   80d8c:	4b05      	ldr	r3, [pc, #20]	; (80da4 <osc_wait_ready+0x28>)
   80d8e:	4798      	blx	r3
   80d90:	4603      	mov	r3, r0
   80d92:	f083 0301 	eor.w	r3, r3, #1
   80d96:	b2db      	uxtb	r3, r3
   80d98:	2b00      	cmp	r3, #0
   80d9a:	d1f5      	bne.n	80d88 <osc_wait_ready+0xc>
}
   80d9c:	bf00      	nop
   80d9e:	3708      	adds	r7, #8
   80da0:	46bd      	mov	sp, r7
   80da2:	bd80      	pop	{r7, pc}
   80da4:	00080cf9 	.word	0x00080cf9

00080da8 <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
   80da8:	b580      	push	{r7, lr}
   80daa:	af00      	add	r7, sp, #0
	udd_detach();
   80dac:	4b01      	ldr	r3, [pc, #4]	; (80db4 <udc_detach+0xc>)
   80dae:	4798      	blx	r3
}
   80db0:	bf00      	nop
   80db2:	bd80      	pop	{r7, pc}
   80db4:	000841d1 	.word	0x000841d1

00080db8 <main_suspend_action>:
void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   80db8:	b480      	push	{r7}
   80dba:	af00      	add	r7, sp, #0
}
   80dbc:	bf00      	nop
   80dbe:	46bd      	mov	sp, r7
   80dc0:	bc80      	pop	{r7}
   80dc2:	4770      	bx	lr

00080dc4 <main_resume_action>:

void main_resume_action(void)
{
   80dc4:	b480      	push	{r7}
   80dc6:	af00      	add	r7, sp, #0
}
   80dc8:	bf00      	nop
   80dca:	46bd      	mov	sp, r7
   80dcc:	bc80      	pop	{r7}
   80dce:	4770      	bx	lr

00080dd0 <main_sof_action>:

void main_sof_action(void)
{
   80dd0:	b480      	push	{r7}
   80dd2:	af00      	add	r7, sp, #0
    if (!main_b_vendor_enable)
   80dd4:	4b04      	ldr	r3, [pc, #16]	; (80de8 <main_sof_action+0x18>)
   80dd6:	781b      	ldrb	r3, [r3, #0]
   80dd8:	b2db      	uxtb	r3, r3
   80dda:	f083 0301 	eor.w	r3, r3, #1
   80dde:	b2db      	uxtb	r3, r3
   80de0:	2b00      	cmp	r3, #0
        return;
}
   80de2:	46bd      	mov	sp, r7
   80de4:	bc80      	pop	{r7}
   80de6:	4770      	bx	lr
   80de8:	2000028c 	.word	0x2000028c

00080dec <main_vendor_enable>:

bool main_vendor_enable(void)
{
   80dec:	b580      	push	{r7, lr}
   80dee:	af00      	add	r7, sp, #0
    main_b_vendor_enable = true;
   80df0:	4b05      	ldr	r3, [pc, #20]	; (80e08 <main_vendor_enable+0x1c>)
   80df2:	2201      	movs	r2, #1
   80df4:	701a      	strb	r2, [r3, #0]
    // Start data reception on OUT endpoints
#if UDI_VENDOR_EPS_SIZE_BULK_FS
    //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   80df6:	4a05      	ldr	r2, [pc, #20]	; (80e0c <main_vendor_enable+0x20>)
   80df8:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80dfc:	4804      	ldr	r0, [pc, #16]	; (80e10 <main_vendor_enable+0x24>)
   80dfe:	4b05      	ldr	r3, [pc, #20]	; (80e14 <main_vendor_enable+0x28>)
   80e00:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
#endif
    return true;
   80e02:	2301      	movs	r3, #1
}
   80e04:	4618      	mov	r0, r3
   80e06:	bd80      	pop	{r7, pc}
   80e08:	2000028c 	.word	0x2000028c
   80e0c:	00081349 	.word	0x00081349
   80e10:	20000d80 	.word	0x20000d80
   80e14:	00083cb9 	.word	0x00083cb9

00080e18 <main_vendor_disable>:

void main_vendor_disable(void)
{
   80e18:	b480      	push	{r7}
   80e1a:	af00      	add	r7, sp, #0
    main_b_vendor_enable = false;
   80e1c:	4b03      	ldr	r3, [pc, #12]	; (80e2c <main_vendor_disable+0x14>)
   80e1e:	2200      	movs	r2, #0
   80e20:	701a      	strb	r2, [r3, #0]
}
   80e22:	bf00      	nop
   80e24:	46bd      	mov	sp, r7
   80e26:	bc80      	pop	{r7}
   80e28:	4770      	bx	lr
   80e2a:	bf00      	nop
   80e2c:	2000028c 	.word	0x2000028c

00080e30 <ctrl_readmem_bulk>:
void ctrl_writemem_bulk(void);
void ctrl_writemem_ctrl(void);
void ctrl_progfpga_bulk(void);


void ctrl_readmem_bulk(void){
   80e30:	b580      	push	{r7, lr}
   80e32:	b082      	sub	sp, #8
   80e34:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80e36:	4b0f      	ldr	r3, [pc, #60]	; (80e74 <ctrl_readmem_bulk+0x44>)
   80e38:	681b      	ldr	r3, [r3, #0]
   80e3a:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80e3c:	4b0d      	ldr	r3, [pc, #52]	; (80e74 <ctrl_readmem_bulk+0x44>)
   80e3e:	685b      	ldr	r3, [r3, #4]
   80e40:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80e42:	4b0d      	ldr	r3, [pc, #52]	; (80e78 <ctrl_readmem_bulk+0x48>)
   80e44:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   80e46:	bf00      	nop
   80e48:	2002      	movs	r0, #2
   80e4a:	4b0c      	ldr	r3, [pc, #48]	; (80e7c <ctrl_readmem_bulk+0x4c>)
   80e4c:	4798      	blx	r3
   80e4e:	4603      	mov	r3, r0
   80e50:	2b00      	cmp	r3, #0
   80e52:	d0f9      	beq.n	80e48 <ctrl_readmem_bulk+0x18>

    FPGA_setaddr(address);
   80e54:	6838      	ldr	r0, [r7, #0]
   80e56:	4b0a      	ldr	r3, [pc, #40]	; (80e80 <ctrl_readmem_bulk+0x50>)
   80e58:	4798      	blx	r3

    /* Do memory read */
    udi_vendor_bulk_in_run(
   80e5a:	4a0a      	ldr	r2, [pc, #40]	; (80e84 <ctrl_readmem_bulk+0x54>)
   80e5c:	6879      	ldr	r1, [r7, #4]
   80e5e:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   80e62:	4b09      	ldr	r3, [pc, #36]	; (80e88 <ctrl_readmem_bulk+0x58>)
   80e64:	4798      	blx	r3
        (uint8_t *) PSRAM_BASE_ADDRESS,
        buflen,
        main_vendor_bulk_in_received
        );
    FPGA_releaselock();
   80e66:	4b04      	ldr	r3, [pc, #16]	; (80e78 <ctrl_readmem_bulk+0x48>)
   80e68:	4798      	blx	r3
}
   80e6a:	bf00      	nop
   80e6c:	3708      	adds	r7, #8
   80e6e:	46bd      	mov	sp, r7
   80e70:	bd80      	pop	{r7, pc}
   80e72:	bf00      	nop
   80e74:	20001180 	.word	0x20001180
   80e78:	00081449 	.word	0x00081449
   80e7c:	00081409 	.word	0x00081409
   80e80:	00081479 	.word	0x00081479
   80e84:	00081311 	.word	0x00081311
   80e88:	00083c8d 	.word	0x00083c8d

00080e8c <ctrl_readmem_ctrl>:

void ctrl_readmem_ctrl(void){
   80e8c:	b580      	push	{r7, lr}
   80e8e:	b082      	sub	sp, #8
   80e90:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80e92:	4b0f      	ldr	r3, [pc, #60]	; (80ed0 <ctrl_readmem_ctrl+0x44>)
   80e94:	681b      	ldr	r3, [r3, #0]
   80e96:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80e98:	4b0d      	ldr	r3, [pc, #52]	; (80ed0 <ctrl_readmem_ctrl+0x44>)
   80e9a:	685b      	ldr	r3, [r3, #4]
   80e9c:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80e9e:	4b0d      	ldr	r3, [pc, #52]	; (80ed4 <ctrl_readmem_ctrl+0x48>)
   80ea0:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   80ea2:	bf00      	nop
   80ea4:	2005      	movs	r0, #5
   80ea6:	4b0c      	ldr	r3, [pc, #48]	; (80ed8 <ctrl_readmem_ctrl+0x4c>)
   80ea8:	4798      	blx	r3
   80eaa:	4603      	mov	r3, r0
   80eac:	2b00      	cmp	r3, #0
   80eae:	d0f9      	beq.n	80ea4 <ctrl_readmem_ctrl+0x18>

    /* Set address */
    FPGA_setaddr(address);
   80eb0:	6838      	ldr	r0, [r7, #0]
   80eb2:	4b0a      	ldr	r3, [pc, #40]	; (80edc <ctrl_readmem_ctrl+0x50>)
   80eb4:	4798      	blx	r3

    /* Do memory read */
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   80eb6:	4b0a      	ldr	r3, [pc, #40]	; (80ee0 <ctrl_readmem_ctrl+0x54>)
   80eb8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   80ebc:	601a      	str	r2, [r3, #0]

    /* Set size to read */
    ctrlmemread_size = buflen;
   80ebe:	4a09      	ldr	r2, [pc, #36]	; (80ee4 <ctrl_readmem_ctrl+0x58>)
   80ec0:	687b      	ldr	r3, [r7, #4]
   80ec2:	6013      	str	r3, [r2, #0]

    /* Start Transaction */
    FPGA_releaselock();
   80ec4:	4b03      	ldr	r3, [pc, #12]	; (80ed4 <ctrl_readmem_ctrl+0x48>)
   80ec6:	4798      	blx	r3
}
   80ec8:	bf00      	nop
   80eca:	3708      	adds	r7, #8
   80ecc:	46bd      	mov	sp, r7
   80ece:	bd80      	pop	{r7, pc}
   80ed0:	20001180 	.word	0x20001180
   80ed4:	00081449 	.word	0x00081449
   80ed8:	00081409 	.word	0x00081409
   80edc:	00081479 	.word	0x00081479
   80ee0:	200011c4 	.word	0x200011c4
   80ee4:	200011c8 	.word	0x200011c8

00080ee8 <ctrl_writemem_ctrl>:


void ctrl_writemem_ctrl(void){
   80ee8:	b580      	push	{r7, lr}
   80eea:	b084      	sub	sp, #16
   80eec:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80eee:	4b16      	ldr	r3, [pc, #88]	; (80f48 <ctrl_writemem_ctrl+0x60>)
   80ef0:	681b      	ldr	r3, [r3, #0]
   80ef2:	60bb      	str	r3, [r7, #8]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80ef4:	4b14      	ldr	r3, [pc, #80]	; (80f48 <ctrl_writemem_ctrl+0x60>)
   80ef6:	685b      	ldr	r3, [r3, #4]
   80ef8:	607b      	str	r3, [r7, #4]

    uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
   80efa:	4b14      	ldr	r3, [pc, #80]	; (80f4c <ctrl_writemem_ctrl+0x64>)
   80efc:	603b      	str	r3, [r7, #0]

    //printf("Writing to %x, %d\n", address, buflen);

    FPGA_releaselock();
   80efe:	4b14      	ldr	r3, [pc, #80]	; (80f50 <ctrl_writemem_ctrl+0x68>)
   80f00:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   80f02:	bf00      	nop
   80f04:	2001      	movs	r0, #1
   80f06:	4b13      	ldr	r3, [pc, #76]	; (80f54 <ctrl_writemem_ctrl+0x6c>)
   80f08:	4798      	blx	r3
   80f0a:	4603      	mov	r3, r0
   80f0c:	2b00      	cmp	r3, #0
   80f0e:	d0f9      	beq.n	80f04 <ctrl_writemem_ctrl+0x1c>

    /* Set address */
    FPGA_setaddr(address);
   80f10:	6878      	ldr	r0, [r7, #4]
   80f12:	4b11      	ldr	r3, [pc, #68]	; (80f58 <ctrl_writemem_ctrl+0x70>)
   80f14:	4798      	blx	r3

    /* Start Transaction */

    /* Do memory write */
    for(unsigned int i = 0; i < buflen; i++){
   80f16:	2300      	movs	r3, #0
   80f18:	60fb      	str	r3, [r7, #12]
   80f1a:	e00b      	b.n	80f34 <ctrl_writemem_ctrl+0x4c>
        xram[i] = ctrlbuf_payload[i];
   80f1c:	683a      	ldr	r2, [r7, #0]
   80f1e:	68fb      	ldr	r3, [r7, #12]
   80f20:	441a      	add	r2, r3
   80f22:	4b0e      	ldr	r3, [pc, #56]	; (80f5c <ctrl_writemem_ctrl+0x74>)
   80f24:	6819      	ldr	r1, [r3, #0]
   80f26:	68fb      	ldr	r3, [r7, #12]
   80f28:	440b      	add	r3, r1
   80f2a:	7812      	ldrb	r2, [r2, #0]
   80f2c:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < buflen; i++){
   80f2e:	68fb      	ldr	r3, [r7, #12]
   80f30:	3301      	adds	r3, #1
   80f32:	60fb      	str	r3, [r7, #12]
   80f34:	68fa      	ldr	r2, [r7, #12]
   80f36:	68bb      	ldr	r3, [r7, #8]
   80f38:	429a      	cmp	r2, r3
   80f3a:	d3ef      	bcc.n	80f1c <ctrl_writemem_ctrl+0x34>
    }

    FPGA_releaselock();
   80f3c:	4b04      	ldr	r3, [pc, #16]	; (80f50 <ctrl_writemem_ctrl+0x68>)
   80f3e:	4798      	blx	r3
}
   80f40:	bf00      	nop
   80f42:	3710      	adds	r7, #16
   80f44:	46bd      	mov	sp, r7
   80f46:	bd80      	pop	{r7, pc}
   80f48:	20001180 	.word	0x20001180
   80f4c:	20001188 	.word	0x20001188
   80f50:	00081449 	.word	0x00081449
   80f54:	00081409 	.word	0x00081409
   80f58:	00081479 	.word	0x00081479
   80f5c:	20000290 	.word	0x20000290

00080f60 <ctrl_writemem_bulk>:

static uint32_t bulkread_address = 0;
static uint32_t bulkread_len = 0;

void ctrl_writemem_bulk(void){
   80f60:	b580      	push	{r7, lr}
   80f62:	b082      	sub	sp, #8
   80f64:	af00      	add	r7, sp, #0
//uint32_t buflen = *(CTRLBUFFER_WORDPTR);
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80f66:	4b0a      	ldr	r3, [pc, #40]	; (80f90 <ctrl_writemem_bulk+0x30>)
   80f68:	685b      	ldr	r3, [r3, #4]
   80f6a:	607b      	str	r3, [r7, #4]

    // TODO: see block in
    FPGA_releaselock();
   80f6c:	4b09      	ldr	r3, [pc, #36]	; (80f94 <ctrl_writemem_bulk+0x34>)
   80f6e:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   80f70:	bf00      	nop
   80f72:	2004      	movs	r0, #4
   80f74:	4b08      	ldr	r3, [pc, #32]	; (80f98 <ctrl_writemem_bulk+0x38>)
   80f76:	4798      	blx	r3
   80f78:	4603      	mov	r3, r0
   80f7a:	2b00      	cmp	r3, #0
   80f7c:	d0f9      	beq.n	80f72 <ctrl_writemem_bulk+0x12>

    /* Set address */
    FPGA_setaddr(address);
   80f7e:	6878      	ldr	r0, [r7, #4]
   80f80:	4b06      	ldr	r3, [pc, #24]	; (80f9c <ctrl_writemem_bulk+0x3c>)
   80f82:	4798      	blx	r3

    /* Transaction done in generic callback */
    FPGA_releaselock();
   80f84:	4b03      	ldr	r3, [pc, #12]	; (80f94 <ctrl_writemem_bulk+0x34>)
   80f86:	4798      	blx	r3
}
   80f88:	bf00      	nop
   80f8a:	3708      	adds	r7, #8
   80f8c:	46bd      	mov	sp, r7
   80f8e:	bd80      	pop	{r7, pc}
   80f90:	20001180 	.word	0x20001180
   80f94:	00081449 	.word	0x00081449
   80f98:	00081409 	.word	0x00081409
   80f9c:	00081479 	.word	0x00081479

00080fa0 <ctrl_sam3ucfg_cb>:

static void ctrl_sam3ucfg_cb(void)
{
   80fa0:	b580      	push	{r7, lr}
   80fa2:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   80fa4:	4b18      	ldr	r3, [pc, #96]	; (81008 <ctrl_sam3ucfg_cb+0x68>)
   80fa6:	885b      	ldrh	r3, [r3, #2]
   80fa8:	b2db      	uxtb	r3, r3
   80faa:	2b02      	cmp	r3, #2
   80fac:	d00e      	beq.n	80fcc <ctrl_sam3ucfg_cb+0x2c>
   80fae:	2b03      	cmp	r3, #3
   80fb0:	d010      	beq.n	80fd4 <ctrl_sam3ucfg_cb+0x34>
   80fb2:	2b01      	cmp	r3, #1
   80fb4:	d000      	beq.n	80fb8 <ctrl_sam3ucfg_cb+0x18>
        /* Make the jump */
        break;

        /* Oh well, sucks to be you */
    default:
        break;
   80fb6:	e024      	b.n	81002 <ctrl_sam3ucfg_cb+0x62>
        osc_enable(OSC_MAINCK_XTAL);
   80fb8:	2006      	movs	r0, #6
   80fba:	4b14      	ldr	r3, [pc, #80]	; (8100c <ctrl_sam3ucfg_cb+0x6c>)
   80fbc:	4798      	blx	r3
        osc_wait_ready(OSC_MAINCK_XTAL);
   80fbe:	2006      	movs	r0, #6
   80fc0:	4b13      	ldr	r3, [pc, #76]	; (81010 <ctrl_sam3ucfg_cb+0x70>)
   80fc2:	4798      	blx	r3
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   80fc4:	2010      	movs	r0, #16
   80fc6:	4b13      	ldr	r3, [pc, #76]	; (81014 <ctrl_sam3ucfg_cb+0x74>)
   80fc8:	4798      	blx	r3
        break;
   80fca:	e01a      	b.n	81002 <ctrl_sam3ucfg_cb+0x62>
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80fcc:	2010      	movs	r0, #16
   80fce:	4b12      	ldr	r3, [pc, #72]	; (81018 <ctrl_sam3ucfg_cb+0x78>)
   80fd0:	4798      	blx	r3
        break;
   80fd2:	e016      	b.n	81002 <ctrl_sam3ucfg_cb+0x62>
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   80fd4:	2201      	movs	r2, #1
   80fd6:	210c      	movs	r1, #12
   80fd8:	4810      	ldr	r0, [pc, #64]	; (8101c <ctrl_sam3ucfg_cb+0x7c>)
   80fda:	4b11      	ldr	r3, [pc, #68]	; (81020 <ctrl_sam3ucfg_cb+0x80>)
   80fdc:	4798      	blx	r3
        udc_detach();
   80fde:	4b11      	ldr	r3, [pc, #68]	; (81024 <ctrl_sam3ucfg_cb+0x84>)
   80fe0:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   80fe2:	bf00      	nop
   80fe4:	4b10      	ldr	r3, [pc, #64]	; (81028 <ctrl_sam3ucfg_cb+0x88>)
   80fe6:	685b      	ldr	r3, [r3, #4]
   80fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80fec:	2b00      	cmp	r3, #0
   80fee:	d1f9      	bne.n	80fe4 <ctrl_sam3ucfg_cb+0x44>
        RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   80ff0:	4b0d      	ldr	r3, [pc, #52]	; (81028 <ctrl_sam3ucfg_cb+0x88>)
   80ff2:	681b      	ldr	r3, [r3, #0]
   80ff4:	4a0c      	ldr	r2, [pc, #48]	; (81028 <ctrl_sam3ucfg_cb+0x88>)
   80ff6:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80ffa:	f043 0305 	orr.w	r3, r3, #5
   80ffe:	6013      	str	r3, [r2, #0]
        while(1);
   81000:	e7fe      	b.n	81000 <ctrl_sam3ucfg_cb+0x60>
    }
}
   81002:	bf00      	nop
   81004:	bd80      	pop	{r7, pc}
   81006:	bf00      	nop
   81008:	20001320 	.word	0x20001320
   8100c:	00080c75 	.word	0x00080c75
   81010:	00080d7d 	.word	0x00080d7d
   81014:	00081e69 	.word	0x00081e69
   81018:	00081ee9 	.word	0x00081ee9
   8101c:	400e0800 	.word	0x400e0800
   81020:	000816d9 	.word	0x000816d9
   81024:	00080da9 	.word	0x00080da9
   81028:	400e1200 	.word	0x400e1200

0008102c <ctrl_progfpga_bulk>:

void ctrl_progfpga_bulk(void){
   8102c:	b580      	push	{r7, lr}
   8102e:	af00      	add	r7, sp, #0

    switch(udd_g_ctrlreq.req.wValue){
   81030:	4b0b      	ldr	r3, [pc, #44]	; (81060 <ctrl_progfpga_bulk+0x34>)
   81032:	885b      	ldrh	r3, [r3, #2]
   81034:	2ba1      	cmp	r3, #161	; 0xa1
   81036:	d007      	beq.n	81048 <ctrl_progfpga_bulk+0x1c>
   81038:	2ba2      	cmp	r3, #162	; 0xa2
   8103a:	d00b      	beq.n	81054 <ctrl_progfpga_bulk+0x28>
   8103c:	2ba0      	cmp	r3, #160	; 0xa0
   8103e:	d000      	beq.n	81042 <ctrl_progfpga_bulk+0x16>
        /* Done */
        blockendpoint_usage = bep_emem;
        break;

    default:
        break;
   81040:	e00c      	b.n	8105c <ctrl_progfpga_bulk+0x30>
        fpga_program_setup1();
   81042:	4b08      	ldr	r3, [pc, #32]	; (81064 <ctrl_progfpga_bulk+0x38>)
   81044:	4798      	blx	r3
        break;
   81046:	e009      	b.n	8105c <ctrl_progfpga_bulk+0x30>
        fpga_program_setup2();
   81048:	4b07      	ldr	r3, [pc, #28]	; (81068 <ctrl_progfpga_bulk+0x3c>)
   8104a:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   8104c:	4b07      	ldr	r3, [pc, #28]	; (8106c <ctrl_progfpga_bulk+0x40>)
   8104e:	220a      	movs	r2, #10
   81050:	701a      	strb	r2, [r3, #0]
        break;
   81052:	e003      	b.n	8105c <ctrl_progfpga_bulk+0x30>
        blockendpoint_usage = bep_emem;
   81054:	4b05      	ldr	r3, [pc, #20]	; (8106c <ctrl_progfpga_bulk+0x40>)
   81056:	2200      	movs	r2, #0
   81058:	701a      	strb	r2, [r3, #0]
        break;
   8105a:	bf00      	nop
    }
}
   8105c:	bf00      	nop
   8105e:	bd80      	pop	{r7, pc}
   81060:	20001320 	.word	0x20001320
   81064:	00081599 	.word	0x00081599
   81068:	00081619 	.word	0x00081619
   8106c:	200011c0 	.word	0x200011c0

00081070 <ctrl_change_pwr>:

void ctrl_change_pwr(void) {
   81070:	b480      	push	{r7}
   81072:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.wValue) {
   81074:	4b18      	ldr	r3, [pc, #96]	; (810d8 <ctrl_change_pwr+0x68>)
   81076:	885b      	ldrh	r3, [r3, #2]
   81078:	2b01      	cmp	r3, #1
   8107a:	d010      	beq.n	8109e <ctrl_change_pwr+0x2e>
   8107c:	2b02      	cmp	r3, #2
   8107e:	d01a      	beq.n	810b6 <ctrl_change_pwr+0x46>
   81080:	2b00      	cmp	r3, #0
   81082:	d000      	beq.n	81086 <ctrl_change_pwr+0x16>
        PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
        PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
        USB_PWR_STATE = 2;
        break;
    }
}
   81084:	e023      	b.n	810ce <ctrl_change_pwr+0x5e>
        PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   81086:	4b15      	ldr	r3, [pc, #84]	; (810dc <ctrl_change_pwr+0x6c>)
   81088:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8108c:	635a      	str	r2, [r3, #52]	; 0x34
        PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   8108e:	4b13      	ldr	r3, [pc, #76]	; (810dc <ctrl_change_pwr+0x6c>)
   81090:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   81094:	635a      	str	r2, [r3, #52]	; 0x34
        USB_PWR_STATE = 0;
   81096:	4b12      	ldr	r3, [pc, #72]	; (810e0 <ctrl_change_pwr+0x70>)
   81098:	2200      	movs	r2, #0
   8109a:	701a      	strb	r2, [r3, #0]
        break;
   8109c:	e017      	b.n	810ce <ctrl_change_pwr+0x5e>
        PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   8109e:	4b0f      	ldr	r3, [pc, #60]	; (810dc <ctrl_change_pwr+0x6c>)
   810a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   810a4:	635a      	str	r2, [r3, #52]	; 0x34
        PIOA->PIO_SODR = (1 << F_VB5V); //enable host power
   810a6:	4b0d      	ldr	r3, [pc, #52]	; (810dc <ctrl_change_pwr+0x6c>)
   810a8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   810ac:	631a      	str	r2, [r3, #48]	; 0x30
        USB_PWR_STATE = 1;
   810ae:	4b0c      	ldr	r3, [pc, #48]	; (810e0 <ctrl_change_pwr+0x70>)
   810b0:	2201      	movs	r2, #1
   810b2:	701a      	strb	r2, [r3, #0]
        break;
   810b4:	e00b      	b.n	810ce <ctrl_change_pwr+0x5e>
        PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   810b6:	4b09      	ldr	r3, [pc, #36]	; (810dc <ctrl_change_pwr+0x6c>)
   810b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   810bc:	635a      	str	r2, [r3, #52]	; 0x34
        PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
   810be:	4b07      	ldr	r3, [pc, #28]	; (810dc <ctrl_change_pwr+0x6c>)
   810c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   810c4:	631a      	str	r2, [r3, #48]	; 0x30
        USB_PWR_STATE = 2;
   810c6:	4b06      	ldr	r3, [pc, #24]	; (810e0 <ctrl_change_pwr+0x70>)
   810c8:	2202      	movs	r2, #2
   810ca:	701a      	strb	r2, [r3, #0]
        break;
   810cc:	bf00      	nop
}
   810ce:	bf00      	nop
   810d0:	46bd      	mov	sp, r7
   810d2:	bc80      	pop	{r7}
   810d4:	4770      	bx	lr
   810d6:	bf00      	nop
   810d8:	20001320 	.word	0x20001320
   810dc:	400e0c00 	.word	0x400e0c00
   810e0:	20000d7c 	.word	0x20000d7c

000810e4 <ctrl_fpga_reset>:

void ctrl_fpga_reset(void) {
   810e4:	b580      	push	{r7, lr}
   810e6:	af00      	add	r7, sp, #0
  gpio_set_pin_high(PIN_EBI_USB_SPARE0);
   810e8:	2026      	movs	r0, #38	; 0x26
   810ea:	4b03      	ldr	r3, [pc, #12]	; (810f8 <ctrl_fpga_reset+0x14>)
   810ec:	4798      	blx	r3
  gpio_set_pin_low(PIN_EBI_USB_SPARE0);
   810ee:	2026      	movs	r0, #38	; 0x26
   810f0:	4b02      	ldr	r3, [pc, #8]	; (810fc <ctrl_fpga_reset+0x18>)
   810f2:	4798      	blx	r3
}
   810f4:	bf00      	nop
   810f6:	bd80      	pop	{r7, pc}
   810f8:	00081b09 	.word	0x00081b09
   810fc:	00081b39 	.word	0x00081b39

00081100 <main_setup_out_received>:


bool main_setup_out_received(void)
{
   81100:	b580      	push	{r7, lr}
   81102:	af00      	add	r7, sp, #0
    //Add buffer if used
    udd_g_ctrlreq.payload = ctrlbuffer;
   81104:	4b46      	ldr	r3, [pc, #280]	; (81220 <main_setup_out_received+0x120>)
   81106:	4a47      	ldr	r2, [pc, #284]	; (81224 <main_setup_out_received+0x124>)
   81108:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   8110a:	4b45      	ldr	r3, [pc, #276]	; (81220 <main_setup_out_received+0x120>)
   8110c:	88db      	ldrh	r3, [r3, #6]
   8110e:	2b40      	cmp	r3, #64	; 0x40
   81110:	bf28      	it	cs
   81112:	2340      	movcs	r3, #64	; 0x40
   81114:	b29a      	uxth	r2, r3
   81116:	4b42      	ldr	r3, [pc, #264]	; (81220 <main_setup_out_received+0x120>)
   81118:	819a      	strh	r2, [r3, #12]

    blockendpoint_usage = bep_emem;
   8111a:	4b43      	ldr	r3, [pc, #268]	; (81228 <main_setup_out_received+0x128>)
   8111c:	2200      	movs	r2, #0
   8111e:	701a      	strb	r2, [r3, #0]
    static uint8_t  respbuf[128];
    switch(udd_g_ctrlreq.req.bRequest){
   81120:	4b3f      	ldr	r3, [pc, #252]	; (81220 <main_setup_out_received+0x120>)
   81122:	785b      	ldrb	r3, [r3, #1]
   81124:	3b10      	subs	r3, #16
   81126:	2b15      	cmp	r3, #21
   81128:	d86e      	bhi.n	81208 <main_setup_out_received+0x108>
   8112a:	a201      	add	r2, pc, #4	; (adr r2, 81130 <main_setup_out_received+0x30>)
   8112c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81130:	00081189 	.word	0x00081189
   81134:	000811b5 	.word	0x000811b5
   81138:	0008119f 	.word	0x0008119f
   8113c:	000811cb 	.word	0x000811cb
   81140:	00081209 	.word	0x00081209
   81144:	00081209 	.word	0x00081209
   81148:	000811e1 	.word	0x000811e1
   8114c:	00081209 	.word	0x00081209
   81150:	00081209 	.word	0x00081209
   81154:	00081209 	.word	0x00081209
   81158:	00081209 	.word	0x00081209
   8115c:	00081209 	.word	0x00081209
   81160:	00081209 	.word	0x00081209
   81164:	00081209 	.word	0x00081209
   81168:	00081209 	.word	0x00081209
   8116c:	00081209 	.word	0x00081209
   81170:	00081209 	.word	0x00081209
   81174:	00081209 	.word	0x00081209
   81178:	000811eb 	.word	0x000811eb
   8117c:	00081209 	.word	0x00081209
   81180:	000811f5 	.word	0x000811f5
   81184:	000811ff 	.word	0x000811ff
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   81188:	2006      	movs	r0, #6
   8118a:	4b28      	ldr	r3, [pc, #160]	; (8122c <main_setup_out_received+0x12c>)
   8118c:	4798      	blx	r3
   8118e:	4603      	mov	r3, r0
   81190:	2b00      	cmp	r3, #0
   81192:	d03b      	beq.n	8120c <main_setup_out_received+0x10c>
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   81194:	4b22      	ldr	r3, [pc, #136]	; (81220 <main_setup_out_received+0x120>)
   81196:	4a26      	ldr	r2, [pc, #152]	; (81230 <main_setup_out_received+0x130>)
   81198:	611a      	str	r2, [r3, #16]
            return true;
   8119a:	2301      	movs	r3, #1
   8119c:	e03e      	b.n	8121c <main_setup_out_received+0x11c>
        }
        break;
    case REQ_MEMREAD_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   8119e:	2006      	movs	r0, #6
   811a0:	4b22      	ldr	r3, [pc, #136]	; (8122c <main_setup_out_received+0x12c>)
   811a2:	4798      	blx	r3
   811a4:	4603      	mov	r3, r0
   811a6:	2b00      	cmp	r3, #0
   811a8:	d032      	beq.n	81210 <main_setup_out_received+0x110>
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   811aa:	4b1d      	ldr	r3, [pc, #116]	; (81220 <main_setup_out_received+0x120>)
   811ac:	4a21      	ldr	r2, [pc, #132]	; (81234 <main_setup_out_received+0x134>)
   811ae:	611a      	str	r2, [r3, #16]
            return true;
   811b0:	2301      	movs	r3, #1
   811b2:	e033      	b.n	8121c <main_setup_out_received+0x11c>
        break;


        /* Memory Write */
    case REQ_MEMWRITE_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   811b4:	2006      	movs	r0, #6
   811b6:	4b1d      	ldr	r3, [pc, #116]	; (8122c <main_setup_out_received+0x12c>)
   811b8:	4798      	blx	r3
   811ba:	4603      	mov	r3, r0
   811bc:	2b00      	cmp	r3, #0
   811be:	d029      	beq.n	81214 <main_setup_out_received+0x114>
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   811c0:	4b17      	ldr	r3, [pc, #92]	; (81220 <main_setup_out_received+0x120>)
   811c2:	4a1d      	ldr	r2, [pc, #116]	; (81238 <main_setup_out_received+0x138>)
   811c4:	611a      	str	r2, [r3, #16]
            return true;
   811c6:	2301      	movs	r3, #1
   811c8:	e028      	b.n	8121c <main_setup_out_received+0x11c>
        }
        break;


    case REQ_MEMWRITE_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   811ca:	2006      	movs	r0, #6
   811cc:	4b17      	ldr	r3, [pc, #92]	; (8122c <main_setup_out_received+0x12c>)
   811ce:	4798      	blx	r3
   811d0:	4603      	mov	r3, r0
   811d2:	2b00      	cmp	r3, #0
   811d4:	d020      	beq.n	81218 <main_setup_out_received+0x118>
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   811d6:	4b12      	ldr	r3, [pc, #72]	; (81220 <main_setup_out_received+0x120>)
   811d8:	4a18      	ldr	r2, [pc, #96]	; (8123c <main_setup_out_received+0x13c>)
   811da:	611a      	str	r2, [r3, #16]
            return true;
   811dc:	2301      	movs	r3, #1
   811de:	e01d      	b.n	8121c <main_setup_out_received+0x11c>
        }
        break;

    case REQ_FPGA_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   811e0:	4b0f      	ldr	r3, [pc, #60]	; (81220 <main_setup_out_received+0x120>)
   811e2:	4a17      	ldr	r2, [pc, #92]	; (81240 <main_setup_out_received+0x140>)
   811e4:	611a      	str	r2, [r3, #16]
        return true;
   811e6:	2301      	movs	r3, #1
   811e8:	e018      	b.n	8121c <main_setup_out_received+0x11c>

    case REQ_SAM3U_CFG:
        udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
   811ea:	4b0d      	ldr	r3, [pc, #52]	; (81220 <main_setup_out_received+0x120>)
   811ec:	4a15      	ldr	r2, [pc, #84]	; (81244 <main_setup_out_received+0x144>)
   811ee:	611a      	str	r2, [r3, #16]
        return true;
   811f0:	2301      	movs	r3, #1
   811f2:	e013      	b.n	8121c <main_setup_out_received+0x11c>

    case REQ_CHANGE_PWR:
        //TODO
        udd_g_ctrlreq.callback = ctrl_change_pwr;
   811f4:	4b0a      	ldr	r3, [pc, #40]	; (81220 <main_setup_out_received+0x120>)
   811f6:	4a14      	ldr	r2, [pc, #80]	; (81248 <main_setup_out_received+0x148>)
   811f8:	611a      	str	r2, [r3, #16]
        return true;
   811fa:	2301      	movs	r3, #1
   811fc:	e00e      	b.n	8121c <main_setup_out_received+0x11c>

    case REQ_FPGA_RESET:
        udd_g_ctrlreq.callback = ctrl_fpga_reset;
   811fe:	4b08      	ldr	r3, [pc, #32]	; (81220 <main_setup_out_received+0x120>)
   81200:	4a12      	ldr	r2, [pc, #72]	; (8124c <main_setup_out_received+0x14c>)
   81202:	611a      	str	r2, [r3, #16]
        return true;
   81204:	2301      	movs	r3, #1
   81206:	e009      	b.n	8121c <main_setup_out_received+0x11c>

    default:
        return false;
   81208:	2300      	movs	r3, #0
   8120a:	e007      	b.n	8121c <main_setup_out_received+0x11c>
        break;
   8120c:	bf00      	nop
   8120e:	e004      	b.n	8121a <main_setup_out_received+0x11a>
        break;
   81210:	bf00      	nop
   81212:	e002      	b.n	8121a <main_setup_out_received+0x11a>
        break;
   81214:	bf00      	nop
   81216:	e000      	b.n	8121a <main_setup_out_received+0x11a>
        break;
   81218:	bf00      	nop
    }

    return false;
   8121a:	2300      	movs	r3, #0
}
   8121c:	4618      	mov	r0, r3
   8121e:	bd80      	pop	{r7, pc}
   81220:	20001320 	.word	0x20001320
   81224:	20001180 	.word	0x20001180
   81228:	200011c0 	.word	0x200011c0
   8122c:	00081409 	.word	0x00081409
   81230:	00080e31 	.word	0x00080e31
   81234:	00080e8d 	.word	0x00080e8d
   81238:	00080f61 	.word	0x00080f61
   8123c:	00080ee9 	.word	0x00080ee9
   81240:	0008102d 	.word	0x0008102d
   81244:	00080fa1 	.word	0x00080fa1
   81248:	00081071 	.word	0x00081071
   8124c:	000810e5 	.word	0x000810e5

00081250 <main_setup_in_received>:
  && (udd_g_ctrlreq.req.bRequest == 0)
  && (0 != udd_g_ctrlreq.req.wLength)
*/

bool main_setup_in_received(void)
{
   81250:	b580      	push	{r7, lr}
   81252:	af00      	add	r7, sp, #0
    */

    static uint8_t  respbuf[64];
    unsigned int cnt;

    switch(udd_g_ctrlreq.req.bRequest){
   81254:	4b27      	ldr	r3, [pc, #156]	; (812f4 <main_setup_in_received+0xa4>)
   81256:	785b      	ldrb	r3, [r3, #1]
   81258:	2b15      	cmp	r3, #21
   8125a:	d02a      	beq.n	812b2 <main_setup_in_received+0x62>
   8125c:	2b17      	cmp	r3, #23
   8125e:	d017      	beq.n	81290 <main_setup_in_received+0x40>
   81260:	2b12      	cmp	r3, #18
   81262:	d143      	bne.n	812ec <main_setup_in_received+0x9c>
    case REQ_MEMREAD_CTRL:
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   81264:	4b24      	ldr	r3, [pc, #144]	; (812f8 <main_setup_in_received+0xa8>)
   81266:	681b      	ldr	r3, [r3, #0]
   81268:	4a22      	ldr	r2, [pc, #136]	; (812f4 <main_setup_in_received+0xa4>)
   8126a:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   8126c:	4b23      	ldr	r3, [pc, #140]	; (812fc <main_setup_in_received+0xac>)
   8126e:	681b      	ldr	r3, [r3, #0]
   81270:	b29a      	uxth	r2, r3
   81272:	4b20      	ldr	r3, [pc, #128]	; (812f4 <main_setup_in_received+0xa4>)
   81274:	819a      	strh	r2, [r3, #12]
        ctrlmemread_size = 0;
   81276:	4b21      	ldr	r3, [pc, #132]	; (812fc <main_setup_in_received+0xac>)
   81278:	2200      	movs	r2, #0
   8127a:	601a      	str	r2, [r3, #0]

        if (FPGA_lockstatus() == fpga_ctrlmem){
   8127c:	4b20      	ldr	r3, [pc, #128]	; (81300 <main_setup_in_received+0xb0>)
   8127e:	4798      	blx	r3
   81280:	4603      	mov	r3, r0
   81282:	2b05      	cmp	r3, #5
   81284:	d102      	bne.n	8128c <main_setup_in_received+0x3c>
            FPGA_setlock(fpga_unlocked);
   81286:	2000      	movs	r0, #0
   81288:	4b1e      	ldr	r3, [pc, #120]	; (81304 <main_setup_in_received+0xb4>)
   8128a:	4798      	blx	r3
        }

        return true;
   8128c:	2301      	movs	r3, #1
   8128e:	e02e      	b.n	812ee <main_setup_in_received+0x9e>
        break;

    case REQ_FW_VERSION:
        respbuf[0] = FW_VER_MAJOR;
   81290:	4b1d      	ldr	r3, [pc, #116]	; (81308 <main_setup_in_received+0xb8>)
   81292:	2200      	movs	r2, #0
   81294:	701a      	strb	r2, [r3, #0]
        respbuf[1] = FW_VER_MINOR;
   81296:	4b1c      	ldr	r3, [pc, #112]	; (81308 <main_setup_in_received+0xb8>)
   81298:	220a      	movs	r2, #10
   8129a:	705a      	strb	r2, [r3, #1]
        respbuf[2] = FW_VER_DEBUG;
   8129c:	4b1a      	ldr	r3, [pc, #104]	; (81308 <main_setup_in_received+0xb8>)
   8129e:	2200      	movs	r2, #0
   812a0:	709a      	strb	r2, [r3, #2]
        udd_g_ctrlreq.payload = respbuf;
   812a2:	4b14      	ldr	r3, [pc, #80]	; (812f4 <main_setup_in_received+0xa4>)
   812a4:	4a18      	ldr	r2, [pc, #96]	; (81308 <main_setup_in_received+0xb8>)
   812a6:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 3;
   812a8:	4b12      	ldr	r3, [pc, #72]	; (812f4 <main_setup_in_received+0xa4>)
   812aa:	2203      	movs	r2, #3
   812ac:	819a      	strh	r2, [r3, #12]
        return true;
   812ae:	2301      	movs	r3, #1
   812b0:	e01d      	b.n	812ee <main_setup_in_received+0x9e>
        break;

    case REQ_FPGA_STATUS:
        respbuf[0] = FPGA_ISDONE();
   812b2:	2013      	movs	r0, #19
   812b4:	4b15      	ldr	r3, [pc, #84]	; (8130c <main_setup_in_received+0xbc>)
   812b6:	4798      	blx	r3
   812b8:	4603      	mov	r3, r0
   812ba:	2b00      	cmp	r3, #0
   812bc:	bf14      	ite	ne
   812be:	2301      	movne	r3, #1
   812c0:	2300      	moveq	r3, #0
   812c2:	b2db      	uxtb	r3, r3
   812c4:	461a      	mov	r2, r3
   812c6:	4b10      	ldr	r3, [pc, #64]	; (81308 <main_setup_in_received+0xb8>)
   812c8:	701a      	strb	r2, [r3, #0]
        respbuf[1] = 0;
   812ca:	4b0f      	ldr	r3, [pc, #60]	; (81308 <main_setup_in_received+0xb8>)
   812cc:	2200      	movs	r2, #0
   812ce:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   812d0:	4b0d      	ldr	r3, [pc, #52]	; (81308 <main_setup_in_received+0xb8>)
   812d2:	2200      	movs	r2, #0
   812d4:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   812d6:	4b0c      	ldr	r3, [pc, #48]	; (81308 <main_setup_in_received+0xb8>)
   812d8:	2200      	movs	r2, #0
   812da:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   812dc:	4b05      	ldr	r3, [pc, #20]	; (812f4 <main_setup_in_received+0xa4>)
   812de:	4a0a      	ldr	r2, [pc, #40]	; (81308 <main_setup_in_received+0xb8>)
   812e0:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 4;
   812e2:	4b04      	ldr	r3, [pc, #16]	; (812f4 <main_setup_in_received+0xa4>)
   812e4:	2204      	movs	r2, #4
   812e6:	819a      	strh	r2, [r3, #12]
        return true;
   812e8:	2301      	movs	r3, #1
   812ea:	e000      	b.n	812ee <main_setup_in_received+0x9e>
        break;
    default:
        return false;
   812ec:	2300      	movs	r3, #0
    }
    return false;
}
   812ee:	4618      	mov	r0, r3
   812f0:	bd80      	pop	{r7, pc}
   812f2:	bf00      	nop
   812f4:	20001320 	.word	0x20001320
   812f8:	200011c4 	.word	0x200011c4
   812fc:	200011c8 	.word	0x200011c8
   81300:	00081461 	.word	0x00081461
   81304:	00081409 	.word	0x00081409
   81308:	200011cc 	.word	0x200011cc
   8130c:	00081ad9 	.word	0x00081ad9

00081310 <main_vendor_bulk_in_received>:

void main_vendor_bulk_in_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
   81310:	b580      	push	{r7, lr}
   81312:	b082      	sub	sp, #8
   81314:	af00      	add	r7, sp, #0
   81316:	4603      	mov	r3, r0
   81318:	6039      	str	r1, [r7, #0]
   8131a:	71fb      	strb	r3, [r7, #7]
   8131c:	4613      	mov	r3, r2
   8131e:	71bb      	strb	r3, [r7, #6]
    UNUSED(nb_transfered);
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   81320:	79fb      	ldrb	r3, [r7, #7]
   81322:	2b00      	cmp	r3, #0
   81324:	d108      	bne.n	81338 <main_vendor_bulk_in_received+0x28>
        return; // Transfer aborted/error
    }

    if (FPGA_lockstatus() == fpga_blockin){
   81326:	4b06      	ldr	r3, [pc, #24]	; (81340 <main_vendor_bulk_in_received+0x30>)
   81328:	4798      	blx	r3
   8132a:	4603      	mov	r3, r0
   8132c:	2b02      	cmp	r3, #2
   8132e:	d104      	bne.n	8133a <main_vendor_bulk_in_received+0x2a>
        FPGA_setlock(fpga_unlocked);
   81330:	2000      	movs	r0, #0
   81332:	4b04      	ldr	r3, [pc, #16]	; (81344 <main_vendor_bulk_in_received+0x34>)
   81334:	4798      	blx	r3
   81336:	e000      	b.n	8133a <main_vendor_bulk_in_received+0x2a>
        return; // Transfer aborted/error
   81338:	bf00      	nop
    }
}
   8133a:	3708      	adds	r7, #8
   8133c:	46bd      	mov	sp, r7
   8133e:	bd80      	pop	{r7, pc}
   81340:	00081461 	.word	0x00081461
   81344:	00081409 	.word	0x00081409

00081348 <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep)
{
   81348:	b580      	push	{r7, lr}
   8134a:	b084      	sub	sp, #16
   8134c:	af00      	add	r7, sp, #0
   8134e:	4603      	mov	r3, r0
   81350:	6039      	str	r1, [r7, #0]
   81352:	71fb      	strb	r3, [r7, #7]
   81354:	4613      	mov	r3, r2
   81356:	71bb      	strb	r3, [r7, #6]
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   81358:	79fb      	ldrb	r3, [r7, #7]
   8135a:	2b00      	cmp	r3, #0
   8135c:	d006      	beq.n	8136c <main_vendor_bulk_out_received+0x24>
        // Transfer aborted

        //restart
        udi_vendor_bulk_out_run(
   8135e:	4a22      	ldr	r2, [pc, #136]	; (813e8 <main_vendor_bulk_out_received+0xa0>)
   81360:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81364:	4821      	ldr	r0, [pc, #132]	; (813ec <main_vendor_bulk_out_received+0xa4>)
   81366:	4b22      	ldr	r3, [pc, #136]	; (813f0 <main_vendor_bulk_out_received+0xa8>)
   81368:	4798      	blx	r3
            main_buf_loopback,
            sizeof(main_buf_loopback),
            main_vendor_bulk_out_received);

        return;
   8136a:	e039      	b.n	813e0 <main_vendor_bulk_out_received+0x98>
    }

    if (blockendpoint_usage == bep_emem){
   8136c:	4b21      	ldr	r3, [pc, #132]	; (813f4 <main_vendor_bulk_out_received+0xac>)
   8136e:	781b      	ldrb	r3, [r3, #0]
   81370:	2b00      	cmp	r3, #0
   81372:	d11a      	bne.n	813aa <main_vendor_bulk_out_received+0x62>
        for(unsigned int i = 0; i < nb_transfered; i++){
   81374:	2300      	movs	r3, #0
   81376:	60fb      	str	r3, [r7, #12]
   81378:	e00b      	b.n	81392 <main_vendor_bulk_out_received+0x4a>
            xram[i] = main_buf_loopback[i];
   8137a:	4b1f      	ldr	r3, [pc, #124]	; (813f8 <main_vendor_bulk_out_received+0xb0>)
   8137c:	681a      	ldr	r2, [r3, #0]
   8137e:	68fb      	ldr	r3, [r7, #12]
   81380:	4413      	add	r3, r2
   81382:	491a      	ldr	r1, [pc, #104]	; (813ec <main_vendor_bulk_out_received+0xa4>)
   81384:	68fa      	ldr	r2, [r7, #12]
   81386:	440a      	add	r2, r1
   81388:	7812      	ldrb	r2, [r2, #0]
   8138a:	701a      	strb	r2, [r3, #0]
        for(unsigned int i = 0; i < nb_transfered; i++){
   8138c:	68fb      	ldr	r3, [r7, #12]
   8138e:	3301      	adds	r3, #1
   81390:	60fb      	str	r3, [r7, #12]
   81392:	68fa      	ldr	r2, [r7, #12]
   81394:	683b      	ldr	r3, [r7, #0]
   81396:	429a      	cmp	r2, r3
   81398:	d3ef      	bcc.n	8137a <main_vendor_bulk_out_received+0x32>
        }

        if (FPGA_lockstatus() == fpga_blockout){
   8139a:	4b18      	ldr	r3, [pc, #96]	; (813fc <main_vendor_bulk_out_received+0xb4>)
   8139c:	4798      	blx	r3
   8139e:	4603      	mov	r3, r0
   813a0:	2b04      	cmp	r3, #4
   813a2:	d117      	bne.n	813d4 <main_vendor_bulk_out_received+0x8c>
            FPGA_releaselock();
   813a4:	4b16      	ldr	r3, [pc, #88]	; (81400 <main_vendor_bulk_out_received+0xb8>)
   813a6:	4798      	blx	r3
   813a8:	e014      	b.n	813d4 <main_vendor_bulk_out_received+0x8c>
        }
    } else if (blockendpoint_usage == bep_fpgabitstream){
   813aa:	4b12      	ldr	r3, [pc, #72]	; (813f4 <main_vendor_bulk_out_received+0xac>)
   813ac:	781b      	ldrb	r3, [r3, #0]
   813ae:	2b0a      	cmp	r3, #10
   813b0:	d110      	bne.n	813d4 <main_vendor_bulk_out_received+0x8c>

        /* Send byte to FPGA - this could eventually be done via SPI */
        // TODO: is this dangerous?
        for(unsigned int i = 0; i < nb_transfered; i++){
   813b2:	2300      	movs	r3, #0
   813b4:	60bb      	str	r3, [r7, #8]
   813b6:	e009      	b.n	813cc <main_vendor_bulk_out_received+0x84>
            fpga_program_sendbyte(main_buf_loopback[i]);
   813b8:	4a0c      	ldr	r2, [pc, #48]	; (813ec <main_vendor_bulk_out_received+0xa4>)
   813ba:	68bb      	ldr	r3, [r7, #8]
   813bc:	4413      	add	r3, r2
   813be:	781b      	ldrb	r3, [r3, #0]
   813c0:	4618      	mov	r0, r3
   813c2:	4b10      	ldr	r3, [pc, #64]	; (81404 <main_vendor_bulk_out_received+0xbc>)
   813c4:	4798      	blx	r3
        for(unsigned int i = 0; i < nb_transfered; i++){
   813c6:	68bb      	ldr	r3, [r7, #8]
   813c8:	3301      	adds	r3, #1
   813ca:	60bb      	str	r3, [r7, #8]
   813cc:	68ba      	ldr	r2, [r7, #8]
   813ce:	683b      	ldr	r3, [r7, #0]
   813d0:	429a      	cmp	r2, r3
   813d2:	d3f1      	bcc.n	813b8 <main_vendor_bulk_out_received+0x70>
#endif
    }

    //printf("BULKOUT: %d bytes\n", (int)nb_transfered);

    udi_vendor_bulk_out_run(
   813d4:	4a04      	ldr	r2, [pc, #16]	; (813e8 <main_vendor_bulk_out_received+0xa0>)
   813d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   813da:	4804      	ldr	r0, [pc, #16]	; (813ec <main_vendor_bulk_out_received+0xa4>)
   813dc:	4b04      	ldr	r3, [pc, #16]	; (813f0 <main_vendor_bulk_out_received+0xa8>)
   813de:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
}
   813e0:	3710      	adds	r7, #16
   813e2:	46bd      	mov	sp, r7
   813e4:	bd80      	pop	{r7, pc}
   813e6:	bf00      	nop
   813e8:	00081349 	.word	0x00081349
   813ec:	20000d80 	.word	0x20000d80
   813f0:	00083cb9 	.word	0x00083cb9
   813f4:	200011c0 	.word	0x200011c0
   813f8:	20000290 	.word	0x20000290
   813fc:	00081461 	.word	0x00081461
   81400:	00081449 	.word	0x00081449
   81404:	0008162d 	.word	0x0008162d

00081408 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   81408:	b580      	push	{r7, lr}
   8140a:	b084      	sub	sp, #16
   8140c:	af00      	add	r7, sp, #0
   8140e:	4603      	mov	r3, r0
   81410:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
   81412:	2300      	movs	r3, #0
   81414:	60fb      	str	r3, [r7, #12]
  cpu_irq_enter_critical();
   81416:	4b09      	ldr	r3, [pc, #36]	; (8143c <FPGA_setlock+0x34>)
   81418:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   8141a:	4b09      	ldr	r3, [pc, #36]	; (81440 <FPGA_setlock+0x38>)
   8141c:	781b      	ldrb	r3, [r3, #0]
   8141e:	b2db      	uxtb	r3, r3
   81420:	2b00      	cmp	r3, #0
   81422:	d104      	bne.n	8142e <FPGA_setlock+0x26>
  {
    ret = 1;
   81424:	2301      	movs	r3, #1
   81426:	60fb      	str	r3, [r7, #12]
    _fpga_locked = lockstatus;
   81428:	4a05      	ldr	r2, [pc, #20]	; (81440 <FPGA_setlock+0x38>)
   8142a:	79fb      	ldrb	r3, [r7, #7]
   8142c:	7013      	strb	r3, [r2, #0]
  }
  cpu_irq_leave_critical();
   8142e:	4b05      	ldr	r3, [pc, #20]	; (81444 <FPGA_setlock+0x3c>)
   81430:	4798      	blx	r3
  return ret;
   81432:	68fb      	ldr	r3, [r7, #12]
}
   81434:	4618      	mov	r0, r3
   81436:	3710      	adds	r7, #16
   81438:	46bd      	mov	sp, r7
   8143a:	bd80      	pop	{r7, pc}
   8143c:	00081855 	.word	0x00081855
   81440:	2000120c 	.word	0x2000120c
   81444:	000818a9 	.word	0x000818a9

00081448 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
   81448:	b480      	push	{r7}
   8144a:	af00      	add	r7, sp, #0
  _fpga_locked = fpga_unlocked;
   8144c:	4b03      	ldr	r3, [pc, #12]	; (8145c <FPGA_releaselock+0x14>)
   8144e:	2200      	movs	r2, #0
   81450:	701a      	strb	r2, [r3, #0]
}
   81452:	bf00      	nop
   81454:	46bd      	mov	sp, r7
   81456:	bc80      	pop	{r7}
   81458:	4770      	bx	lr
   8145a:	bf00      	nop
   8145c:	2000120c 	.word	0x2000120c

00081460 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
   81460:	b480      	push	{r7}
   81462:	af00      	add	r7, sp, #0
  return _fpga_locked;
   81464:	4b03      	ldr	r3, [pc, #12]	; (81474 <FPGA_lockstatus+0x14>)
   81466:	781b      	ldrb	r3, [r3, #0]
   81468:	b2db      	uxtb	r3, r3
}
   8146a:	4618      	mov	r0, r3
   8146c:	46bd      	mov	sp, r7
   8146e:	bc80      	pop	{r7}
   81470:	4770      	bx	lr
   81472:	bf00      	nop
   81474:	2000120c 	.word	0x2000120c

00081478 <FPGA_setaddr>:
  FPGA_releaselock();
  cpu_irq_leave_critical();
}

void FPGA_setaddr(uint32_t addr)
{
   81478:	b580      	push	{r7, lr}
   8147a:	b082      	sub	sp, #8
   8147c:	af00      	add	r7, sp, #0
   8147e:	6078      	str	r0, [r7, #4]
  FPGA_ADDR_PORT->PIO_ODSR = (FPGA_ADDR_PORT->PIO_ODSR & 0x40) | (addr & 0x3F) | ((addr & 0xC0) << 1);
   81480:	4b0c      	ldr	r3, [pc, #48]	; (814b4 <FPGA_setaddr+0x3c>)
   81482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   81484:	f003 0240 	and.w	r2, r3, #64	; 0x40
   81488:	687b      	ldr	r3, [r7, #4]
   8148a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   8148e:	431a      	orrs	r2, r3
   81490:	687b      	ldr	r3, [r7, #4]
   81492:	005b      	lsls	r3, r3, #1
   81494:	f403 73c0 	and.w	r3, r3, #384	; 0x180
   81498:	4906      	ldr	r1, [pc, #24]	; (814b4 <FPGA_setaddr+0x3c>)
   8149a:	4313      	orrs	r3, r2
   8149c:	638b      	str	r3, [r1, #56]	; 0x38
  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
   8149e:	2031      	movs	r0, #49	; 0x31
   814a0:	4b05      	ldr	r3, [pc, #20]	; (814b8 <FPGA_setaddr+0x40>)
   814a2:	4798      	blx	r3
  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
   814a4:	2031      	movs	r0, #49	; 0x31
   814a6:	4b05      	ldr	r3, [pc, #20]	; (814bc <FPGA_setaddr+0x44>)
   814a8:	4798      	blx	r3
}
   814aa:	bf00      	nop
   814ac:	3708      	adds	r7, #8
   814ae:	46bd      	mov	sp, r7
   814b0:	bd80      	pop	{r7, pc}
   814b2:	bf00      	nop
   814b4:	400e0e00 	.word	0x400e0e00
   814b8:	00081b39 	.word	0x00081b39
   814bc:	00081b09 	.word	0x00081b09

000814c0 <osc_get_rate>:
{
   814c0:	b480      	push	{r7}
   814c2:	b083      	sub	sp, #12
   814c4:	af00      	add	r7, sp, #0
   814c6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   814c8:	687b      	ldr	r3, [r7, #4]
   814ca:	2b07      	cmp	r3, #7
   814cc:	d823      	bhi.n	81516 <osc_get_rate+0x56>
   814ce:	a201      	add	r2, pc, #4	; (adr r2, 814d4 <osc_get_rate+0x14>)
   814d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   814d4:	000814f5 	.word	0x000814f5
   814d8:	000814fb 	.word	0x000814fb
   814dc:	000814ff 	.word	0x000814ff
   814e0:	00081503 	.word	0x00081503
   814e4:	00081507 	.word	0x00081507
   814e8:	0008150b 	.word	0x0008150b
   814ec:	0008150f 	.word	0x0008150f
   814f0:	00081513 	.word	0x00081513
		return OSC_SLCK_32K_RC_HZ;
   814f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   814f8:	e00e      	b.n	81518 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   814fa:	2300      	movs	r3, #0
   814fc:	e00c      	b.n	81518 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   814fe:	2300      	movs	r3, #0
   81500:	e00a      	b.n	81518 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   81502:	4b08      	ldr	r3, [pc, #32]	; (81524 <osc_get_rate+0x64>)
   81504:	e008      	b.n	81518 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   81506:	4b08      	ldr	r3, [pc, #32]	; (81528 <osc_get_rate+0x68>)
   81508:	e006      	b.n	81518 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   8150a:	4b08      	ldr	r3, [pc, #32]	; (8152c <osc_get_rate+0x6c>)
   8150c:	e004      	b.n	81518 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   8150e:	4b07      	ldr	r3, [pc, #28]	; (8152c <osc_get_rate+0x6c>)
   81510:	e002      	b.n	81518 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   81512:	4b06      	ldr	r3, [pc, #24]	; (8152c <osc_get_rate+0x6c>)
   81514:	e000      	b.n	81518 <osc_get_rate+0x58>
	return 0;
   81516:	2300      	movs	r3, #0
}
   81518:	4618      	mov	r0, r3
   8151a:	370c      	adds	r7, #12
   8151c:	46bd      	mov	sp, r7
   8151e:	bc80      	pop	{r7}
   81520:	4770      	bx	lr
   81522:	bf00      	nop
   81524:	003d0900 	.word	0x003d0900
   81528:	007a1200 	.word	0x007a1200
   8152c:	00b71b00 	.word	0x00b71b00

00081530 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81530:	b580      	push	{r7, lr}
   81532:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   81534:	2006      	movs	r0, #6
   81536:	4b03      	ldr	r3, [pc, #12]	; (81544 <sysclk_get_main_hz+0x14>)
   81538:	4798      	blx	r3
   8153a:	4603      	mov	r3, r0
   8153c:	011b      	lsls	r3, r3, #4
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   8153e:	4618      	mov	r0, r3
   81540:	bd80      	pop	{r7, pc}
   81542:	bf00      	nop
   81544:	000814c1 	.word	0x000814c1

00081548 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   81548:	b580      	push	{r7, lr}
   8154a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   8154c:	4b02      	ldr	r3, [pc, #8]	; (81558 <sysclk_get_cpu_hz+0x10>)
   8154e:	4798      	blx	r3
   81550:	4603      	mov	r3, r0
   81552:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   81554:	4618      	mov	r0, r3
   81556:	bd80      	pop	{r7, pc}
   81558:	00081531 	.word	0x00081531

0008155c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   8155c:	b580      	push	{r7, lr}
   8155e:	b082      	sub	sp, #8
   81560:	af00      	add	r7, sp, #0
   81562:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81564:	6878      	ldr	r0, [r7, #4]
   81566:	4b03      	ldr	r3, [pc, #12]	; (81574 <sysclk_enable_peripheral_clock+0x18>)
   81568:	4798      	blx	r3
}
   8156a:	bf00      	nop
   8156c:	3708      	adds	r7, #8
   8156e:	46bd      	mov	sp, r7
   81570:	bd80      	pop	{r7, pc}
   81572:	bf00      	nop
   81574:	000821b5 	.word	0x000821b5

00081578 <fpga_program_init>:
#include "fpga_program.h"
#include "spi.h"

/* FPGA Programming: Init pins, set to standby state */
void fpga_program_init(void)
{
   81578:	b580      	push	{r7, lr}
   8157a:	af00      	add	r7, sp, #0
    FPGA_NPROG_SETUP();
   8157c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81580:	2014      	movs	r0, #20
   81582:	4b03      	ldr	r3, [pc, #12]	; (81590 <fpga_program_init+0x18>)
   81584:	4798      	blx	r3
    FPGA_NPROG_HIGH();
   81586:	2014      	movs	r0, #20
   81588:	4b02      	ldr	r3, [pc, #8]	; (81594 <fpga_program_init+0x1c>)
   8158a:	4798      	blx	r3
}
   8158c:	bf00      	nop
   8158e:	bd80      	pop	{r7, pc}
   81590:	00081b69 	.word	0x00081b69
   81594:	00081b09 	.word	0x00081b09

00081598 <fpga_program_setup1>:

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   81598:	b580      	push	{r7, lr}
   8159a:	b084      	sub	sp, #16
   8159c:	af00      	add	r7, sp, #0
    /* Init - set program low to erase FPGA */
    FPGA_NPROG_LOW();
   8159e:	2014      	movs	r0, #20
   815a0:	4b14      	ldr	r3, [pc, #80]	; (815f4 <fpga_program_setup1+0x5c>)
   815a2:	4798      	blx	r3

    usart_spi_opt_t spiopts;
    spiopts.baudrate = 10000000UL;
   815a4:	4b14      	ldr	r3, [pc, #80]	; (815f8 <fpga_program_setup1+0x60>)
   815a6:	603b      	str	r3, [r7, #0]
    spiopts.char_length = US_MR_CHRL_8_BIT;
   815a8:	23c0      	movs	r3, #192	; 0xc0
   815aa:	607b      	str	r3, [r7, #4]
    spiopts.channel_mode = US_MR_CHMODE_NORMAL;
   815ac:	2300      	movs	r3, #0
   815ae:	60fb      	str	r3, [r7, #12]
    spiopts.spi_mode = SPI_MODE_0;
   815b0:	2300      	movs	r3, #0
   815b2:	60bb      	str	r3, [r7, #8]

    sysclk_enable_peripheral_clock(FPGA_PROG_USART_ID);
   815b4:	200d      	movs	r0, #13
   815b6:	4b11      	ldr	r3, [pc, #68]	; (815fc <fpga_program_setup1+0x64>)
   815b8:	4798      	blx	r3
    usart_init_spi_master(FPGA_PROG_USART, &spiopts, sysclk_get_cpu_hz());
   815ba:	4b11      	ldr	r3, [pc, #68]	; (81600 <fpga_program_setup1+0x68>)
   815bc:	4798      	blx	r3
   815be:	4602      	mov	r2, r0
   815c0:	463b      	mov	r3, r7
   815c2:	4619      	mov	r1, r3
   815c4:	480f      	ldr	r0, [pc, #60]	; (81604 <fpga_program_setup1+0x6c>)
   815c6:	4b10      	ldr	r3, [pc, #64]	; (81608 <fpga_program_setup1+0x70>)
   815c8:	4798      	blx	r3
    FPGA_DO_SETUP();
   815ca:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   815ce:	2012      	movs	r0, #18
   815d0:	4b0e      	ldr	r3, [pc, #56]	; (8160c <fpga_program_setup1+0x74>)
   815d2:	4798      	blx	r3
    FPGA_CCLK_SETUP();
   815d4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   815d8:	2011      	movs	r0, #17
   815da:	4b0c      	ldr	r3, [pc, #48]	; (8160c <fpga_program_setup1+0x74>)
   815dc:	4798      	blx	r3

    //pin setup doesn't transfer control over to USART, so have to do it manually
    PIOA->PIO_PDR = (1 << PIN_FPGA_DO_GPIO) | (1 << PIN_FPGA_CCLK_GPIO);
   815de:	4b0c      	ldr	r3, [pc, #48]	; (81610 <fpga_program_setup1+0x78>)
   815e0:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   815e4:	605a      	str	r2, [r3, #4]
    usart_enable_tx(FPGA_PROG_USART);
   815e6:	4807      	ldr	r0, [pc, #28]	; (81604 <fpga_program_setup1+0x6c>)
   815e8:	4b0a      	ldr	r3, [pc, #40]	; (81614 <fpga_program_setup1+0x7c>)
   815ea:	4798      	blx	r3
}
   815ec:	bf00      	nop
   815ee:	3710      	adds	r7, #16
   815f0:	46bd      	mov	sp, r7
   815f2:	bd80      	pop	{r7, pc}
   815f4:	00081b39 	.word	0x00081b39
   815f8:	00989680 	.word	0x00989680
   815fc:	0008155d 	.word	0x0008155d
   81600:	00081549 	.word	0x00081549
   81604:	40090000 	.word	0x40090000
   81608:	000859cd 	.word	0x000859cd
   8160c:	00081b69 	.word	0x00081b69
   81610:	400e0c00 	.word	0x400e0c00
   81614:	00085add 	.word	0x00085add

00081618 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   81618:	b580      	push	{r7, lr}
   8161a:	af00      	add	r7, sp, #0
    FPGA_NPROG_HIGH();
   8161c:	2014      	movs	r0, #20
   8161e:	4b02      	ldr	r3, [pc, #8]	; (81628 <fpga_program_setup2+0x10>)
   81620:	4798      	blx	r3
}
   81622:	bf00      	nop
   81624:	bd80      	pop	{r7, pc}
   81626:	bf00      	nop
   81628:	00081b09 	.word	0x00081b09

0008162c <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   8162c:	b580      	push	{r7, lr}
   8162e:	b082      	sub	sp, #8
   81630:	af00      	add	r7, sp, #0
   81632:	4603      	mov	r3, r0
   81634:	71fb      	strb	r3, [r7, #7]
    //For debug only
    //fpga_total_bs_len++;
    usart_putchar(FPGA_PROG_USART, databyte);
   81636:	79fb      	ldrb	r3, [r7, #7]
   81638:	4619      	mov	r1, r3
   8163a:	4803      	ldr	r0, [pc, #12]	; (81648 <fpga_program_sendbyte+0x1c>)
   8163c:	4b03      	ldr	r3, [pc, #12]	; (8164c <fpga_program_sendbyte+0x20>)
   8163e:	4798      	blx	r3
}
   81640:	bf00      	nop
   81642:	3708      	adds	r7, #8
   81644:	46bd      	mov	sp, r7
   81646:	bd80      	pop	{r7, pc}
   81648:	40090000 	.word	0x40090000
   8164c:	00085b73 	.word	0x00085b73

00081650 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   81650:	b480      	push	{r7}
   81652:	b083      	sub	sp, #12
   81654:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81656:	f3ef 8310 	mrs	r3, PRIMASK
   8165a:	603b      	str	r3, [r7, #0]
  return(result);
   8165c:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   8165e:	2b00      	cmp	r3, #0
   81660:	bf0c      	ite	eq
   81662:	2301      	moveq	r3, #1
   81664:	2300      	movne	r3, #0
   81666:	b2db      	uxtb	r3, r3
   81668:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   8166a:	b672      	cpsid	i
   8166c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81670:	4b04      	ldr	r3, [pc, #16]	; (81684 <cpu_irq_save+0x34>)
   81672:	2200      	movs	r2, #0
   81674:	701a      	strb	r2, [r3, #0]
	return flags;
   81676:	687b      	ldr	r3, [r7, #4]
}
   81678:	4618      	mov	r0, r3
   8167a:	370c      	adds	r7, #12
   8167c:	46bd      	mov	sp, r7
   8167e:	bc80      	pop	{r7}
   81680:	4770      	bx	lr
   81682:	bf00      	nop
   81684:	20000294 	.word	0x20000294

00081688 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   81688:	b480      	push	{r7}
   8168a:	b083      	sub	sp, #12
   8168c:	af00      	add	r7, sp, #0
   8168e:	6078      	str	r0, [r7, #4]
	return (flags);
   81690:	687b      	ldr	r3, [r7, #4]
   81692:	2b00      	cmp	r3, #0
   81694:	bf14      	ite	ne
   81696:	2301      	movne	r3, #1
   81698:	2300      	moveq	r3, #0
   8169a:	b2db      	uxtb	r3, r3
}
   8169c:	4618      	mov	r0, r3
   8169e:	370c      	adds	r7, #12
   816a0:	46bd      	mov	sp, r7
   816a2:	bc80      	pop	{r7}
   816a4:	4770      	bx	lr
   816a6:	0000      	movs	r0, r0

000816a8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   816a8:	b580      	push	{r7, lr}
   816aa:	b082      	sub	sp, #8
   816ac:	af00      	add	r7, sp, #0
   816ae:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   816b0:	6878      	ldr	r0, [r7, #4]
   816b2:	4b07      	ldr	r3, [pc, #28]	; (816d0 <cpu_irq_restore+0x28>)
   816b4:	4798      	blx	r3
   816b6:	4603      	mov	r3, r0
   816b8:	2b00      	cmp	r3, #0
   816ba:	d005      	beq.n	816c8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
   816bc:	4b05      	ldr	r3, [pc, #20]	; (816d4 <cpu_irq_restore+0x2c>)
   816be:	2201      	movs	r2, #1
   816c0:	701a      	strb	r2, [r3, #0]
   816c2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   816c6:	b662      	cpsie	i
}
   816c8:	bf00      	nop
   816ca:	3708      	adds	r7, #8
   816cc:	46bd      	mov	sp, r7
   816ce:	bd80      	pop	{r7, pc}
   816d0:	00081689 	.word	0x00081689
   816d4:	20000294 	.word	0x20000294

000816d8 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   816d8:	b580      	push	{r7, lr}
   816da:	b086      	sub	sp, #24
   816dc:	af00      	add	r7, sp, #0
   816de:	60f8      	str	r0, [r7, #12]
   816e0:	60b9      	str	r1, [r7, #8]
   816e2:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   816e4:	68bb      	ldr	r3, [r7, #8]
   816e6:	2b0e      	cmp	r3, #14
   816e8:	d002      	beq.n	816f0 <efc_perform_command+0x18>
   816ea:	68bb      	ldr	r3, [r7, #8]
   816ec:	2b0f      	cmp	r3, #15
   816ee:	d102      	bne.n	816f6 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   816f0:	f04f 33ff 	mov.w	r3, #4294967295
   816f4:	e016      	b.n	81724 <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
   816f6:	4b0d      	ldr	r3, [pc, #52]	; (8172c <efc_perform_command+0x54>)
   816f8:	4798      	blx	r3
   816fa:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   816fc:	687b      	ldr	r3, [r7, #4]
   816fe:	021b      	lsls	r3, r3, #8
   81700:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   81704:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   81708:	68ba      	ldr	r2, [r7, #8]
   8170a:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   8170c:	4313      	orrs	r3, r2
	result = efc_perform_fcr(p_efc,
   8170e:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   81712:	4619      	mov	r1, r3
   81714:	68f8      	ldr	r0, [r7, #12]
   81716:	4b06      	ldr	r3, [pc, #24]	; (81730 <efc_perform_command+0x58>)
   81718:	4798      	blx	r3
   8171a:	6138      	str	r0, [r7, #16]
	cpu_irq_restore(flags);
   8171c:	6978      	ldr	r0, [r7, #20]
   8171e:	4b05      	ldr	r3, [pc, #20]	; (81734 <efc_perform_command+0x5c>)
   81720:	4798      	blx	r3
	return result;
   81722:	693b      	ldr	r3, [r7, #16]
}
   81724:	4618      	mov	r0, r3
   81726:	3718      	adds	r7, #24
   81728:	46bd      	mov	sp, r7
   8172a:	bd80      	pop	{r7, pc}
   8172c:	00081651 	.word	0x00081651
   81730:	200000bd 	.word	0x200000bd
   81734:	000816a9 	.word	0x000816a9

00081738 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81738:	b480      	push	{r7}
   8173a:	af00      	add	r7, sp, #0
	while (1) {
   8173c:	e7fe      	b.n	8173c <Dummy_Handler+0x4>
   8173e:	0000      	movs	r0, r0

00081740 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   81740:	b590      	push	{r4, r7, lr}
   81742:	b08b      	sub	sp, #44	; 0x2c
   81744:	af02      	add	r7, sp, #8
   81746:	6078      	str	r0, [r7, #4]
   81748:	6039      	str	r1, [r7, #0]
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   8174a:	f107 020c 	add.w	r2, r7, #12
   8174e:	2304      	movs	r3, #4
   81750:	9300      	str	r3, [sp, #0]
   81752:	4613      	mov	r3, r2
   81754:	220f      	movs	r2, #15
   81756:	210e      	movs	r1, #14
   81758:	4813      	ldr	r0, [pc, #76]	; (817a8 <flash_read_unique_id+0x68>)
   8175a:	4c14      	ldr	r4, [pc, #80]	; (817ac <flash_read_unique_id+0x6c>)
   8175c:	47a0      	blx	r4
   8175e:	4603      	mov	r3, r0
   81760:	2b00      	cmp	r3, #0
   81762:	d001      	beq.n	81768 <flash_read_unique_id+0x28>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   81764:	2310      	movs	r3, #16
   81766:	e01b      	b.n	817a0 <flash_read_unique_id+0x60>
	}

	if (ul_size > 4) {
   81768:	683b      	ldr	r3, [r7, #0]
   8176a:	2b04      	cmp	r3, #4
   8176c:	d901      	bls.n	81772 <flash_read_unique_id+0x32>
		/* Only 4 dword to store unique ID */
		ul_size = 4;
   8176e:	2304      	movs	r3, #4
   81770:	603b      	str	r3, [r7, #0]
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81772:	2300      	movs	r3, #0
   81774:	61fb      	str	r3, [r7, #28]
   81776:	e00e      	b.n	81796 <flash_read_unique_id+0x56>
		pul_data[ul_idx] = uid_buf[ul_idx];
   81778:	69fb      	ldr	r3, [r7, #28]
   8177a:	009b      	lsls	r3, r3, #2
   8177c:	687a      	ldr	r2, [r7, #4]
   8177e:	441a      	add	r2, r3
   81780:	69fb      	ldr	r3, [r7, #28]
   81782:	009b      	lsls	r3, r3, #2
   81784:	f107 0120 	add.w	r1, r7, #32
   81788:	440b      	add	r3, r1
   8178a:	f853 3c14 	ldr.w	r3, [r3, #-20]
   8178e:	6013      	str	r3, [r2, #0]
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81790:	69fb      	ldr	r3, [r7, #28]
   81792:	3301      	adds	r3, #1
   81794:	61fb      	str	r3, [r7, #28]
   81796:	69fa      	ldr	r2, [r7, #28]
   81798:	683b      	ldr	r3, [r7, #0]
   8179a:	429a      	cmp	r2, r3
   8179c:	d3ec      	bcc.n	81778 <flash_read_unique_id+0x38>
	}

	return FLASH_RC_OK;
   8179e:	2300      	movs	r3, #0
}
   817a0:	4618      	mov	r0, r3
   817a2:	3724      	adds	r7, #36	; 0x24
   817a4:	46bd      	mov	sp, r7
   817a6:	bd90      	pop	{r4, r7, pc}
   817a8:	400e0800 	.word	0x400e0800
   817ac:	20000001 	.word	0x20000001

000817b0 <sysclk_enable_peripheral_clock>:
{
   817b0:	b580      	push	{r7, lr}
   817b2:	b082      	sub	sp, #8
   817b4:	af00      	add	r7, sp, #0
   817b6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   817b8:	6878      	ldr	r0, [r7, #4]
   817ba:	4b03      	ldr	r3, [pc, #12]	; (817c8 <sysclk_enable_peripheral_clock+0x18>)
   817bc:	4798      	blx	r3
}
   817be:	bf00      	nop
   817c0:	3708      	adds	r7, #8
   817c2:	46bd      	mov	sp, r7
   817c4:	bd80      	pop	{r7, pc}
   817c6:	bf00      	nop
   817c8:	000821b5 	.word	0x000821b5

000817cc <ioport_init>:
{
   817cc:	b580      	push	{r7, lr}
   817ce:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   817d0:	200a      	movs	r0, #10
   817d2:	4b03      	ldr	r3, [pc, #12]	; (817e0 <ioport_init+0x14>)
   817d4:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   817d6:	200b      	movs	r0, #11
   817d8:	4b01      	ldr	r3, [pc, #4]	; (817e0 <ioport_init+0x14>)
   817da:	4798      	blx	r3
}
   817dc:	bf00      	nop
   817de:	bd80      	pop	{r7, pc}
   817e0:	000817b1 	.word	0x000817b1

000817e4 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   817e4:	b580      	push	{r7, lr}
   817e6:	af00      	add	r7, sp, #0
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   817e8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   817ec:	201d      	movs	r0, #29
   817ee:	4b0d      	ldr	r3, [pc, #52]	; (81824 <iopins_normal+0x40>)
   817f0:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   817f2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   817f6:	201f      	movs	r0, #31
   817f8:	4b0a      	ldr	r3, [pc, #40]	; (81824 <iopins_normal+0x40>)
   817fa:	4798      	blx	r3
	//gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   817fc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81800:	2018      	movs	r0, #24
   81802:	4b08      	ldr	r3, [pc, #32]	; (81824 <iopins_normal+0x40>)
   81804:	4798      	blx	r3
	//board_sram_pwron();

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81806:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8180a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   8180e:	4806      	ldr	r0, [pc, #24]	; (81828 <iopins_normal+0x44>)
   81810:	4b06      	ldr	r3, [pc, #24]	; (8182c <iopins_normal+0x48>)
   81812:	4798      	blx	r3
#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
#endif

#ifdef CONF_BOARD_PCK1
gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
   81814:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81818:	2038      	movs	r0, #56	; 0x38
   8181a:	4b02      	ldr	r3, [pc, #8]	; (81824 <iopins_normal+0x40>)
   8181c:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   8181e:	bf00      	nop
   81820:	bd80      	pop	{r7, pc}
   81822:	bf00      	nop
   81824:	00081b69 	.word	0x00081b69
   81828:	400e0c00 	.word	0x400e0c00
   8182c:	00081c8d 	.word	0x00081c8d

00081830 <board_init>:

void board_init(void)
{
   81830:	b580      	push	{r7, lr}
   81832:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81834:	4b04      	ldr	r3, [pc, #16]	; (81848 <board_init+0x18>)
   81836:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8183a:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   8183c:	4b03      	ldr	r3, [pc, #12]	; (8184c <board_init+0x1c>)
   8183e:	4798      	blx	r3

	iopins_normal();
   81840:	4b03      	ldr	r3, [pc, #12]	; (81850 <board_init+0x20>)
   81842:	4798      	blx	r3

}
   81844:	bf00      	nop
   81846:	bd80      	pop	{r7, pc}
   81848:	400e1250 	.word	0x400e1250
   8184c:	000817cd 	.word	0x000817cd
   81850:	000817e5 	.word	0x000817e5

00081854 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   81854:	b480      	push	{r7}
   81856:	b083      	sub	sp, #12
   81858:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   8185a:	4b10      	ldr	r3, [pc, #64]	; (8189c <cpu_irq_enter_critical+0x48>)
   8185c:	681b      	ldr	r3, [r3, #0]
   8185e:	2b00      	cmp	r3, #0
   81860:	d112      	bne.n	81888 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81862:	f3ef 8310 	mrs	r3, PRIMASK
   81866:	607b      	str	r3, [r7, #4]
  return(result);
   81868:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   8186a:	2b00      	cmp	r3, #0
   8186c:	d109      	bne.n	81882 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i");
   8186e:	b672      	cpsid	i
   81870:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   81874:	4b0a      	ldr	r3, [pc, #40]	; (818a0 <cpu_irq_enter_critical+0x4c>)
   81876:	2200      	movs	r2, #0
   81878:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   8187a:	4b0a      	ldr	r3, [pc, #40]	; (818a4 <cpu_irq_enter_critical+0x50>)
   8187c:	2201      	movs	r2, #1
   8187e:	701a      	strb	r2, [r3, #0]
   81880:	e002      	b.n	81888 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   81882:	4b08      	ldr	r3, [pc, #32]	; (818a4 <cpu_irq_enter_critical+0x50>)
   81884:	2200      	movs	r2, #0
   81886:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   81888:	4b04      	ldr	r3, [pc, #16]	; (8189c <cpu_irq_enter_critical+0x48>)
   8188a:	681b      	ldr	r3, [r3, #0]
   8188c:	3301      	adds	r3, #1
   8188e:	4a03      	ldr	r2, [pc, #12]	; (8189c <cpu_irq_enter_critical+0x48>)
   81890:	6013      	str	r3, [r2, #0]
}
   81892:	bf00      	nop
   81894:	370c      	adds	r7, #12
   81896:	46bd      	mov	sp, r7
   81898:	bc80      	pop	{r7}
   8189a:	4770      	bx	lr
   8189c:	20001210 	.word	0x20001210
   818a0:	20000294 	.word	0x20000294
   818a4:	20001214 	.word	0x20001214

000818a8 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   818a8:	b480      	push	{r7}
   818aa:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   818ac:	4b0b      	ldr	r3, [pc, #44]	; (818dc <cpu_irq_leave_critical+0x34>)
   818ae:	681b      	ldr	r3, [r3, #0]
   818b0:	3b01      	subs	r3, #1
   818b2:	4a0a      	ldr	r2, [pc, #40]	; (818dc <cpu_irq_leave_critical+0x34>)
   818b4:	6013      	str	r3, [r2, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   818b6:	4b09      	ldr	r3, [pc, #36]	; (818dc <cpu_irq_leave_critical+0x34>)
   818b8:	681b      	ldr	r3, [r3, #0]
   818ba:	2b00      	cmp	r3, #0
   818bc:	d10a      	bne.n	818d4 <cpu_irq_leave_critical+0x2c>
   818be:	4b08      	ldr	r3, [pc, #32]	; (818e0 <cpu_irq_leave_critical+0x38>)
   818c0:	781b      	ldrb	r3, [r3, #0]
   818c2:	b2db      	uxtb	r3, r3
   818c4:	2b00      	cmp	r3, #0
   818c6:	d005      	beq.n	818d4 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   818c8:	4b06      	ldr	r3, [pc, #24]	; (818e4 <cpu_irq_leave_critical+0x3c>)
   818ca:	2201      	movs	r2, #1
   818cc:	701a      	strb	r2, [r3, #0]
   818ce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   818d2:	b662      	cpsie	i
	}
}
   818d4:	bf00      	nop
   818d6:	46bd      	mov	sp, r7
   818d8:	bc80      	pop	{r7}
   818da:	4770      	bx	lr
   818dc:	20001210 	.word	0x20001210
   818e0:	20001214 	.word	0x20001214
   818e4:	20000294 	.word	0x20000294

000818e8 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   818e8:	b480      	push	{r7}
   818ea:	b085      	sub	sp, #20
   818ec:	af00      	add	r7, sp, #0
   818ee:	60f8      	str	r0, [r7, #12]
   818f0:	60b9      	str	r1, [r7, #8]
   818f2:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   818f4:	687b      	ldr	r3, [r7, #4]
   818f6:	2b00      	cmp	r3, #0
   818f8:	d003      	beq.n	81902 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   818fa:	68fb      	ldr	r3, [r7, #12]
   818fc:	68ba      	ldr	r2, [r7, #8]
   818fe:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   81900:	e002      	b.n	81908 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
   81902:	68fb      	ldr	r3, [r7, #12]
   81904:	68ba      	ldr	r2, [r7, #8]
   81906:	661a      	str	r2, [r3, #96]	; 0x60
}
   81908:	bf00      	nop
   8190a:	3714      	adds	r7, #20
   8190c:	46bd      	mov	sp, r7
   8190e:	bc80      	pop	{r7}
   81910:	4770      	bx	lr

00081912 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   81912:	b480      	push	{r7}
   81914:	b087      	sub	sp, #28
   81916:	af00      	add	r7, sp, #0
   81918:	60f8      	str	r0, [r7, #12]
   8191a:	60b9      	str	r1, [r7, #8]
   8191c:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8191e:	68fb      	ldr	r3, [r7, #12]
   81920:	687a      	ldr	r2, [r7, #4]
   81922:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81924:	68bb      	ldr	r3, [r7, #8]
   81926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8192a:	d01f      	beq.n	8196c <pio_set_peripheral+0x5a>
   8192c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81930:	d805      	bhi.n	8193e <pio_set_peripheral+0x2c>
   81932:	2b00      	cmp	r3, #0
   81934:	d027      	beq.n	81986 <pio_set_peripheral+0x74>
   81936:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8193a:	d00a      	beq.n	81952 <pio_set_peripheral+0x40>
   8193c:	e01f      	b.n	8197e <pio_set_peripheral+0x6c>
   8193e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81942:	d020      	beq.n	81986 <pio_set_peripheral+0x74>
   81944:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81948:	d01d      	beq.n	81986 <pio_set_peripheral+0x74>
   8194a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8194e:	d01a      	beq.n	81986 <pio_set_peripheral+0x74>
   81950:	e015      	b.n	8197e <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81952:	68fb      	ldr	r3, [r7, #12]
   81954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   81956:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81958:	68fb      	ldr	r3, [r7, #12]
   8195a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8195c:	687b      	ldr	r3, [r7, #4]
   8195e:	43d9      	mvns	r1, r3
   81960:	697b      	ldr	r3, [r7, #20]
   81962:	400b      	ands	r3, r1
   81964:	401a      	ands	r2, r3
   81966:	68fb      	ldr	r3, [r7, #12]
   81968:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   8196a:	e008      	b.n	8197e <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8196c:	68fb      	ldr	r3, [r7, #12]
   8196e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   81970:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81972:	687a      	ldr	r2, [r7, #4]
   81974:	697b      	ldr	r3, [r7, #20]
   81976:	431a      	orrs	r2, r3
   81978:	68fb      	ldr	r3, [r7, #12]
   8197a:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   8197c:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8197e:	68fb      	ldr	r3, [r7, #12]
   81980:	687a      	ldr	r2, [r7, #4]
   81982:	605a      	str	r2, [r3, #4]
   81984:	e000      	b.n	81988 <pio_set_peripheral+0x76>
		return;
   81986:	bf00      	nop
}
   81988:	371c      	adds	r7, #28
   8198a:	46bd      	mov	sp, r7
   8198c:	bc80      	pop	{r7}
   8198e:	4770      	bx	lr

00081990 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   81990:	b580      	push	{r7, lr}
   81992:	b084      	sub	sp, #16
   81994:	af00      	add	r7, sp, #0
   81996:	60f8      	str	r0, [r7, #12]
   81998:	60b9      	str	r1, [r7, #8]
   8199a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   8199c:	68b9      	ldr	r1, [r7, #8]
   8199e:	68f8      	ldr	r0, [r7, #12]
   819a0:	4b19      	ldr	r3, [pc, #100]	; (81a08 <pio_set_input+0x78>)
   819a2:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   819a4:	687b      	ldr	r3, [r7, #4]
   819a6:	f003 0301 	and.w	r3, r3, #1
   819aa:	461a      	mov	r2, r3
   819ac:	68b9      	ldr	r1, [r7, #8]
   819ae:	68f8      	ldr	r0, [r7, #12]
   819b0:	4b16      	ldr	r3, [pc, #88]	; (81a0c <pio_set_input+0x7c>)
   819b2:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   819b4:	687b      	ldr	r3, [r7, #4]
   819b6:	f003 030a 	and.w	r3, r3, #10
   819ba:	2b00      	cmp	r3, #0
   819bc:	d003      	beq.n	819c6 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   819be:	68fb      	ldr	r3, [r7, #12]
   819c0:	68ba      	ldr	r2, [r7, #8]
   819c2:	621a      	str	r2, [r3, #32]
   819c4:	e002      	b.n	819cc <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   819c6:	68fb      	ldr	r3, [r7, #12]
   819c8:	68ba      	ldr	r2, [r7, #8]
   819ca:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   819cc:	687b      	ldr	r3, [r7, #4]
   819ce:	f003 0302 	and.w	r3, r3, #2
   819d2:	2b00      	cmp	r3, #0
   819d4:	d004      	beq.n	819e0 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   819d6:	68fb      	ldr	r3, [r7, #12]
   819d8:	68ba      	ldr	r2, [r7, #8]
   819da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   819de:	e008      	b.n	819f2 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   819e0:	687b      	ldr	r3, [r7, #4]
   819e2:	f003 0308 	and.w	r3, r3, #8
   819e6:	2b00      	cmp	r3, #0
   819e8:	d003      	beq.n	819f2 <pio_set_input+0x62>
			p_pio->PIO_DIFSR = ul_mask;
   819ea:	68fb      	ldr	r3, [r7, #12]
   819ec:	68ba      	ldr	r2, [r7, #8]
   819ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   819f2:	68fb      	ldr	r3, [r7, #12]
   819f4:	68ba      	ldr	r2, [r7, #8]
   819f6:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   819f8:	68fb      	ldr	r3, [r7, #12]
   819fa:	68ba      	ldr	r2, [r7, #8]
   819fc:	601a      	str	r2, [r3, #0]
}
   819fe:	bf00      	nop
   81a00:	3710      	adds	r7, #16
   81a02:	46bd      	mov	sp, r7
   81a04:	bd80      	pop	{r7, pc}
   81a06:	bf00      	nop
   81a08:	00081a91 	.word	0x00081a91
   81a0c:	000818e9 	.word	0x000818e9

00081a10 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   81a10:	b580      	push	{r7, lr}
   81a12:	b084      	sub	sp, #16
   81a14:	af00      	add	r7, sp, #0
   81a16:	60f8      	str	r0, [r7, #12]
   81a18:	60b9      	str	r1, [r7, #8]
   81a1a:	607a      	str	r2, [r7, #4]
   81a1c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   81a1e:	68b9      	ldr	r1, [r7, #8]
   81a20:	68f8      	ldr	r0, [r7, #12]
   81a22:	4b12      	ldr	r3, [pc, #72]	; (81a6c <pio_set_output+0x5c>)
   81a24:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   81a26:	69ba      	ldr	r2, [r7, #24]
   81a28:	68b9      	ldr	r1, [r7, #8]
   81a2a:	68f8      	ldr	r0, [r7, #12]
   81a2c:	4b10      	ldr	r3, [pc, #64]	; (81a70 <pio_set_output+0x60>)
   81a2e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   81a30:	683b      	ldr	r3, [r7, #0]
   81a32:	2b00      	cmp	r3, #0
   81a34:	d003      	beq.n	81a3e <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   81a36:	68fb      	ldr	r3, [r7, #12]
   81a38:	68ba      	ldr	r2, [r7, #8]
   81a3a:	651a      	str	r2, [r3, #80]	; 0x50
   81a3c:	e002      	b.n	81a44 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   81a3e:	68fb      	ldr	r3, [r7, #12]
   81a40:	68ba      	ldr	r2, [r7, #8]
   81a42:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81a44:	687b      	ldr	r3, [r7, #4]
   81a46:	2b00      	cmp	r3, #0
   81a48:	d003      	beq.n	81a52 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   81a4a:	68fb      	ldr	r3, [r7, #12]
   81a4c:	68ba      	ldr	r2, [r7, #8]
   81a4e:	631a      	str	r2, [r3, #48]	; 0x30
   81a50:	e002      	b.n	81a58 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81a52:	68fb      	ldr	r3, [r7, #12]
   81a54:	68ba      	ldr	r2, [r7, #8]
   81a56:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   81a58:	68fb      	ldr	r3, [r7, #12]
   81a5a:	68ba      	ldr	r2, [r7, #8]
   81a5c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   81a5e:	68fb      	ldr	r3, [r7, #12]
   81a60:	68ba      	ldr	r2, [r7, #8]
   81a62:	601a      	str	r2, [r3, #0]
}
   81a64:	bf00      	nop
   81a66:	3710      	adds	r7, #16
   81a68:	46bd      	mov	sp, r7
   81a6a:	bd80      	pop	{r7, pc}
   81a6c:	00081a91 	.word	0x00081a91
   81a70:	000818e9 	.word	0x000818e9

00081a74 <pio_enable_output_write>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_enable_output_write(Pio *p_pio, const uint32_t ul_mask)
{
   81a74:	b480      	push	{r7}
   81a76:	b083      	sub	sp, #12
   81a78:	af00      	add	r7, sp, #0
   81a7a:	6078      	str	r0, [r7, #4]
   81a7c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_OWER = ul_mask;
   81a7e:	687b      	ldr	r3, [r7, #4]
   81a80:	683a      	ldr	r2, [r7, #0]
   81a82:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   81a86:	bf00      	nop
   81a88:	370c      	adds	r7, #12
   81a8a:	46bd      	mov	sp, r7
   81a8c:	bc80      	pop	{r7}
   81a8e:	4770      	bx	lr

00081a90 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   81a90:	b480      	push	{r7}
   81a92:	b083      	sub	sp, #12
   81a94:	af00      	add	r7, sp, #0
   81a96:	6078      	str	r0, [r7, #4]
   81a98:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   81a9a:	687b      	ldr	r3, [r7, #4]
   81a9c:	683a      	ldr	r2, [r7, #0]
   81a9e:	645a      	str	r2, [r3, #68]	; 0x44
}
   81aa0:	bf00      	nop
   81aa2:	370c      	adds	r7, #12
   81aa4:	46bd      	mov	sp, r7
   81aa6:	bc80      	pop	{r7}
   81aa8:	4770      	bx	lr

00081aaa <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   81aaa:	b480      	push	{r7}
   81aac:	b083      	sub	sp, #12
   81aae:	af00      	add	r7, sp, #0
   81ab0:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   81ab2:	687b      	ldr	r3, [r7, #4]
   81ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   81ab6:	4618      	mov	r0, r3
   81ab8:	370c      	adds	r7, #12
   81aba:	46bd      	mov	sp, r7
   81abc:	bc80      	pop	{r7}
   81abe:	4770      	bx	lr

00081ac0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   81ac0:	b480      	push	{r7}
   81ac2:	b083      	sub	sp, #12
   81ac4:	af00      	add	r7, sp, #0
   81ac6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   81ac8:	687b      	ldr	r3, [r7, #4]
   81aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   81acc:	4618      	mov	r0, r3
   81ace:	370c      	adds	r7, #12
   81ad0:	46bd      	mov	sp, r7
   81ad2:	bc80      	pop	{r7}
   81ad4:	4770      	bx	lr
   81ad6:	0000      	movs	r0, r0

00081ad8 <pio_get_pin_value>:
 *       level.
 * \note If pin is input: PIOx must be clocked to sample the signal.
 *       See PMC driver.
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
   81ad8:	b580      	push	{r7, lr}
   81ada:	b084      	sub	sp, #16
   81adc:	af00      	add	r7, sp, #0
   81ade:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   81ae0:	6878      	ldr	r0, [r7, #4]
   81ae2:	4b08      	ldr	r3, [pc, #32]	; (81b04 <pio_get_pin_value+0x2c>)
   81ae4:	4798      	blx	r3
   81ae6:	60f8      	str	r0, [r7, #12]

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   81ae8:	68fb      	ldr	r3, [r7, #12]
   81aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   81aec:	687b      	ldr	r3, [r7, #4]
   81aee:	f003 031f 	and.w	r3, r3, #31
   81af2:	fa22 f303 	lsr.w	r3, r2, r3
   81af6:	f003 0301 	and.w	r3, r3, #1
}
   81afa:	4618      	mov	r0, r3
   81afc:	3710      	adds	r7, #16
   81afe:	46bd      	mov	sp, r7
   81b00:	bd80      	pop	{r7, pc}
   81b02:	bf00      	nop
   81b04:	00081d61 	.word	0x00081d61

00081b08 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   81b08:	b580      	push	{r7, lr}
   81b0a:	b084      	sub	sp, #16
   81b0c:	af00      	add	r7, sp, #0
   81b0e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   81b10:	6878      	ldr	r0, [r7, #4]
   81b12:	4b08      	ldr	r3, [pc, #32]	; (81b34 <pio_set_pin_high+0x2c>)
   81b14:	4798      	blx	r3
   81b16:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   81b18:	687b      	ldr	r3, [r7, #4]
   81b1a:	f003 031f 	and.w	r3, r3, #31
   81b1e:	2201      	movs	r2, #1
   81b20:	fa02 f303 	lsl.w	r3, r2, r3
   81b24:	461a      	mov	r2, r3
   81b26:	68fb      	ldr	r3, [r7, #12]
   81b28:	631a      	str	r2, [r3, #48]	; 0x30
}
   81b2a:	bf00      	nop
   81b2c:	3710      	adds	r7, #16
   81b2e:	46bd      	mov	sp, r7
   81b30:	bd80      	pop	{r7, pc}
   81b32:	bf00      	nop
   81b34:	00081d61 	.word	0x00081d61

00081b38 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   81b38:	b580      	push	{r7, lr}
   81b3a:	b084      	sub	sp, #16
   81b3c:	af00      	add	r7, sp, #0
   81b3e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   81b40:	6878      	ldr	r0, [r7, #4]
   81b42:	4b08      	ldr	r3, [pc, #32]	; (81b64 <pio_set_pin_low+0x2c>)
   81b44:	4798      	blx	r3
   81b46:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81b48:	687b      	ldr	r3, [r7, #4]
   81b4a:	f003 031f 	and.w	r3, r3, #31
   81b4e:	2201      	movs	r2, #1
   81b50:	fa02 f303 	lsl.w	r3, r2, r3
   81b54:	461a      	mov	r2, r3
   81b56:	68fb      	ldr	r3, [r7, #12]
   81b58:	635a      	str	r2, [r3, #52]	; 0x34
}
   81b5a:	bf00      	nop
   81b5c:	3710      	adds	r7, #16
   81b5e:	46bd      	mov	sp, r7
   81b60:	bd80      	pop	{r7, pc}
   81b62:	bf00      	nop
   81b64:	00081d61 	.word	0x00081d61

00081b68 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81b68:	b590      	push	{r4, r7, lr}
   81b6a:	b087      	sub	sp, #28
   81b6c:	af02      	add	r7, sp, #8
   81b6e:	6078      	str	r0, [r7, #4]
   81b70:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   81b72:	6878      	ldr	r0, [r7, #4]
   81b74:	4b40      	ldr	r3, [pc, #256]	; (81c78 <pio_configure_pin+0x110>)
   81b76:	4798      	blx	r3
   81b78:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81b7a:	683b      	ldr	r3, [r7, #0]
   81b7c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   81b80:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81b84:	d046      	beq.n	81c14 <pio_configure_pin+0xac>
   81b86:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81b8a:	d806      	bhi.n	81b9a <pio_configure_pin+0x32>
   81b8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81b90:	d00a      	beq.n	81ba8 <pio_configure_pin+0x40>
   81b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81b96:	d022      	beq.n	81bde <pio_configure_pin+0x76>
   81b98:	e067      	b.n	81c6a <pio_configure_pin+0x102>
   81b9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81b9e:	d045      	beq.n	81c2c <pio_configure_pin+0xc4>
   81ba0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81ba4:	d042      	beq.n	81c2c <pio_configure_pin+0xc4>
   81ba6:	e060      	b.n	81c6a <pio_configure_pin+0x102>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81ba8:	687b      	ldr	r3, [r7, #4]
   81baa:	f003 031f 	and.w	r3, r3, #31
   81bae:	2201      	movs	r2, #1
   81bb0:	fa02 f303 	lsl.w	r3, r2, r3
   81bb4:	461a      	mov	r2, r3
   81bb6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81bba:	68f8      	ldr	r0, [r7, #12]
   81bbc:	4b2f      	ldr	r3, [pc, #188]	; (81c7c <pio_configure_pin+0x114>)
   81bbe:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   81bc0:	687b      	ldr	r3, [r7, #4]
   81bc2:	f003 031f 	and.w	r3, r3, #31
   81bc6:	2201      	movs	r2, #1
   81bc8:	fa02 f303 	lsl.w	r3, r2, r3
   81bcc:	4619      	mov	r1, r3
   81bce:	683b      	ldr	r3, [r7, #0]
   81bd0:	f003 0301 	and.w	r3, r3, #1
   81bd4:	461a      	mov	r2, r3
   81bd6:	68f8      	ldr	r0, [r7, #12]
   81bd8:	4b29      	ldr	r3, [pc, #164]	; (81c80 <pio_configure_pin+0x118>)
   81bda:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   81bdc:	e047      	b.n	81c6e <pio_configure_pin+0x106>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81bde:	687b      	ldr	r3, [r7, #4]
   81be0:	f003 031f 	and.w	r3, r3, #31
   81be4:	2201      	movs	r2, #1
   81be6:	fa02 f303 	lsl.w	r3, r2, r3
   81bea:	461a      	mov	r2, r3
   81bec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81bf0:	68f8      	ldr	r0, [r7, #12]
   81bf2:	4b22      	ldr	r3, [pc, #136]	; (81c7c <pio_configure_pin+0x114>)
   81bf4:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   81bf6:	687b      	ldr	r3, [r7, #4]
   81bf8:	f003 031f 	and.w	r3, r3, #31
   81bfc:	2201      	movs	r2, #1
   81bfe:	fa02 f303 	lsl.w	r3, r2, r3
   81c02:	4619      	mov	r1, r3
   81c04:	683b      	ldr	r3, [r7, #0]
   81c06:	f003 0301 	and.w	r3, r3, #1
   81c0a:	461a      	mov	r2, r3
   81c0c:	68f8      	ldr	r0, [r7, #12]
   81c0e:	4b1c      	ldr	r3, [pc, #112]	; (81c80 <pio_configure_pin+0x118>)
   81c10:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   81c12:	e02c      	b.n	81c6e <pio_configure_pin+0x106>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81c14:	687b      	ldr	r3, [r7, #4]
   81c16:	f003 031f 	and.w	r3, r3, #31
   81c1a:	2201      	movs	r2, #1
   81c1c:	fa02 f303 	lsl.w	r3, r2, r3
   81c20:	683a      	ldr	r2, [r7, #0]
   81c22:	4619      	mov	r1, r3
   81c24:	68f8      	ldr	r0, [r7, #12]
   81c26:	4b17      	ldr	r3, [pc, #92]	; (81c84 <pio_configure_pin+0x11c>)
   81c28:	4798      	blx	r3
		break;
   81c2a:	e020      	b.n	81c6e <pio_configure_pin+0x106>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81c2c:	687b      	ldr	r3, [r7, #4]
   81c2e:	f003 031f 	and.w	r3, r3, #31
   81c32:	2201      	movs	r2, #1
   81c34:	fa02 f303 	lsl.w	r3, r2, r3
   81c38:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81c3a:	683b      	ldr	r3, [r7, #0]
   81c3c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81c40:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81c44:	bf0c      	ite	eq
   81c46:	2301      	moveq	r3, #1
   81c48:	2300      	movne	r3, #0
   81c4a:	b2db      	uxtb	r3, r3
   81c4c:	4618      	mov	r0, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   81c4e:	683b      	ldr	r3, [r7, #0]
   81c50:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81c52:	f003 0201 	and.w	r2, r3, #1
   81c56:	683b      	ldr	r3, [r7, #0]
   81c58:	f003 0301 	and.w	r3, r3, #1
   81c5c:	9300      	str	r3, [sp, #0]
   81c5e:	4613      	mov	r3, r2
   81c60:	4602      	mov	r2, r0
   81c62:	68f8      	ldr	r0, [r7, #12]
   81c64:	4c08      	ldr	r4, [pc, #32]	; (81c88 <pio_configure_pin+0x120>)
   81c66:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81c68:	e001      	b.n	81c6e <pio_configure_pin+0x106>

	default:
		return 0;
   81c6a:	2300      	movs	r3, #0
   81c6c:	e000      	b.n	81c70 <pio_configure_pin+0x108>
	}

	return 1;
   81c6e:	2301      	movs	r3, #1
}
   81c70:	4618      	mov	r0, r3
   81c72:	3714      	adds	r7, #20
   81c74:	46bd      	mov	sp, r7
   81c76:	bd90      	pop	{r4, r7, pc}
   81c78:	00081d61 	.word	0x00081d61
   81c7c:	00081913 	.word	0x00081913
   81c80:	000818e9 	.word	0x000818e9
   81c84:	00081991 	.word	0x00081991
   81c88:	00081a11 	.word	0x00081a11

00081c8c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   81c8c:	b590      	push	{r4, r7, lr}
   81c8e:	b087      	sub	sp, #28
   81c90:	af02      	add	r7, sp, #8
   81c92:	60f8      	str	r0, [r7, #12]
   81c94:	60b9      	str	r1, [r7, #8]
   81c96:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81c98:	687b      	ldr	r3, [r7, #4]
   81c9a:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   81c9e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81ca2:	d02e      	beq.n	81d02 <pio_configure_pin_group+0x76>
   81ca4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81ca8:	d806      	bhi.n	81cb8 <pio_configure_pin_group+0x2c>
   81caa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81cae:	d00a      	beq.n	81cc6 <pio_configure_pin_group+0x3a>
   81cb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81cb4:	d016      	beq.n	81ce4 <pio_configure_pin_group+0x58>
   81cb6:	e043      	b.n	81d40 <pio_configure_pin_group+0xb4>
   81cb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81cbc:	d027      	beq.n	81d0e <pio_configure_pin_group+0x82>
   81cbe:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81cc2:	d024      	beq.n	81d0e <pio_configure_pin_group+0x82>
   81cc4:	e03c      	b.n	81d40 <pio_configure_pin_group+0xb4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81cc6:	68ba      	ldr	r2, [r7, #8]
   81cc8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81ccc:	68f8      	ldr	r0, [r7, #12]
   81cce:	4b20      	ldr	r3, [pc, #128]	; (81d50 <pio_configure_pin_group+0xc4>)
   81cd0:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   81cd2:	687b      	ldr	r3, [r7, #4]
   81cd4:	f003 0301 	and.w	r3, r3, #1
   81cd8:	461a      	mov	r2, r3
   81cda:	68b9      	ldr	r1, [r7, #8]
   81cdc:	68f8      	ldr	r0, [r7, #12]
   81cde:	4b1d      	ldr	r3, [pc, #116]	; (81d54 <pio_configure_pin_group+0xc8>)
   81ce0:	4798      	blx	r3
		break;
   81ce2:	e02f      	b.n	81d44 <pio_configure_pin_group+0xb8>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81ce4:	68ba      	ldr	r2, [r7, #8]
   81ce6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81cea:	68f8      	ldr	r0, [r7, #12]
   81cec:	4b18      	ldr	r3, [pc, #96]	; (81d50 <pio_configure_pin_group+0xc4>)
   81cee:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   81cf0:	687b      	ldr	r3, [r7, #4]
   81cf2:	f003 0301 	and.w	r3, r3, #1
   81cf6:	461a      	mov	r2, r3
   81cf8:	68b9      	ldr	r1, [r7, #8]
   81cfa:	68f8      	ldr	r0, [r7, #12]
   81cfc:	4b15      	ldr	r3, [pc, #84]	; (81d54 <pio_configure_pin_group+0xc8>)
   81cfe:	4798      	blx	r3
		break;
   81d00:	e020      	b.n	81d44 <pio_configure_pin_group+0xb8>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   81d02:	687a      	ldr	r2, [r7, #4]
   81d04:	68b9      	ldr	r1, [r7, #8]
   81d06:	68f8      	ldr	r0, [r7, #12]
   81d08:	4b13      	ldr	r3, [pc, #76]	; (81d58 <pio_configure_pin_group+0xcc>)
   81d0a:	4798      	blx	r3
		break;
   81d0c:	e01a      	b.n	81d44 <pio_configure_pin_group+0xb8>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81d0e:	687b      	ldr	r3, [r7, #4]
   81d10:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   81d14:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81d18:	bf0c      	ite	eq
   81d1a:	2301      	moveq	r3, #1
   81d1c:	2300      	movne	r3, #0
   81d1e:	b2db      	uxtb	r3, r3
   81d20:	4619      	mov	r1, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   81d22:	687b      	ldr	r3, [r7, #4]
   81d24:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, ul_mask,
   81d26:	f003 0201 	and.w	r2, r3, #1
   81d2a:	687b      	ldr	r3, [r7, #4]
   81d2c:	f003 0301 	and.w	r3, r3, #1
   81d30:	9300      	str	r3, [sp, #0]
   81d32:	4613      	mov	r3, r2
   81d34:	460a      	mov	r2, r1
   81d36:	68b9      	ldr	r1, [r7, #8]
   81d38:	68f8      	ldr	r0, [r7, #12]
   81d3a:	4c08      	ldr	r4, [pc, #32]	; (81d5c <pio_configure_pin_group+0xd0>)
   81d3c:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81d3e:	e001      	b.n	81d44 <pio_configure_pin_group+0xb8>

	default:
		return 0;
   81d40:	2300      	movs	r3, #0
   81d42:	e000      	b.n	81d46 <pio_configure_pin_group+0xba>
	}

	return 1;
   81d44:	2301      	movs	r3, #1
}
   81d46:	4618      	mov	r0, r3
   81d48:	3714      	adds	r7, #20
   81d4a:	46bd      	mov	sp, r7
   81d4c:	bd90      	pop	{r4, r7, pc}
   81d4e:	bf00      	nop
   81d50:	00081913 	.word	0x00081913
   81d54:	000818e9 	.word	0x000818e9
   81d58:	00081991 	.word	0x00081991
   81d5c:	00081a11 	.word	0x00081a11

00081d60 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
   81d60:	b480      	push	{r7}
   81d62:	b085      	sub	sp, #20
   81d64:	af00      	add	r7, sp, #0
   81d66:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81d68:	687b      	ldr	r3, [r7, #4]
   81d6a:	095b      	lsrs	r3, r3, #5
   81d6c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81d70:	f203 7306 	addw	r3, r3, #1798	; 0x706
   81d74:	025b      	lsls	r3, r3, #9
   81d76:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
   81d78:	68fb      	ldr	r3, [r7, #12]
}
   81d7a:	4618      	mov	r0, r3
   81d7c:	3714      	adds	r7, #20
   81d7e:	46bd      	mov	sp, r7
   81d80:	bc80      	pop	{r7}
   81d82:	4770      	bx	lr

00081d84 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81d84:	b580      	push	{r7, lr}
   81d86:	b084      	sub	sp, #16
   81d88:	af00      	add	r7, sp, #0
   81d8a:	6078      	str	r0, [r7, #4]
   81d8c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81d8e:	6878      	ldr	r0, [r7, #4]
   81d90:	4b26      	ldr	r3, [pc, #152]	; (81e2c <pio_handler_process+0xa8>)
   81d92:	4798      	blx	r3
   81d94:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   81d96:	6878      	ldr	r0, [r7, #4]
   81d98:	4b25      	ldr	r3, [pc, #148]	; (81e30 <pio_handler_process+0xac>)
   81d9a:	4798      	blx	r3
   81d9c:	4602      	mov	r2, r0
   81d9e:	68fb      	ldr	r3, [r7, #12]
   81da0:	4013      	ands	r3, r2
   81da2:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   81da4:	68fb      	ldr	r3, [r7, #12]
   81da6:	2b00      	cmp	r3, #0
   81da8:	d03c      	beq.n	81e24 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
   81daa:	2300      	movs	r3, #0
   81dac:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   81dae:	e034      	b.n	81e1a <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81db0:	4a20      	ldr	r2, [pc, #128]	; (81e34 <pio_handler_process+0xb0>)
   81db2:	68bb      	ldr	r3, [r7, #8]
   81db4:	011b      	lsls	r3, r3, #4
   81db6:	4413      	add	r3, r2
   81db8:	681b      	ldr	r3, [r3, #0]
   81dba:	683a      	ldr	r2, [r7, #0]
   81dbc:	429a      	cmp	r2, r3
   81dbe:	d126      	bne.n	81e0e <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81dc0:	4a1c      	ldr	r2, [pc, #112]	; (81e34 <pio_handler_process+0xb0>)
   81dc2:	68bb      	ldr	r3, [r7, #8]
   81dc4:	011b      	lsls	r3, r3, #4
   81dc6:	4413      	add	r3, r2
   81dc8:	3304      	adds	r3, #4
   81dca:	681a      	ldr	r2, [r3, #0]
   81dcc:	68fb      	ldr	r3, [r7, #12]
   81dce:	4013      	ands	r3, r2
   81dd0:	2b00      	cmp	r3, #0
   81dd2:	d01c      	beq.n	81e0e <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81dd4:	4a17      	ldr	r2, [pc, #92]	; (81e34 <pio_handler_process+0xb0>)
   81dd6:	68bb      	ldr	r3, [r7, #8]
   81dd8:	011b      	lsls	r3, r3, #4
   81dda:	4413      	add	r3, r2
   81ddc:	330c      	adds	r3, #12
   81dde:	681b      	ldr	r3, [r3, #0]
   81de0:	4914      	ldr	r1, [pc, #80]	; (81e34 <pio_handler_process+0xb0>)
   81de2:	68ba      	ldr	r2, [r7, #8]
   81de4:	0112      	lsls	r2, r2, #4
   81de6:	440a      	add	r2, r1
   81de8:	6810      	ldr	r0, [r2, #0]
   81dea:	4912      	ldr	r1, [pc, #72]	; (81e34 <pio_handler_process+0xb0>)
   81dec:	68ba      	ldr	r2, [r7, #8]
   81dee:	0112      	lsls	r2, r2, #4
   81df0:	440a      	add	r2, r1
   81df2:	3204      	adds	r2, #4
   81df4:	6812      	ldr	r2, [r2, #0]
   81df6:	4611      	mov	r1, r2
   81df8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81dfa:	4a0e      	ldr	r2, [pc, #56]	; (81e34 <pio_handler_process+0xb0>)
   81dfc:	68bb      	ldr	r3, [r7, #8]
   81dfe:	011b      	lsls	r3, r3, #4
   81e00:	4413      	add	r3, r2
   81e02:	3304      	adds	r3, #4
   81e04:	681b      	ldr	r3, [r3, #0]
   81e06:	43db      	mvns	r3, r3
   81e08:	68fa      	ldr	r2, [r7, #12]
   81e0a:	4013      	ands	r3, r2
   81e0c:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   81e0e:	68bb      	ldr	r3, [r7, #8]
   81e10:	3301      	adds	r3, #1
   81e12:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
   81e14:	68bb      	ldr	r3, [r7, #8]
   81e16:	2b06      	cmp	r3, #6
   81e18:	d803      	bhi.n	81e22 <pio_handler_process+0x9e>
		while (status != 0) {
   81e1a:	68fb      	ldr	r3, [r7, #12]
   81e1c:	2b00      	cmp	r3, #0
   81e1e:	d1c7      	bne.n	81db0 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   81e20:	e000      	b.n	81e24 <pio_handler_process+0xa0>
				break;
   81e22:	bf00      	nop
}
   81e24:	bf00      	nop
   81e26:	3710      	adds	r7, #16
   81e28:	46bd      	mov	sp, r7
   81e2a:	bd80      	pop	{r7, pc}
   81e2c:	00081aab 	.word	0x00081aab
   81e30:	00081ac1 	.word	0x00081ac1
   81e34:	20001218 	.word	0x20001218

00081e38 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81e38:	b580      	push	{r7, lr}
   81e3a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   81e3c:	210a      	movs	r1, #10
   81e3e:	4802      	ldr	r0, [pc, #8]	; (81e48 <PIOA_Handler+0x10>)
   81e40:	4b02      	ldr	r3, [pc, #8]	; (81e4c <PIOA_Handler+0x14>)
   81e42:	4798      	blx	r3
}
   81e44:	bf00      	nop
   81e46:	bd80      	pop	{r7, pc}
   81e48:	400e0c00 	.word	0x400e0c00
   81e4c:	00081d85 	.word	0x00081d85

00081e50 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81e50:	b580      	push	{r7, lr}
   81e52:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   81e54:	210b      	movs	r1, #11
   81e56:	4802      	ldr	r0, [pc, #8]	; (81e60 <PIOB_Handler+0x10>)
   81e58:	4b02      	ldr	r3, [pc, #8]	; (81e64 <PIOB_Handler+0x14>)
   81e5a:	4798      	blx	r3
}
   81e5c:	bf00      	nop
   81e5e:	bd80      	pop	{r7, pc}
   81e60:	400e0e00 	.word	0x400e0e00
   81e64:	00081d85 	.word	0x00081d85

00081e68 <pmc_switch_mck_to_mainck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
   81e68:	b480      	push	{r7}
   81e6a:	b085      	sub	sp, #20
   81e6c:	af00      	add	r7, sp, #0
   81e6e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81e70:	4b1c      	ldr	r3, [pc, #112]	; (81ee4 <pmc_switch_mck_to_mainck+0x7c>)
   81e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81e74:	f023 0303 	bic.w	r3, r3, #3
   81e78:	4a1a      	ldr	r2, [pc, #104]	; (81ee4 <pmc_switch_mck_to_mainck+0x7c>)
   81e7a:	f043 0301 	orr.w	r3, r3, #1
   81e7e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81e80:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81e84:	60fb      	str	r3, [r7, #12]
   81e86:	e007      	b.n	81e98 <pmc_switch_mck_to_mainck+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81e88:	68fb      	ldr	r3, [r7, #12]
   81e8a:	2b00      	cmp	r3, #0
   81e8c:	d101      	bne.n	81e92 <pmc_switch_mck_to_mainck+0x2a>
			return 1;
   81e8e:	2301      	movs	r3, #1
   81e90:	e023      	b.n	81eda <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   81e92:	68fb      	ldr	r3, [r7, #12]
   81e94:	3b01      	subs	r3, #1
   81e96:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81e98:	4b12      	ldr	r3, [pc, #72]	; (81ee4 <pmc_switch_mck_to_mainck+0x7c>)
   81e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81e9c:	f003 0308 	and.w	r3, r3, #8
   81ea0:	2b00      	cmp	r3, #0
   81ea2:	d0f1      	beq.n	81e88 <pmc_switch_mck_to_mainck+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81ea4:	4b0f      	ldr	r3, [pc, #60]	; (81ee4 <pmc_switch_mck_to_mainck+0x7c>)
   81ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81ea8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   81eac:	490d      	ldr	r1, [pc, #52]	; (81ee4 <pmc_switch_mck_to_mainck+0x7c>)
   81eae:	687b      	ldr	r3, [r7, #4]
   81eb0:	4313      	orrs	r3, r2
   81eb2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81eb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81eb8:	60fb      	str	r3, [r7, #12]
   81eba:	e007      	b.n	81ecc <pmc_switch_mck_to_mainck+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81ebc:	68fb      	ldr	r3, [r7, #12]
   81ebe:	2b00      	cmp	r3, #0
   81ec0:	d101      	bne.n	81ec6 <pmc_switch_mck_to_mainck+0x5e>
			return 1;
   81ec2:	2301      	movs	r3, #1
   81ec4:	e009      	b.n	81eda <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   81ec6:	68fb      	ldr	r3, [r7, #12]
   81ec8:	3b01      	subs	r3, #1
   81eca:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81ecc:	4b05      	ldr	r3, [pc, #20]	; (81ee4 <pmc_switch_mck_to_mainck+0x7c>)
   81ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81ed0:	f003 0308 	and.w	r3, r3, #8
   81ed4:	2b00      	cmp	r3, #0
   81ed6:	d0f1      	beq.n	81ebc <pmc_switch_mck_to_mainck+0x54>
		}
	}

	return 0;
   81ed8:	2300      	movs	r3, #0
}
   81eda:	4618      	mov	r0, r3
   81edc:	3714      	adds	r7, #20
   81ede:	46bd      	mov	sp, r7
   81ee0:	bc80      	pop	{r7}
   81ee2:	4770      	bx	lr
   81ee4:	400e0400 	.word	0x400e0400

00081ee8 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   81ee8:	b480      	push	{r7}
   81eea:	b085      	sub	sp, #20
   81eec:	af00      	add	r7, sp, #0
   81eee:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81ef0:	4b1c      	ldr	r3, [pc, #112]	; (81f64 <pmc_switch_mck_to_pllack+0x7c>)
   81ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81ef4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   81ef8:	491a      	ldr	r1, [pc, #104]	; (81f64 <pmc_switch_mck_to_pllack+0x7c>)
   81efa:	687b      	ldr	r3, [r7, #4]
   81efc:	4313      	orrs	r3, r2
   81efe:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81f00:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81f04:	60fb      	str	r3, [r7, #12]
   81f06:	e007      	b.n	81f18 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81f08:	68fb      	ldr	r3, [r7, #12]
   81f0a:	2b00      	cmp	r3, #0
   81f0c:	d101      	bne.n	81f12 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   81f0e:	2301      	movs	r3, #1
   81f10:	e023      	b.n	81f5a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   81f12:	68fb      	ldr	r3, [r7, #12]
   81f14:	3b01      	subs	r3, #1
   81f16:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81f18:	4b12      	ldr	r3, [pc, #72]	; (81f64 <pmc_switch_mck_to_pllack+0x7c>)
   81f1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81f1c:	f003 0308 	and.w	r3, r3, #8
   81f20:	2b00      	cmp	r3, #0
   81f22:	d0f1      	beq.n	81f08 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81f24:	4b0f      	ldr	r3, [pc, #60]	; (81f64 <pmc_switch_mck_to_pllack+0x7c>)
   81f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81f28:	f023 0303 	bic.w	r3, r3, #3
   81f2c:	4a0d      	ldr	r2, [pc, #52]	; (81f64 <pmc_switch_mck_to_pllack+0x7c>)
   81f2e:	f043 0302 	orr.w	r3, r3, #2
   81f32:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81f34:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81f38:	60fb      	str	r3, [r7, #12]
   81f3a:	e007      	b.n	81f4c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81f3c:	68fb      	ldr	r3, [r7, #12]
   81f3e:	2b00      	cmp	r3, #0
   81f40:	d101      	bne.n	81f46 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   81f42:	2301      	movs	r3, #1
   81f44:	e009      	b.n	81f5a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   81f46:	68fb      	ldr	r3, [r7, #12]
   81f48:	3b01      	subs	r3, #1
   81f4a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81f4c:	4b05      	ldr	r3, [pc, #20]	; (81f64 <pmc_switch_mck_to_pllack+0x7c>)
   81f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81f50:	f003 0308 	and.w	r3, r3, #8
   81f54:	2b00      	cmp	r3, #0
   81f56:	d0f1      	beq.n	81f3c <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   81f58:	2300      	movs	r3, #0
}
   81f5a:	4618      	mov	r0, r3
   81f5c:	3714      	adds	r7, #20
   81f5e:	46bd      	mov	sp, r7
   81f60:	bc80      	pop	{r7}
   81f62:	4770      	bx	lr
   81f64:	400e0400 	.word	0x400e0400

00081f68 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   81f68:	b480      	push	{r7}
   81f6a:	b083      	sub	sp, #12
   81f6c:	af00      	add	r7, sp, #0
   81f6e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   81f70:	687b      	ldr	r3, [r7, #4]
   81f72:	2b01      	cmp	r3, #1
   81f74:	d107      	bne.n	81f86 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   81f76:	4b08      	ldr	r3, [pc, #32]	; (81f98 <pmc_switch_sclk_to_32kxtal+0x30>)
   81f78:	689b      	ldr	r3, [r3, #8]
   81f7a:	4a07      	ldr	r2, [pc, #28]	; (81f98 <pmc_switch_sclk_to_32kxtal+0x30>)
   81f7c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81f80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81f84:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   81f86:	4b04      	ldr	r3, [pc, #16]	; (81f98 <pmc_switch_sclk_to_32kxtal+0x30>)
   81f88:	4a04      	ldr	r2, [pc, #16]	; (81f9c <pmc_switch_sclk_to_32kxtal+0x34>)
   81f8a:	601a      	str	r2, [r3, #0]
}
   81f8c:	bf00      	nop
   81f8e:	370c      	adds	r7, #12
   81f90:	46bd      	mov	sp, r7
   81f92:	bc80      	pop	{r7}
   81f94:	4770      	bx	lr
   81f96:	bf00      	nop
   81f98:	400e1210 	.word	0x400e1210
   81f9c:	a5000008 	.word	0xa5000008

00081fa0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   81fa0:	b480      	push	{r7}
   81fa2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   81fa4:	4b09      	ldr	r3, [pc, #36]	; (81fcc <pmc_osc_is_ready_32kxtal+0x2c>)
   81fa6:	695b      	ldr	r3, [r3, #20]
   81fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   81fac:	2b00      	cmp	r3, #0
   81fae:	d007      	beq.n	81fc0 <pmc_osc_is_ready_32kxtal+0x20>
   81fb0:	4b07      	ldr	r3, [pc, #28]	; (81fd0 <pmc_osc_is_ready_32kxtal+0x30>)
   81fb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   81fb8:	2b00      	cmp	r3, #0
   81fba:	d001      	beq.n	81fc0 <pmc_osc_is_ready_32kxtal+0x20>
   81fbc:	2301      	movs	r3, #1
   81fbe:	e000      	b.n	81fc2 <pmc_osc_is_ready_32kxtal+0x22>
   81fc0:	2300      	movs	r3, #0
}
   81fc2:	4618      	mov	r0, r3
   81fc4:	46bd      	mov	sp, r7
   81fc6:	bc80      	pop	{r7}
   81fc8:	4770      	bx	lr
   81fca:	bf00      	nop
   81fcc:	400e1210 	.word	0x400e1210
   81fd0:	400e0400 	.word	0x400e0400

00081fd4 <pmc_osc_enable_fastrc>:
 * \brief Enable fast RC oscillator.
 *
 * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 */
void pmc_osc_enable_fastrc(uint32_t ul_rc)
{
   81fd4:	b480      	push	{r7}
   81fd6:	b083      	sub	sp, #12
   81fd8:	af00      	add	r7, sp, #0
   81fda:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   81fdc:	4b13      	ldr	r3, [pc, #76]	; (8202c <pmc_osc_enable_fastrc+0x58>)
   81fde:	6a1b      	ldr	r3, [r3, #32]
   81fe0:	4a12      	ldr	r2, [pc, #72]	; (8202c <pmc_osc_enable_fastrc+0x58>)
   81fe2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81fe6:	f043 0308 	orr.w	r3, r3, #8
   81fea:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   81fec:	bf00      	nop
   81fee:	4b0f      	ldr	r3, [pc, #60]	; (8202c <pmc_osc_enable_fastrc+0x58>)
   81ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   81ff6:	2b00      	cmp	r3, #0
   81ff8:	d0f9      	beq.n	81fee <pmc_osc_enable_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81ffa:	4b0c      	ldr	r3, [pc, #48]	; (8202c <pmc_osc_enable_fastrc+0x58>)
   81ffc:	6a1b      	ldr	r3, [r3, #32]
   81ffe:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_rc;
   82006:	687a      	ldr	r2, [r7, #4]
   82008:	4313      	orrs	r3, r2
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8200a:	4a08      	ldr	r2, [pc, #32]	; (8202c <pmc_osc_enable_fastrc+0x58>)
			CKGR_MOR_KEY_PASSWD | ul_rc;
   8200c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82010:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82012:	bf00      	nop
   82014:	4b05      	ldr	r3, [pc, #20]	; (8202c <pmc_osc_enable_fastrc+0x58>)
   82016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   8201c:	2b00      	cmp	r3, #0
   8201e:	d0f9      	beq.n	82014 <pmc_osc_enable_fastrc+0x40>
}
   82020:	bf00      	nop
   82022:	370c      	adds	r7, #12
   82024:	46bd      	mov	sp, r7
   82026:	bc80      	pop	{r7}
   82028:	4770      	bx	lr
   8202a:	bf00      	nop
   8202c:	400e0400 	.word	0x400e0400

00082030 <pmc_osc_is_ready_fastrc>:
 * \brief Check if the main fastrc is ready.
 *
 * \retval 0 Xtal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_fastrc(void)
{
   82030:	b480      	push	{r7}
   82032:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
   82034:	4b03      	ldr	r3, [pc, #12]	; (82044 <pmc_osc_is_ready_fastrc+0x14>)
   82036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
}
   8203c:	4618      	mov	r0, r3
   8203e:	46bd      	mov	sp, r7
   82040:	bc80      	pop	{r7}
   82042:	4770      	bx	lr
   82044:	400e0400 	.word	0x400e0400

00082048 <pmc_osc_enable_main_xtal>:
 * \brief Enable main XTAL oscillator.
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
   82048:	b480      	push	{r7}
   8204a:	b085      	sub	sp, #20
   8204c:	af00      	add	r7, sp, #0
   8204e:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   82050:	4b0f      	ldr	r3, [pc, #60]	; (82090 <pmc_osc_enable_main_xtal+0x48>)
   82052:	6a1b      	ldr	r3, [r3, #32]
   82054:	60fb      	str	r3, [r7, #12]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   82056:	68fb      	ldr	r3, [r7, #12]
   82058:	f023 0303 	bic.w	r3, r3, #3
   8205c:	60fb      	str	r3, [r7, #12]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8205e:	687b      	ldr	r3, [r7, #4]
   82060:	021b      	lsls	r3, r3, #8
   82062:	b29a      	uxth	r2, r3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82064:	68fb      	ldr	r3, [r7, #12]
   82066:	4313      	orrs	r3, r2
   82068:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8206c:	f043 0301 	orr.w	r3, r3, #1
   82070:	60fb      	str	r3, [r7, #12]
	PMC->CKGR_MOR = mor;
   82072:	4a07      	ldr	r2, [pc, #28]	; (82090 <pmc_osc_enable_main_xtal+0x48>)
   82074:	68fb      	ldr	r3, [r7, #12]
   82076:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82078:	bf00      	nop
   8207a:	4b05      	ldr	r3, [pc, #20]	; (82090 <pmc_osc_enable_main_xtal+0x48>)
   8207c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8207e:	f003 0301 	and.w	r3, r3, #1
   82082:	2b00      	cmp	r3, #0
   82084:	d0f9      	beq.n	8207a <pmc_osc_enable_main_xtal+0x32>
}
   82086:	bf00      	nop
   82088:	3714      	adds	r7, #20
   8208a:	46bd      	mov	sp, r7
   8208c:	bc80      	pop	{r7}
   8208e:	4770      	bx	lr
   82090:	400e0400 	.word	0x400e0400

00082094 <pmc_osc_bypass_main_xtal>:

/**
 * \brief Bypass main XTAL.
 */
void pmc_osc_bypass_main_xtal(void)
{
   82094:	b480      	push	{r7}
   82096:	b083      	sub	sp, #12
   82098:	af00      	add	r7, sp, #0
	uint32_t mor = PMC->CKGR_MOR;
   8209a:	4b0a      	ldr	r3, [pc, #40]	; (820c4 <pmc_osc_bypass_main_xtal+0x30>)
   8209c:	6a1b      	ldr	r3, [r3, #32]
   8209e:	607b      	str	r3, [r7, #4]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   820a0:	687b      	ldr	r3, [r7, #4]
   820a2:	f023 0303 	bic.w	r3, r3, #3
   820a6:	607b      	str	r3, [r7, #4]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
   820a8:	687b      	ldr	r3, [r7, #4]
   820aa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   820ae:	f043 0302 	orr.w	r3, r3, #2
   820b2:	607b      	str	r3, [r7, #4]
	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
	PMC->CKGR_MOR = mor;
   820b4:	4a03      	ldr	r2, [pc, #12]	; (820c4 <pmc_osc_bypass_main_xtal+0x30>)
   820b6:	687b      	ldr	r3, [r7, #4]
   820b8:	6213      	str	r3, [r2, #32]
	/* The MOSCXTS in PMC_SR is automatically set */
}
   820ba:	bf00      	nop
   820bc:	370c      	adds	r7, #12
   820be:	46bd      	mov	sp, r7
   820c0:	bc80      	pop	{r7}
   820c2:	4770      	bx	lr
   820c4:	400e0400 	.word	0x400e0400

000820c8 <pmc_osc_is_bypassed_main_xtal>:
 * \brief Check if the main crystal is bypassed.
 *
 * \retval 0 Xtal is bypassed, otherwise not.
 */
uint32_t pmc_osc_is_bypassed_main_xtal(void)
{
   820c8:	b480      	push	{r7}
   820ca:	af00      	add	r7, sp, #0
	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
   820cc:	4b03      	ldr	r3, [pc, #12]	; (820dc <pmc_osc_is_bypassed_main_xtal+0x14>)
   820ce:	6a1b      	ldr	r3, [r3, #32]
   820d0:	f003 0302 	and.w	r3, r3, #2
}
   820d4:	4618      	mov	r0, r3
   820d6:	46bd      	mov	sp, r7
   820d8:	bc80      	pop	{r7}
   820da:	4770      	bx	lr
   820dc:	400e0400 	.word	0x400e0400

000820e0 <pmc_osc_is_ready_main_xtal>:
 * \note If main crystal is bypassed, it's always ready.
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
   820e0:	b480      	push	{r7}
   820e2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   820e4:	4b03      	ldr	r3, [pc, #12]	; (820f4 <pmc_osc_is_ready_main_xtal+0x14>)
   820e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   820e8:	f003 0301 	and.w	r3, r3, #1
}
   820ec:	4618      	mov	r0, r3
   820ee:	46bd      	mov	sp, r7
   820f0:	bc80      	pop	{r7}
   820f2:	4770      	bx	lr
   820f4:	400e0400 	.word	0x400e0400

000820f8 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   820f8:	b480      	push	{r7}
   820fa:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   820fc:	4b03      	ldr	r3, [pc, #12]	; (8210c <pmc_osc_is_ready_mainck+0x14>)
   820fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   82104:	4618      	mov	r0, r3
   82106:	46bd      	mov	sp, r7
   82108:	bc80      	pop	{r7}
   8210a:	4770      	bx	lr
   8210c:	400e0400 	.word	0x400e0400

00082110 <pmc_mainck_osc_select>:
 * \note This function will not enable/disable RC or Main Crystal.
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
   82110:	b480      	push	{r7}
   82112:	b085      	sub	sp, #20
   82114:	af00      	add	r7, sp, #0
   82116:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   82118:	4b0c      	ldr	r3, [pc, #48]	; (8214c <pmc_mainck_osc_select+0x3c>)
   8211a:	6a1b      	ldr	r3, [r3, #32]
   8211c:	60fb      	str	r3, [r7, #12]
	if (ul_xtal_rc) {
   8211e:	687b      	ldr	r3, [r7, #4]
   82120:	2b00      	cmp	r3, #0
   82122:	d004      	beq.n	8212e <pmc_mainck_osc_select+0x1e>
		mor |=  CKGR_MOR_MOSCSEL;
   82124:	68fb      	ldr	r3, [r7, #12]
   82126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   8212a:	60fb      	str	r3, [r7, #12]
   8212c:	e003      	b.n	82136 <pmc_mainck_osc_select+0x26>
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   8212e:	68fb      	ldr	r3, [r7, #12]
   82130:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   82134:	60fb      	str	r3, [r7, #12]
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   82136:	4a05      	ldr	r2, [pc, #20]	; (8214c <pmc_mainck_osc_select+0x3c>)
   82138:	68fb      	ldr	r3, [r7, #12]
   8213a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8213e:	6213      	str	r3, [r2, #32]
}
   82140:	bf00      	nop
   82142:	3714      	adds	r7, #20
   82144:	46bd      	mov	sp, r7
   82146:	bc80      	pop	{r7}
   82148:	4770      	bx	lr
   8214a:	bf00      	nop
   8214c:	400e0400 	.word	0x400e0400

00082150 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   82150:	b480      	push	{r7}
   82152:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82154:	4b03      	ldr	r3, [pc, #12]	; (82164 <pmc_disable_pllack+0x14>)
   82156:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8215a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   8215c:	bf00      	nop
   8215e:	46bd      	mov	sp, r7
   82160:	bc80      	pop	{r7}
   82162:	4770      	bx	lr
   82164:	400e0400 	.word	0x400e0400

00082168 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   82168:	b480      	push	{r7}
   8216a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8216c:	4b03      	ldr	r3, [pc, #12]	; (8217c <pmc_is_locked_pllack+0x14>)
   8216e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82170:	f003 0302 	and.w	r3, r3, #2
}
   82174:	4618      	mov	r0, r3
   82176:	46bd      	mov	sp, r7
   82178:	bc80      	pop	{r7}
   8217a:	4770      	bx	lr
   8217c:	400e0400 	.word	0x400e0400

00082180 <pmc_disable_upll_clock>:

/**
 * \brief Disable UPLL clock.
 */
void pmc_disable_upll_clock(void)
{
   82180:	b480      	push	{r7}
   82182:	af00      	add	r7, sp, #0
	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   82184:	4b04      	ldr	r3, [pc, #16]	; (82198 <pmc_disable_upll_clock+0x18>)
   82186:	69db      	ldr	r3, [r3, #28]
   82188:	4a03      	ldr	r2, [pc, #12]	; (82198 <pmc_disable_upll_clock+0x18>)
   8218a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8218e:	61d3      	str	r3, [r2, #28]
}
   82190:	bf00      	nop
   82192:	46bd      	mov	sp, r7
   82194:	bc80      	pop	{r7}
   82196:	4770      	bx	lr
   82198:	400e0400 	.word	0x400e0400

0008219c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   8219c:	b480      	push	{r7}
   8219e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   821a0:	4b03      	ldr	r3, [pc, #12]	; (821b0 <pmc_is_locked_upll+0x14>)
   821a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   821a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   821a8:	4618      	mov	r0, r3
   821aa:	46bd      	mov	sp, r7
   821ac:	bc80      	pop	{r7}
   821ae:	4770      	bx	lr
   821b0:	400e0400 	.word	0x400e0400

000821b4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   821b4:	b480      	push	{r7}
   821b6:	b083      	sub	sp, #12
   821b8:	af00      	add	r7, sp, #0
   821ba:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   821bc:	687b      	ldr	r3, [r7, #4]
   821be:	2b1d      	cmp	r3, #29
   821c0:	d901      	bls.n	821c6 <pmc_enable_periph_clk+0x12>
		return 1;
   821c2:	2301      	movs	r3, #1
   821c4:	e015      	b.n	821f2 <pmc_enable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   821c6:	687b      	ldr	r3, [r7, #4]
   821c8:	2b1f      	cmp	r3, #31
   821ca:	d811      	bhi.n	821f0 <pmc_enable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   821cc:	4b0b      	ldr	r3, [pc, #44]	; (821fc <pmc_enable_periph_clk+0x48>)
   821ce:	699a      	ldr	r2, [r3, #24]
   821d0:	2101      	movs	r1, #1
   821d2:	687b      	ldr	r3, [r7, #4]
   821d4:	fa01 f303 	lsl.w	r3, r1, r3
   821d8:	401a      	ands	r2, r3
   821da:	2101      	movs	r1, #1
   821dc:	687b      	ldr	r3, [r7, #4]
   821de:	fa01 f303 	lsl.w	r3, r1, r3
   821e2:	429a      	cmp	r2, r3
   821e4:	d004      	beq.n	821f0 <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER0 = 1 << ul_id;
   821e6:	2201      	movs	r2, #1
   821e8:	687b      	ldr	r3, [r7, #4]
   821ea:	409a      	lsls	r2, r3
   821ec:	4b03      	ldr	r3, [pc, #12]	; (821fc <pmc_enable_periph_clk+0x48>)
   821ee:	611a      	str	r2, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   821f0:	2300      	movs	r3, #0
}
   821f2:	4618      	mov	r0, r3
   821f4:	370c      	adds	r7, #12
   821f6:	46bd      	mov	sp, r7
   821f8:	bc80      	pop	{r7}
   821fa:	4770      	bx	lr
   821fc:	400e0400 	.word	0x400e0400

00082200 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
   82200:	b480      	push	{r7}
   82202:	b083      	sub	sp, #12
   82204:	af00      	add	r7, sp, #0
   82206:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   82208:	687b      	ldr	r3, [r7, #4]
   8220a:	2b1d      	cmp	r3, #29
   8220c:	d901      	bls.n	82212 <pmc_disable_periph_clk+0x12>
		return 1;
   8220e:	2301      	movs	r3, #1
   82210:	e015      	b.n	8223e <pmc_disable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   82212:	687b      	ldr	r3, [r7, #4]
   82214:	2b1f      	cmp	r3, #31
   82216:	d811      	bhi.n	8223c <pmc_disable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   82218:	4b0b      	ldr	r3, [pc, #44]	; (82248 <pmc_disable_periph_clk+0x48>)
   8221a:	699a      	ldr	r2, [r3, #24]
   8221c:	2101      	movs	r1, #1
   8221e:	687b      	ldr	r3, [r7, #4]
   82220:	fa01 f303 	lsl.w	r3, r1, r3
   82224:	401a      	ands	r2, r3
   82226:	2101      	movs	r1, #1
   82228:	687b      	ldr	r3, [r7, #4]
   8222a:	fa01 f303 	lsl.w	r3, r1, r3
   8222e:	429a      	cmp	r2, r3
   82230:	d104      	bne.n	8223c <pmc_disable_periph_clk+0x3c>
			PMC->PMC_PCDR0 = 1 << ul_id;
   82232:	2201      	movs	r2, #1
   82234:	687b      	ldr	r3, [r7, #4]
   82236:	409a      	lsls	r2, r3
   82238:	4b03      	ldr	r3, [pc, #12]	; (82248 <pmc_disable_periph_clk+0x48>)
   8223a:	615a      	str	r2, [r3, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   8223c:	2300      	movs	r3, #0
}
   8223e:	4618      	mov	r0, r3
   82240:	370c      	adds	r7, #12
   82242:	46bd      	mov	sp, r7
   82244:	bc80      	pop	{r7}
   82246:	4770      	bx	lr
   82248:	400e0400 	.word	0x400e0400

0008224c <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
   8224c:	b480      	push	{r7}
   8224e:	b083      	sub	sp, #12
   82250:	af00      	add	r7, sp, #0
   82252:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   82254:	4a05      	ldr	r2, [pc, #20]	; (8226c <pmc_enable_pck+0x20>)
   82256:	f44f 7180 	mov.w	r1, #256	; 0x100
   8225a:	687b      	ldr	r3, [r7, #4]
   8225c:	fa01 f303 	lsl.w	r3, r1, r3
   82260:	6013      	str	r3, [r2, #0]
}
   82262:	bf00      	nop
   82264:	370c      	adds	r7, #12
   82266:	46bd      	mov	sp, r7
   82268:	bc80      	pop	{r7}
   8226a:	4770      	bx	lr
   8226c:	400e0400 	.word	0x400e0400

00082270 <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
   82270:	b480      	push	{r7}
   82272:	b083      	sub	sp, #12
   82274:	af00      	add	r7, sp, #0
   82276:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   82278:	687b      	ldr	r3, [r7, #4]
   8227a:	f3c3 0312 	ubfx	r3, r3, #0, #19
   8227e:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
   82280:	4b05      	ldr	r3, [pc, #20]	; (82298 <pmc_set_fast_startup_input+0x28>)
   82282:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82284:	4904      	ldr	r1, [pc, #16]	; (82298 <pmc_set_fast_startup_input+0x28>)
   82286:	687b      	ldr	r3, [r7, #4]
   82288:	4313      	orrs	r3, r2
   8228a:	670b      	str	r3, [r1, #112]	; 0x70
}
   8228c:	bf00      	nop
   8228e:	370c      	adds	r7, #12
   82290:	46bd      	mov	sp, r7
   82292:	bc80      	pop	{r7}
   82294:	4770      	bx	lr
   82296:	bf00      	nop
   82298:	400e0400 	.word	0x400e0400

0008229c <pmc_enable_waitmode>:
/**
 * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
 * (LPM bit = 1)
 */
void pmc_enable_waitmode(void)
{
   8229c:	b480      	push	{r7}
   8229e:	b083      	sub	sp, #12
   822a0:	af00      	add	r7, sp, #0
	uint32_t i;

	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
   822a2:	4b12      	ldr	r3, [pc, #72]	; (822ec <pmc_enable_waitmode+0x50>)
   822a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   822a6:	4a11      	ldr	r2, [pc, #68]	; (822ec <pmc_enable_waitmode+0x50>)
   822a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   822ac:	6713      	str	r3, [r2, #112]	; 0x70
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
   822ae:	4b10      	ldr	r3, [pc, #64]	; (822f0 <pmc_enable_waitmode+0x54>)
   822b0:	691b      	ldr	r3, [r3, #16]
   822b2:	4a0f      	ldr	r2, [pc, #60]	; (822f0 <pmc_enable_waitmode+0x54>)
   822b4:	f023 0304 	bic.w	r3, r3, #4
   822b8:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfe");
   822ba:	bf20      	wfe
	__WFE();

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
   822bc:	2300      	movs	r3, #0
   822be:	607b      	str	r3, [r7, #4]
   822c0:	e003      	b.n	822ca <pmc_enable_waitmode+0x2e>
  __ASM volatile ("nop");
   822c2:	bf00      	nop
   822c4:	687b      	ldr	r3, [r7, #4]
   822c6:	3301      	adds	r3, #1
   822c8:	607b      	str	r3, [r7, #4]
   822ca:	687b      	ldr	r3, [r7, #4]
   822cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   822d0:	d3f7      	bcc.n	822c2 <pmc_enable_waitmode+0x26>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
   822d2:	bf00      	nop
   822d4:	4b05      	ldr	r3, [pc, #20]	; (822ec <pmc_enable_waitmode+0x50>)
   822d6:	6a1b      	ldr	r3, [r3, #32]
   822d8:	f003 0308 	and.w	r3, r3, #8
   822dc:	2b00      	cmp	r3, #0
   822de:	d0f9      	beq.n	822d4 <pmc_enable_waitmode+0x38>

}
   822e0:	bf00      	nop
   822e2:	370c      	adds	r7, #12
   822e4:	46bd      	mov	sp, r7
   822e6:	bc80      	pop	{r7}
   822e8:	4770      	bx	lr
   822ea:	bf00      	nop
   822ec:	400e0400 	.word	0x400e0400
   822f0:	e000ed00 	.word	0xe000ed00

000822f4 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
   822f4:	b5b0      	push	{r4, r5, r7, lr}
   822f6:	b09c      	sub	sp, #112	; 0x70
   822f8:	af00      	add	r7, sp, #0
   822fa:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
   822fc:	687b      	ldr	r3, [r7, #4]
   822fe:	3b01      	subs	r3, #1
   82300:	2b04      	cmp	r3, #4
   82302:	f200 81d9 	bhi.w	826b8 <pmc_sleep+0x3c4>
   82306:	a201      	add	r2, pc, #4	; (adr r2, 8230c <pmc_sleep+0x18>)
   82308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8230c:	00082321 	.word	0x00082321
   82310:	00082321 	.word	0x00082321
   82314:	00082353 	.word	0x00082353
   82318:	00082353 	.word	0x00082353
   8231c:	0008269d 	.word	0x0008269d
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
		cpu_irq_enable();
		__WFI();
		break;
#else
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
   82320:	4b80      	ldr	r3, [pc, #512]	; (82524 <pmc_sleep+0x230>)
   82322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82324:	4a7f      	ldr	r2, [pc, #508]	; (82524 <pmc_sleep+0x230>)
   82326:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   8232a:	6713      	str	r3, [r2, #112]	; 0x70
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   8232c:	4b7e      	ldr	r3, [pc, #504]	; (82528 <pmc_sleep+0x234>)
   8232e:	691b      	ldr	r3, [r3, #16]
   82330:	4a7d      	ldr	r2, [pc, #500]	; (82528 <pmc_sleep+0x234>)
   82332:	f023 0304 	bic.w	r3, r3, #4
   82336:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   82338:	4b7c      	ldr	r3, [pc, #496]	; (8252c <pmc_sleep+0x238>)
   8233a:	2201      	movs	r2, #1
   8233c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   8233e:	f3bf 8f5f 	dmb	sy
   82342:	b662      	cpsie	i
		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI)
   82344:	687b      	ldr	r3, [r7, #4]
   82346:	2b02      	cmp	r3, #2
   82348:	d101      	bne.n	8234e <pmc_sleep+0x5a>
  __ASM volatile ("wfi");
   8234a:	bf30      	wfi
			__WFI();
		else
			__WFE();
		break;
   8234c:	e1b4      	b.n	826b8 <pmc_sleep+0x3c4>
  __ASM volatile ("wfe");
   8234e:	bf20      	wfe
   82350:	e1b2      	b.n	826b8 <pmc_sleep+0x3c4>
  __ASM volatile ("cpsid i");
   82352:	b672      	cpsid	i
  __ASM volatile ("dmb");
   82354:	f3bf 8f5f 	dmb	sy
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
#endif
		cpu_irq_disable();
   82358:	4b74      	ldr	r3, [pc, #464]	; (8252c <pmc_sleep+0x238>)
   8235a:	2200      	movs	r2, #0
   8235c:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
   8235e:	4b74      	ldr	r3, [pc, #464]	; (82530 <pmc_sleep+0x23c>)
   82360:	2201      	movs	r2, #1
   82362:	701a      	strb	r2, [r3, #0]
		/* Backup the sub-system 1 status and stop sub-system 1 */
		uint32_t cpclk_backup = PMC->PMC_SCSR &
				(PMC_SCSR_CPCK | PMC_SCSR_CPBMCK);
		PMC->PMC_SCDR = cpclk_backup | PMC_SCDR_CPKEY_PASSWD;
#endif
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
   82364:	687b      	ldr	r3, [r7, #4]
   82366:	2b04      	cmp	r3, #4
   82368:	bf0c      	ite	eq
   8236a:	2301      	moveq	r3, #1
   8236c:	2300      	movne	r3, #0
   8236e:	b2da      	uxtb	r2, r3
   82370:	f107 0320 	add.w	r3, r7, #32
   82374:	64fb      	str	r3, [r7, #76]	; 0x4c
   82376:	f107 031c 	add.w	r3, r7, #28
   8237a:	64bb      	str	r3, [r7, #72]	; 0x48
   8237c:	f107 0318 	add.w	r3, r7, #24
   82380:	647b      	str	r3, [r7, #68]	; 0x44
   82382:	f107 0314 	add.w	r3, r7, #20
   82386:	643b      	str	r3, [r7, #64]	; 0x40
   82388:	f107 0310 	add.w	r3, r7, #16
   8238c:	63fb      	str	r3, [r7, #60]	; 0x3c
   8238e:	f107 030c 	add.w	r3, r7, #12
   82392:	63bb      	str	r3, [r7, #56]	; 0x38
   82394:	4613      	mov	r3, r2
   82396:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t mor  = PMC->CKGR_MOR;
   8239a:	4b62      	ldr	r3, [pc, #392]	; (82524 <pmc_sleep+0x230>)
   8239c:	6a1b      	ldr	r3, [r3, #32]
   8239e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t mckr = PMC->PMC_MCKR;
   823a0:	4b60      	ldr	r3, [pc, #384]	; (82524 <pmc_sleep+0x230>)
   823a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   823a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fmr  = EFC0->EEFC_FMR;
   823a6:	4b63      	ldr	r3, [pc, #396]	; (82534 <pmc_sleep+0x240>)
   823a8:	681b      	ldr	r3, [r3, #0]
   823aa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fmr1 = EFC1->EEFC_FMR;
   823ac:	4b62      	ldr	r3, [pc, #392]	; (82538 <pmc_sleep+0x244>)
   823ae:	681b      	ldr	r3, [r3, #0]
   823b0:	627b      	str	r3, [r7, #36]	; 0x24
	if (p_osc_setting) {
   823b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   823b4:	2b00      	cmp	r3, #0
   823b6:	d002      	beq.n	823be <pmc_sleep+0xca>
		*p_osc_setting = mor;
   823b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   823ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   823bc:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
   823be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   823c0:	2b00      	cmp	r3, #0
   823c2:	d003      	beq.n	823cc <pmc_sleep+0xd8>
		*p_pll0_setting = PMC->CKGR_PLLAR;
   823c4:	4b57      	ldr	r3, [pc, #348]	; (82524 <pmc_sleep+0x230>)
   823c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   823c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   823ca:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
   823cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   823ce:	2b00      	cmp	r3, #0
   823d0:	d003      	beq.n	823da <pmc_sleep+0xe6>
		*p_pll1_setting = PMC->CKGR_UCKR;
   823d2:	4b54      	ldr	r3, [pc, #336]	; (82524 <pmc_sleep+0x230>)
   823d4:	69da      	ldr	r2, [r3, #28]
   823d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   823d8:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
   823da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   823dc:	2b00      	cmp	r3, #0
   823de:	d002      	beq.n	823e6 <pmc_sleep+0xf2>
		*p_mck_setting  = mckr;
   823e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   823e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   823e4:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
   823e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   823e8:	2b00      	cmp	r3, #0
   823ea:	d002      	beq.n	823f2 <pmc_sleep+0xfe>
		*p_fmr_setting  = fmr;
   823ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   823ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
   823f0:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting1) {
   823f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   823f4:	2b00      	cmp	r3, #0
   823f6:	d002      	beq.n	823fe <pmc_sleep+0x10a>
		*p_fmr_setting1 = fmr1;
   823f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   823fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   823fc:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   823fe:	4a49      	ldr	r2, [pc, #292]	; (82524 <pmc_sleep+0x230>)
   82400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   82402:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82406:	f043 0308 	orr.w	r3, r3, #8
   8240a:	6213      	str	r3, [r2, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
   8240c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8240e:	f003 0303 	and.w	r3, r3, #3
   82412:	2b01      	cmp	r3, #1
   82414:	d90e      	bls.n	82434 <pmc_sleep+0x140>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
   82416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82418:	f023 0303 	bic.w	r3, r3, #3
   8241c:	f043 0301 	orr.w	r3, r3, #1
   82420:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   82422:	4a40      	ldr	r2, [pc, #256]	; (82524 <pmc_sleep+0x230>)
   82424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82426:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   82428:	4b3e      	ldr	r3, [pc, #248]	; (82524 <pmc_sleep+0x230>)
   8242a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8242c:	f003 0308 	and.w	r3, r3, #8
   82430:	2b00      	cmp	r3, #0
   82432:	d0f9      	beq.n	82428 <pmc_sleep+0x134>
	if (mckr & PMC_MCKR_PRES_Msk) {
   82434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82436:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8243a:	2b00      	cmp	r3, #0
   8243c:	d00c      	beq.n	82458 <pmc_sleep+0x164>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
   8243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82444:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   82446:	4a37      	ldr	r2, [pc, #220]	; (82524 <pmc_sleep+0x230>)
   82448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8244a:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   8244c:	4b35      	ldr	r3, [pc, #212]	; (82524 <pmc_sleep+0x230>)
   8244e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82450:	f003 0308 	and.w	r3, r3, #8
   82454:	2b00      	cmp	r3, #0
   82456:	d0f9      	beq.n	8244c <pmc_sleep+0x158>
	pmc_disable_pllack();
   82458:	4b38      	ldr	r3, [pc, #224]	; (8253c <pmc_sleep+0x248>)
   8245a:	4798      	blx	r3
	pmc_disable_upll_clock();
   8245c:	4b38      	ldr	r3, [pc, #224]	; (82540 <pmc_sleep+0x24c>)
   8245e:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82460:	4b30      	ldr	r3, [pc, #192]	; (82524 <pmc_sleep+0x230>)
   82462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82468:	2b00      	cmp	r3, #0
   8246a:	d0f9      	beq.n	82460 <pmc_sleep+0x16c>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   8246c:	4b2d      	ldr	r3, [pc, #180]	; (82524 <pmc_sleep+0x230>)
   8246e:	6a1b      	ldr	r3, [r3, #32]
   82470:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   82474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82478:	4a2a      	ldr	r2, [pc, #168]	; (82524 <pmc_sleep+0x230>)
   8247a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8247e:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   82480:	4b28      	ldr	r3, [pc, #160]	; (82524 <pmc_sleep+0x230>)
   82482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   82488:	2b00      	cmp	r3, #0
   8248a:	d0f9      	beq.n	82480 <pmc_sleep+0x18c>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
   8248c:	4a29      	ldr	r2, [pc, #164]	; (82534 <pmc_sleep+0x240>)
   8248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   82490:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   82494:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
   82496:	4a28      	ldr	r2, [pc, #160]	; (82538 <pmc_sleep+0x244>)
   82498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8249a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   8249e:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
   824a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   824a4:	2b00      	cmp	r3, #0
   824a6:	d009      	beq.n	824bc <pmc_sleep+0x1c8>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   824a8:	4b1e      	ldr	r3, [pc, #120]	; (82524 <pmc_sleep+0x230>)
   824aa:	6a1b      	ldr	r3, [r3, #32]
   824ac:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   824b0:	f023 0301 	bic.w	r3, r3, #1
   824b4:	4a1b      	ldr	r2, [pc, #108]	; (82524 <pmc_sleep+0x230>)
   824b6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   824ba:	6213      	str	r3, [r2, #32]
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
   824bc:	4b1b      	ldr	r3, [pc, #108]	; (8252c <pmc_sleep+0x238>)
   824be:	2201      	movs	r2, #1
   824c0:	701a      	strb	r2, [r3, #0]
   824c2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   824c6:	b662      	cpsie	i

		pmc_enable_waitmode();
   824c8:	4b1e      	ldr	r3, [pc, #120]	; (82544 <pmc_sleep+0x250>)
   824ca:	4798      	blx	r3
  __ASM volatile ("cpsid i");
   824cc:	b672      	cpsid	i
   824ce:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
   824d2:	4b16      	ldr	r3, [pc, #88]	; (8252c <pmc_sleep+0x238>)
   824d4:	2200      	movs	r2, #0
   824d6:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
   824d8:	6a3d      	ldr	r5, [r7, #32]
   824da:	69fc      	ldr	r4, [r7, #28]
   824dc:	69b8      	ldr	r0, [r7, #24]
   824de:	6979      	ldr	r1, [r7, #20]
   824e0:	693a      	ldr	r2, [r7, #16]
   824e2:	68fb      	ldr	r3, [r7, #12]
   824e4:	66fd      	str	r5, [r7, #108]	; 0x6c
   824e6:	66bc      	str	r4, [r7, #104]	; 0x68
   824e8:	6678      	str	r0, [r7, #100]	; 0x64
   824ea:	6639      	str	r1, [r7, #96]	; 0x60
   824ec:	65fa      	str	r2, [r7, #92]	; 0x5c
   824ee:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t pll_sr = 0;
   824f0:	2300      	movs	r3, #0
   824f2:	657b      	str	r3, [r7, #84]	; 0x54
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
   824f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   824f6:	f003 0302 	and.w	r3, r3, #2
   824fa:	2b00      	cmp	r3, #0
   824fc:	d028      	beq.n	82550 <pmc_sleep+0x25c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   824fe:	4b09      	ldr	r3, [pc, #36]	; (82524 <pmc_sleep+0x230>)
   82500:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82502:	4a11      	ldr	r2, [pc, #68]	; (82548 <pmc_sleep+0x254>)
   82504:	401a      	ands	r2, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82506:	4907      	ldr	r1, [pc, #28]	; (82524 <pmc_sleep+0x230>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82508:	4b10      	ldr	r3, [pc, #64]	; (8254c <pmc_sleep+0x258>)
   8250a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8250c:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   8250e:	4b05      	ldr	r3, [pc, #20]	; (82524 <pmc_sleep+0x230>)
   82510:	6a1b      	ldr	r3, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
   82512:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82516:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   8251a:	4a02      	ldr	r2, [pc, #8]	; (82524 <pmc_sleep+0x230>)
				| CKGR_MOR_KEY_PASSWD;
   8251c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82520:	6213      	str	r3, [r2, #32]
   82522:	e050      	b.n	825c6 <pmc_sleep+0x2d2>
   82524:	400e0400 	.word	0x400e0400
   82528:	e000ed00 	.word	0xe000ed00
   8252c:	20000294 	.word	0x20000294
   82530:	20001288 	.word	0x20001288
   82534:	400e0800 	.word	0x400e0800
   82538:	400e0a00 	.word	0x400e0a00
   8253c:	00082151 	.word	0x00082151
   82540:	00082181 	.word	0x00082181
   82544:	0008229d 	.word	0x0008229d
   82548:	fec8fffc 	.word	0xfec8fffc
   8254c:	01370002 	.word	0x01370002
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
   82550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   82552:	f003 0301 	and.w	r3, r3, #1
   82556:	2b00      	cmp	r3, #0
   82558:	d035      	beq.n	825c6 <pmc_sleep+0x2d2>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
   8255a:	4b59      	ldr	r3, [pc, #356]	; (826c0 <pmc_sleep+0x3cc>)
   8255c:	6a1b      	ldr	r3, [r3, #32]
   8255e:	f003 0301 	and.w	r3, r3, #1
   82562:	2b00      	cmp	r3, #0
   82564:	d111      	bne.n	8258a <pmc_sleep+0x296>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82566:	4b56      	ldr	r3, [pc, #344]	; (826c0 <pmc_sleep+0x3cc>)
   82568:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   8256a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8256e:	f023 0303 	bic.w	r3, r3, #3
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82572:	4a53      	ldr	r2, [pc, #332]	; (826c0 <pmc_sleep+0x3cc>)
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   82574:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82578:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8257c:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8257e:	4b50      	ldr	r3, [pc, #320]	; (826c0 <pmc_sleep+0x3cc>)
   82580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82582:	f003 0301 	and.w	r3, r3, #1
   82586:	2b00      	cmp	r3, #0
   82588:	d0f9      	beq.n	8257e <pmc_sleep+0x28a>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
   8258a:	4b4d      	ldr	r3, [pc, #308]	; (826c0 <pmc_sleep+0x3cc>)
   8258c:	6a1b      	ldr	r3, [r3, #32]
   8258e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82592:	2b00      	cmp	r3, #0
   82594:	d10d      	bne.n	825b2 <pmc_sleep+0x2be>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82596:	4b4a      	ldr	r3, [pc, #296]	; (826c0 <pmc_sleep+0x3cc>)
   82598:	6a1b      	ldr	r3, [r3, #32]
   8259a:	4a49      	ldr	r2, [pc, #292]	; (826c0 <pmc_sleep+0x3cc>)
   8259c:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   825a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   825a4:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   825a6:	4b46      	ldr	r3, [pc, #280]	; (826c0 <pmc_sleep+0x3cc>)
   825a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   825aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   825ae:	2b00      	cmp	r3, #0
   825b0:	d0f9      	beq.n	825a6 <pmc_sleep+0x2b2>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   825b2:	4b43      	ldr	r3, [pc, #268]	; (826c0 <pmc_sleep+0x3cc>)
   825b4:	6a1b      	ldr	r3, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
   825b6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   825ba:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   825be:	4a40      	ldr	r2, [pc, #256]	; (826c0 <pmc_sleep+0x3cc>)
					| CKGR_MOR_KEY_PASSWD;
   825c0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   825c4:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
   825c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
   825c8:	4b3e      	ldr	r3, [pc, #248]	; (826c4 <pmc_sleep+0x3d0>)
   825ca:	4013      	ands	r3, r2
   825cc:	2b00      	cmp	r3, #0
   825ce:	d008      	beq.n	825e2 <pmc_sleep+0x2ee>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
   825d0:	4a3b      	ldr	r2, [pc, #236]	; (826c0 <pmc_sleep+0x3cc>)
   825d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   825d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   825d8:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
   825da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   825dc:	f043 0302 	orr.w	r3, r3, #2
   825e0:	657b      	str	r3, [r7, #84]	; 0x54
	if (pll1_setting & CKGR_UCKR_UPLLEN) {
   825e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   825e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   825e8:	2b00      	cmp	r3, #0
   825ea:	d006      	beq.n	825fa <pmc_sleep+0x306>
		PMC->CKGR_UCKR = pll1_setting;
   825ec:	4a34      	ldr	r2, [pc, #208]	; (826c0 <pmc_sleep+0x3cc>)
   825ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   825f0:	61d3      	str	r3, [r2, #28]
		pll_sr |= PMC_SR_LOCKU;
   825f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   825f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   825f8:	657b      	str	r3, [r7, #84]	; 0x54
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
   825fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   825fc:	f003 0303 	and.w	r3, r3, #3
   82600:	2b02      	cmp	r3, #2
   82602:	d002      	beq.n	8260a <pmc_sleep+0x316>
   82604:	2b03      	cmp	r3, #3
   82606:	d007      	beq.n	82618 <pmc_sleep+0x324>
   82608:	e00c      	b.n	82624 <pmc_sleep+0x330>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
   8260a:	4b2d      	ldr	r3, [pc, #180]	; (826c0 <pmc_sleep+0x3cc>)
   8260c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8260e:	f003 0302 	and.w	r3, r3, #2
   82612:	2b00      	cmp	r3, #0
   82614:	d0f9      	beq.n	8260a <pmc_sleep+0x316>
   82616:	e005      	b.n	82624 <pmc_sleep+0x330>
		while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   82618:	4b29      	ldr	r3, [pc, #164]	; (826c0 <pmc_sleep+0x3cc>)
   8261a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8261c:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82620:	2b00      	cmp	r3, #0
   82622:	d0f9      	beq.n	82618 <pmc_sleep+0x324>
	mckr = PMC->PMC_MCKR;
   82624:	4b26      	ldr	r3, [pc, #152]	; (826c0 <pmc_sleep+0x3cc>)
   82626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82628:	653b      	str	r3, [r7, #80]	; 0x50
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   8262a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   8262c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
   82630:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   82632:	f003 0370 	and.w	r3, r3, #112	; 0x70
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   82636:	4922      	ldr	r1, [pc, #136]	; (826c0 <pmc_sleep+0x3cc>)
		| (mck_setting & PMC_MCKR_PRES_Msk);
   82638:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   8263a:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   8263c:	4b20      	ldr	r3, [pc, #128]	; (826c0 <pmc_sleep+0x3cc>)
   8263e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82640:	f003 0308 	and.w	r3, r3, #8
   82644:	2b00      	cmp	r3, #0
   82646:	d0f9      	beq.n	8263c <pmc_sleep+0x348>
	EFC0->EEFC_FMR = fmr_setting;
   82648:	4a1f      	ldr	r2, [pc, #124]	; (826c8 <pmc_sleep+0x3d4>)
   8264a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   8264c:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr_setting1;
   8264e:	4a1f      	ldr	r2, [pc, #124]	; (826cc <pmc_sleep+0x3d8>)
   82650:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   82652:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
   82654:	4a1a      	ldr	r2, [pc, #104]	; (826c0 <pmc_sleep+0x3cc>)
   82656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   82658:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   8265a:	4b19      	ldr	r3, [pc, #100]	; (826c0 <pmc_sleep+0x3cc>)
   8265c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8265e:	f003 0308 	and.w	r3, r3, #8
   82662:	2b00      	cmp	r3, #0
   82664:	d0f9      	beq.n	8265a <pmc_sleep+0x366>
	while (!(PMC->PMC_SR & pll_sr));
   82666:	4b16      	ldr	r3, [pc, #88]	; (826c0 <pmc_sleep+0x3cc>)
   82668:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   8266a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   8266c:	4013      	ands	r3, r2
   8266e:	2b00      	cmp	r3, #0
   82670:	d0f9      	beq.n	82666 <pmc_sleep+0x372>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
   82672:	4b17      	ldr	r3, [pc, #92]	; (826d0 <pmc_sleep+0x3dc>)
   82674:	2200      	movs	r2, #0
   82676:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
   82678:	4b16      	ldr	r3, [pc, #88]	; (826d4 <pmc_sleep+0x3e0>)
   8267a:	681b      	ldr	r3, [r3, #0]
   8267c:	2b00      	cmp	r3, #0
   8267e:	d005      	beq.n	8268c <pmc_sleep+0x398>
			callback_clocks_restored();
   82680:	4b14      	ldr	r3, [pc, #80]	; (826d4 <pmc_sleep+0x3e0>)
   82682:	681b      	ldr	r3, [r3, #0]
   82684:	4798      	blx	r3
			callback_clocks_restored = NULL;
   82686:	4b13      	ldr	r3, [pc, #76]	; (826d4 <pmc_sleep+0x3e0>)
   82688:	2200      	movs	r2, #0
   8268a:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
   8268c:	4b12      	ldr	r3, [pc, #72]	; (826d8 <pmc_sleep+0x3e4>)
   8268e:	2201      	movs	r2, #1
   82690:	701a      	strb	r2, [r3, #0]
   82692:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82696:	b662      	cpsie	i

		break;
   82698:	bf00      	nop
   8269a:	e00d      	b.n	826b8 <pmc_sleep+0x3c4>
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
   8269c:	4b0f      	ldr	r3, [pc, #60]	; (826dc <pmc_sleep+0x3e8>)
   8269e:	691b      	ldr	r3, [r3, #16]
   826a0:	4a0e      	ldr	r2, [pc, #56]	; (826dc <pmc_sleep+0x3e8>)
   826a2:	f043 0304 	orr.w	r3, r3, #4
   826a6:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
		cpu_irq_enable();
		__WFI() ;
#else
		cpu_irq_enable();
   826a8:	4b0b      	ldr	r3, [pc, #44]	; (826d8 <pmc_sleep+0x3e4>)
   826aa:	2201      	movs	r2, #1
   826ac:	701a      	strb	r2, [r3, #0]
   826ae:	f3bf 8f5f 	dmb	sy
   826b2:	b662      	cpsie	i
  __ASM volatile ("wfe");
   826b4:	bf20      	wfe
		__WFE() ;
#endif
		break;
   826b6:	bf00      	nop
#endif
	}
}
   826b8:	bf00      	nop
   826ba:	3770      	adds	r7, #112	; 0x70
   826bc:	46bd      	mov	sp, r7
   826be:	bdb0      	pop	{r4, r5, r7, pc}
   826c0:	400e0400 	.word	0x400e0400
   826c4:	07ff0000 	.word	0x07ff0000
   826c8:	400e0800 	.word	0x400e0800
   826cc:	400e0a00 	.word	0x400e0a00
   826d0:	20001288 	.word	0x20001288
   826d4:	2000128c 	.word	0x2000128c
   826d8:	20000294 	.word	0x20000294
   826dc:	e000ed00 	.word	0xe000ed00

000826e0 <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
   826e0:	b480      	push	{r7}
   826e2:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
   826e4:	4b08      	ldr	r3, [pc, #32]	; (82708 <pmc_is_wakeup_clocks_restored+0x28>)
   826e6:	781b      	ldrb	r3, [r3, #0]
   826e8:	b2db      	uxtb	r3, r3
   826ea:	2b00      	cmp	r3, #0
   826ec:	bf14      	ite	ne
   826ee:	2301      	movne	r3, #1
   826f0:	2300      	moveq	r3, #0
   826f2:	b2db      	uxtb	r3, r3
   826f4:	f083 0301 	eor.w	r3, r3, #1
   826f8:	b2db      	uxtb	r3, r3
   826fa:	f003 0301 	and.w	r3, r3, #1
   826fe:	b2db      	uxtb	r3, r3
}
   82700:	4618      	mov	r0, r3
   82702:	46bd      	mov	sp, r7
   82704:	bc80      	pop	{r7}
   82706:	4770      	bx	lr
   82708:	20001288 	.word	0x20001288

0008270c <smc_set_setup_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
   8270c:	b480      	push	{r7}
   8270e:	b085      	sub	sp, #20
   82710:	af00      	add	r7, sp, #0
   82712:	60f8      	str	r0, [r7, #12]
   82714:	60b9      	str	r1, [r7, #8]
   82716:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   82718:	68f9      	ldr	r1, [r7, #12]
   8271a:	68ba      	ldr	r2, [r7, #8]
   8271c:	4613      	mov	r3, r2
   8271e:	009b      	lsls	r3, r3, #2
   82720:	4413      	add	r3, r2
   82722:	009b      	lsls	r3, r3, #2
   82724:	440b      	add	r3, r1
   82726:	3370      	adds	r3, #112	; 0x70
   82728:	687a      	ldr	r2, [r7, #4]
   8272a:	601a      	str	r2, [r3, #0]
}
   8272c:	bf00      	nop
   8272e:	3714      	adds	r7, #20
   82730:	46bd      	mov	sp, r7
   82732:	bc80      	pop	{r7}
   82734:	4770      	bx	lr

00082736 <smc_set_pulse_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
   82736:	b480      	push	{r7}
   82738:	b085      	sub	sp, #20
   8273a:	af00      	add	r7, sp, #0
   8273c:	60f8      	str	r0, [r7, #12]
   8273e:	60b9      	str	r1, [r7, #8]
   82740:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   82742:	68f9      	ldr	r1, [r7, #12]
   82744:	68ba      	ldr	r2, [r7, #8]
   82746:	4613      	mov	r3, r2
   82748:	009b      	lsls	r3, r3, #2
   8274a:	4413      	add	r3, r2
   8274c:	009b      	lsls	r3, r3, #2
   8274e:	440b      	add	r3, r1
   82750:	3374      	adds	r3, #116	; 0x74
   82752:	687a      	ldr	r2, [r7, #4]
   82754:	601a      	str	r2, [r3, #0]
}
   82756:	bf00      	nop
   82758:	3714      	adds	r7, #20
   8275a:	46bd      	mov	sp, r7
   8275c:	bc80      	pop	{r7}
   8275e:	4770      	bx	lr

00082760 <smc_set_cycle_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
   82760:	b480      	push	{r7}
   82762:	b085      	sub	sp, #20
   82764:	af00      	add	r7, sp, #0
   82766:	60f8      	str	r0, [r7, #12]
   82768:	60b9      	str	r1, [r7, #8]
   8276a:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   8276c:	68f9      	ldr	r1, [r7, #12]
   8276e:	68ba      	ldr	r2, [r7, #8]
   82770:	4613      	mov	r3, r2
   82772:	009b      	lsls	r3, r3, #2
   82774:	4413      	add	r3, r2
   82776:	009b      	lsls	r3, r3, #2
   82778:	440b      	add	r3, r1
   8277a:	3378      	adds	r3, #120	; 0x78
   8277c:	687a      	ldr	r2, [r7, #4]
   8277e:	601a      	str	r2, [r3, #0]
}
   82780:	bf00      	nop
   82782:	3714      	adds	r7, #20
   82784:	46bd      	mov	sp, r7
   82786:	bc80      	pop	{r7}
   82788:	4770      	bx	lr

0008278a <smc_set_mode>:
 * \param p_smc Pointer to an SMC instance.
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
   8278a:	b480      	push	{r7}
   8278c:	b085      	sub	sp, #20
   8278e:	af00      	add	r7, sp, #0
   82790:	60f8      	str	r0, [r7, #12]
   82792:	60b9      	str	r1, [r7, #8]
   82794:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   82796:	68f9      	ldr	r1, [r7, #12]
   82798:	68ba      	ldr	r2, [r7, #8]
   8279a:	4613      	mov	r3, r2
   8279c:	009b      	lsls	r3, r3, #2
   8279e:	4413      	add	r3, r2
   827a0:	009b      	lsls	r3, r3, #2
   827a2:	440b      	add	r3, r1
   827a4:	3380      	adds	r3, #128	; 0x80
   827a6:	687a      	ldr	r2, [r7, #4]
   827a8:	601a      	str	r2, [r3, #0]
}
   827aa:	bf00      	nop
   827ac:	3714      	adds	r7, #20
   827ae:	46bd      	mov	sp, r7
   827b0:	bc80      	pop	{r7}
   827b2:	4770      	bx	lr

000827b4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   827b4:	b580      	push	{r7, lr}
   827b6:	b082      	sub	sp, #8
   827b8:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   827ba:	4b1e      	ldr	r3, [pc, #120]	; (82834 <Reset_Handler+0x80>)
   827bc:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   827be:	4b1e      	ldr	r3, [pc, #120]	; (82838 <Reset_Handler+0x84>)
   827c0:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   827c2:	687a      	ldr	r2, [r7, #4]
   827c4:	683b      	ldr	r3, [r7, #0]
   827c6:	429a      	cmp	r2, r3
   827c8:	d00c      	beq.n	827e4 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   827ca:	e007      	b.n	827dc <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   827cc:	687a      	ldr	r2, [r7, #4]
   827ce:	1d13      	adds	r3, r2, #4
   827d0:	607b      	str	r3, [r7, #4]
   827d2:	683b      	ldr	r3, [r7, #0]
   827d4:	1d19      	adds	r1, r3, #4
   827d6:	6039      	str	r1, [r7, #0]
   827d8:	6812      	ldr	r2, [r2, #0]
   827da:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   827dc:	683b      	ldr	r3, [r7, #0]
   827de:	4a17      	ldr	r2, [pc, #92]	; (8283c <Reset_Handler+0x88>)
   827e0:	4293      	cmp	r3, r2
   827e2:	d3f3      	bcc.n	827cc <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   827e4:	4b16      	ldr	r3, [pc, #88]	; (82840 <Reset_Handler+0x8c>)
   827e6:	603b      	str	r3, [r7, #0]
   827e8:	e004      	b.n	827f4 <Reset_Handler+0x40>
		*pDest++ = 0;
   827ea:	683b      	ldr	r3, [r7, #0]
   827ec:	1d1a      	adds	r2, r3, #4
   827ee:	603a      	str	r2, [r7, #0]
   827f0:	2200      	movs	r2, #0
   827f2:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   827f4:	683b      	ldr	r3, [r7, #0]
   827f6:	4a13      	ldr	r2, [pc, #76]	; (82844 <Reset_Handler+0x90>)
   827f8:	4293      	cmp	r3, r2
   827fa:	d3f6      	bcc.n	827ea <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   827fc:	4b12      	ldr	r3, [pc, #72]	; (82848 <Reset_Handler+0x94>)
   827fe:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82800:	687b      	ldr	r3, [r7, #4]
   82802:	4a12      	ldr	r2, [pc, #72]	; (8284c <Reset_Handler+0x98>)
   82804:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   82808:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8280c:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   8280e:	687b      	ldr	r3, [r7, #4]
   82810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   82814:	d309      	bcc.n	8282a <Reset_Handler+0x76>
   82816:	687b      	ldr	r3, [r7, #4]
   82818:	4a0d      	ldr	r2, [pc, #52]	; (82850 <Reset_Handler+0x9c>)
   8281a:	4293      	cmp	r3, r2
   8281c:	d805      	bhi.n	8282a <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8281e:	4b0b      	ldr	r3, [pc, #44]	; (8284c <Reset_Handler+0x98>)
   82820:	689b      	ldr	r3, [r3, #8]
   82822:	4a0a      	ldr	r2, [pc, #40]	; (8284c <Reset_Handler+0x98>)
   82824:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82828:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8282a:	4b0a      	ldr	r3, [pc, #40]	; (82854 <Reset_Handler+0xa0>)
   8282c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8282e:	4b0a      	ldr	r3, [pc, #40]	; (82858 <Reset_Handler+0xa4>)
   82830:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   82832:	e7fe      	b.n	82832 <Reset_Handler+0x7e>
   82834:	0008ad14 	.word	0x0008ad14
   82838:	20000000 	.word	0x20000000
   8283c:	20000d60 	.word	0x20000d60
   82840:	20000d60 	.word	0x20000d60
   82844:	20001360 	.word	0x20001360
   82848:	00080000 	.word	0x00080000
   8284c:	e000ed00 	.word	0xe000ed00
   82850:	20003fff 	.word	0x20003fff
   82854:	00085bc1 	.word	0x00085bc1
   82858:	00080b3d 	.word	0x00080b3d

0008285c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   8285c:	b480      	push	{r7}
   8285e:	b085      	sub	sp, #20
   82860:	af00      	add	r7, sp, #0
   82862:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   82864:	4b10      	ldr	r3, [pc, #64]	; (828a8 <_sbrk+0x4c>)
   82866:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   82868:	4b10      	ldr	r3, [pc, #64]	; (828ac <_sbrk+0x50>)
   8286a:	681b      	ldr	r3, [r3, #0]
   8286c:	2b00      	cmp	r3, #0
   8286e:	d102      	bne.n	82876 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   82870:	4b0e      	ldr	r3, [pc, #56]	; (828ac <_sbrk+0x50>)
   82872:	4a0f      	ldr	r2, [pc, #60]	; (828b0 <_sbrk+0x54>)
   82874:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   82876:	4b0d      	ldr	r3, [pc, #52]	; (828ac <_sbrk+0x50>)
   82878:	681b      	ldr	r3, [r3, #0]
   8287a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   8287c:	68ba      	ldr	r2, [r7, #8]
   8287e:	687b      	ldr	r3, [r7, #4]
   82880:	4413      	add	r3, r2
   82882:	68fa      	ldr	r2, [r7, #12]
   82884:	429a      	cmp	r2, r3
   82886:	da02      	bge.n	8288e <_sbrk+0x32>
		return (caddr_t) -1;	
   82888:	f04f 33ff 	mov.w	r3, #4294967295
   8288c:	e006      	b.n	8289c <_sbrk+0x40>
	}

	heap += incr;
   8288e:	4b07      	ldr	r3, [pc, #28]	; (828ac <_sbrk+0x50>)
   82890:	681a      	ldr	r2, [r3, #0]
   82892:	687b      	ldr	r3, [r7, #4]
   82894:	4413      	add	r3, r2
   82896:	4a05      	ldr	r2, [pc, #20]	; (828ac <_sbrk+0x50>)
   82898:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   8289a:	68bb      	ldr	r3, [r7, #8]
}
   8289c:	4618      	mov	r0, r3
   8289e:	3714      	adds	r7, #20
   828a0:	46bd      	mov	sp, r7
   828a2:	bc80      	pop	{r7}
   828a4:	4770      	bx	lr
   828a6:	bf00      	nop
   828a8:	20081ffc 	.word	0x20081ffc
   828ac:	20001290 	.word	0x20001290
   828b0:	20080400 	.word	0x20080400

000828b4 <osc_enable>:
{
   828b4:	b580      	push	{r7, lr}
   828b6:	b082      	sub	sp, #8
   828b8:	af00      	add	r7, sp, #0
   828ba:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   828bc:	687b      	ldr	r3, [r7, #4]
   828be:	2b07      	cmp	r3, #7
   828c0:	d82e      	bhi.n	82920 <osc_enable+0x6c>
   828c2:	a201      	add	r2, pc, #4	; (adr r2, 828c8 <osc_enable+0x14>)
   828c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   828c8:	0008291f 	.word	0x0008291f
   828cc:	000828e9 	.word	0x000828e9
   828d0:	000828f1 	.word	0x000828f1
   828d4:	000828f9 	.word	0x000828f9
   828d8:	00082901 	.word	0x00082901
   828dc:	00082909 	.word	0x00082909
   828e0:	00082911 	.word	0x00082911
   828e4:	00082919 	.word	0x00082919
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   828e8:	2000      	movs	r0, #0
   828ea:	4b0f      	ldr	r3, [pc, #60]	; (82928 <osc_enable+0x74>)
   828ec:	4798      	blx	r3
		break;
   828ee:	e017      	b.n	82920 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   828f0:	2001      	movs	r0, #1
   828f2:	4b0d      	ldr	r3, [pc, #52]	; (82928 <osc_enable+0x74>)
   828f4:	4798      	blx	r3
		break;
   828f6:	e013      	b.n	82920 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   828f8:	2000      	movs	r0, #0
   828fa:	4b0c      	ldr	r3, [pc, #48]	; (8292c <osc_enable+0x78>)
   828fc:	4798      	blx	r3
		break;
   828fe:	e00f      	b.n	82920 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   82900:	2010      	movs	r0, #16
   82902:	4b0a      	ldr	r3, [pc, #40]	; (8292c <osc_enable+0x78>)
   82904:	4798      	blx	r3
		break;
   82906:	e00b      	b.n	82920 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   82908:	2020      	movs	r0, #32
   8290a:	4b08      	ldr	r3, [pc, #32]	; (8292c <osc_enable+0x78>)
   8290c:	4798      	blx	r3
		break;
   8290e:	e007      	b.n	82920 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   82910:	203e      	movs	r0, #62	; 0x3e
   82912:	4b07      	ldr	r3, [pc, #28]	; (82930 <osc_enable+0x7c>)
   82914:	4798      	blx	r3
		break;
   82916:	e003      	b.n	82920 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   82918:	4b06      	ldr	r3, [pc, #24]	; (82934 <osc_enable+0x80>)
   8291a:	4798      	blx	r3
		break;
   8291c:	e000      	b.n	82920 <osc_enable+0x6c>
		break;
   8291e:	bf00      	nop
}
   82920:	bf00      	nop
   82922:	3708      	adds	r7, #8
   82924:	46bd      	mov	sp, r7
   82926:	bd80      	pop	{r7, pc}
   82928:	00081f69 	.word	0x00081f69
   8292c:	00081fd5 	.word	0x00081fd5
   82930:	00082049 	.word	0x00082049
   82934:	00082095 	.word	0x00082095

00082938 <osc_is_ready>:
{
   82938:	b580      	push	{r7, lr}
   8293a:	b082      	sub	sp, #8
   8293c:	af00      	add	r7, sp, #0
   8293e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82940:	687b      	ldr	r3, [r7, #4]
   82942:	2b07      	cmp	r3, #7
   82944:	d82f      	bhi.n	829a6 <osc_is_ready+0x6e>
   82946:	a201      	add	r2, pc, #4	; (adr r2, 8294c <osc_is_ready+0x14>)
   82948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8294c:	0008296d 	.word	0x0008296d
   82950:	00082971 	.word	0x00082971
   82954:	00082971 	.word	0x00082971
   82958:	00082983 	.word	0x00082983
   8295c:	00082983 	.word	0x00082983
   82960:	00082983 	.word	0x00082983
   82964:	00082995 	.word	0x00082995
   82968:	00082995 	.word	0x00082995
		return 1;
   8296c:	2301      	movs	r3, #1
   8296e:	e01b      	b.n	829a8 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   82970:	4b0f      	ldr	r3, [pc, #60]	; (829b0 <osc_is_ready+0x78>)
   82972:	4798      	blx	r3
   82974:	4603      	mov	r3, r0
   82976:	2b00      	cmp	r3, #0
   82978:	bf14      	ite	ne
   8297a:	2301      	movne	r3, #1
   8297c:	2300      	moveq	r3, #0
   8297e:	b2db      	uxtb	r3, r3
   82980:	e012      	b.n	829a8 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   82982:	4b0c      	ldr	r3, [pc, #48]	; (829b4 <osc_is_ready+0x7c>)
   82984:	4798      	blx	r3
   82986:	4603      	mov	r3, r0
   82988:	2b00      	cmp	r3, #0
   8298a:	bf14      	ite	ne
   8298c:	2301      	movne	r3, #1
   8298e:	2300      	moveq	r3, #0
   82990:	b2db      	uxtb	r3, r3
   82992:	e009      	b.n	829a8 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   82994:	4b08      	ldr	r3, [pc, #32]	; (829b8 <osc_is_ready+0x80>)
   82996:	4798      	blx	r3
   82998:	4603      	mov	r3, r0
   8299a:	2b00      	cmp	r3, #0
   8299c:	bf14      	ite	ne
   8299e:	2301      	movne	r3, #1
   829a0:	2300      	moveq	r3, #0
   829a2:	b2db      	uxtb	r3, r3
   829a4:	e000      	b.n	829a8 <osc_is_ready+0x70>
	return 0;
   829a6:	2300      	movs	r3, #0
}
   829a8:	4618      	mov	r0, r3
   829aa:	3708      	adds	r7, #8
   829ac:	46bd      	mov	sp, r7
   829ae:	bd80      	pop	{r7, pc}
   829b0:	00081fa1 	.word	0x00081fa1
   829b4:	00082031 	.word	0x00082031
   829b8:	000820e1 	.word	0x000820e1

000829bc <osc_get_rate>:
{
   829bc:	b480      	push	{r7}
   829be:	b083      	sub	sp, #12
   829c0:	af00      	add	r7, sp, #0
   829c2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   829c4:	687b      	ldr	r3, [r7, #4]
   829c6:	2b07      	cmp	r3, #7
   829c8:	d823      	bhi.n	82a12 <osc_get_rate+0x56>
   829ca:	a201      	add	r2, pc, #4	; (adr r2, 829d0 <osc_get_rate+0x14>)
   829cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   829d0:	000829f1 	.word	0x000829f1
   829d4:	000829f7 	.word	0x000829f7
   829d8:	000829fb 	.word	0x000829fb
   829dc:	000829ff 	.word	0x000829ff
   829e0:	00082a03 	.word	0x00082a03
   829e4:	00082a07 	.word	0x00082a07
   829e8:	00082a0b 	.word	0x00082a0b
   829ec:	00082a0f 	.word	0x00082a0f
		return OSC_SLCK_32K_RC_HZ;
   829f0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   829f4:	e00e      	b.n	82a14 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   829f6:	2300      	movs	r3, #0
   829f8:	e00c      	b.n	82a14 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   829fa:	2300      	movs	r3, #0
   829fc:	e00a      	b.n	82a14 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   829fe:	4b08      	ldr	r3, [pc, #32]	; (82a20 <osc_get_rate+0x64>)
   82a00:	e008      	b.n	82a14 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   82a02:	4b08      	ldr	r3, [pc, #32]	; (82a24 <osc_get_rate+0x68>)
   82a04:	e006      	b.n	82a14 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   82a06:	4b08      	ldr	r3, [pc, #32]	; (82a28 <osc_get_rate+0x6c>)
   82a08:	e004      	b.n	82a14 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   82a0a:	4b07      	ldr	r3, [pc, #28]	; (82a28 <osc_get_rate+0x6c>)
   82a0c:	e002      	b.n	82a14 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   82a0e:	4b06      	ldr	r3, [pc, #24]	; (82a28 <osc_get_rate+0x6c>)
   82a10:	e000      	b.n	82a14 <osc_get_rate+0x58>
	return 0;
   82a12:	2300      	movs	r3, #0
}
   82a14:	4618      	mov	r0, r3
   82a16:	370c      	adds	r7, #12
   82a18:	46bd      	mov	sp, r7
   82a1a:	bc80      	pop	{r7}
   82a1c:	4770      	bx	lr
   82a1e:	bf00      	nop
   82a20:	003d0900 	.word	0x003d0900
   82a24:	007a1200 	.word	0x007a1200
   82a28:	00b71b00 	.word	0x00b71b00

00082a2c <osc_wait_ready>:
{
   82a2c:	b580      	push	{r7, lr}
   82a2e:	b082      	sub	sp, #8
   82a30:	af00      	add	r7, sp, #0
   82a32:	4603      	mov	r3, r0
   82a34:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   82a36:	bf00      	nop
   82a38:	79fb      	ldrb	r3, [r7, #7]
   82a3a:	4618      	mov	r0, r3
   82a3c:	4b05      	ldr	r3, [pc, #20]	; (82a54 <osc_wait_ready+0x28>)
   82a3e:	4798      	blx	r3
   82a40:	4603      	mov	r3, r0
   82a42:	f083 0301 	eor.w	r3, r3, #1
   82a46:	b2db      	uxtb	r3, r3
   82a48:	2b00      	cmp	r3, #0
   82a4a:	d1f5      	bne.n	82a38 <osc_wait_ready+0xc>
}
   82a4c:	bf00      	nop
   82a4e:	3708      	adds	r7, #8
   82a50:	46bd      	mov	sp, r7
   82a52:	bd80      	pop	{r7, pc}
   82a54:	00082939 	.word	0x00082939

00082a58 <pll_config_init>:
{
   82a58:	b580      	push	{r7, lr}
   82a5a:	b086      	sub	sp, #24
   82a5c:	af00      	add	r7, sp, #0
   82a5e:	60f8      	str	r0, [r7, #12]
   82a60:	607a      	str	r2, [r7, #4]
   82a62:	603b      	str	r3, [r7, #0]
   82a64:	460b      	mov	r3, r1
   82a66:	72fb      	strb	r3, [r7, #11]
	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   82a68:	687b      	ldr	r3, [r7, #4]
   82a6a:	2b00      	cmp	r3, #0
   82a6c:	d107      	bne.n	82a7e <pll_config_init+0x26>
   82a6e:	683b      	ldr	r3, [r7, #0]
   82a70:	2b00      	cmp	r3, #0
   82a72:	d104      	bne.n	82a7e <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   82a74:	68fb      	ldr	r3, [r7, #12]
   82a76:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   82a7a:	601a      	str	r2, [r3, #0]
   82a7c:	e019      	b.n	82ab2 <pll_config_init+0x5a>
		vco_hz = osc_get_rate(e_src) / ul_div;
   82a7e:	7afb      	ldrb	r3, [r7, #11]
   82a80:	4618      	mov	r0, r3
   82a82:	4b0e      	ldr	r3, [pc, #56]	; (82abc <pll_config_init+0x64>)
   82a84:	4798      	blx	r3
   82a86:	4602      	mov	r2, r0
   82a88:	687b      	ldr	r3, [r7, #4]
   82a8a:	fbb2 f3f3 	udiv	r3, r2, r3
   82a8e:	617b      	str	r3, [r7, #20]
		vco_hz *= ul_mul;
   82a90:	697b      	ldr	r3, [r7, #20]
   82a92:	683a      	ldr	r2, [r7, #0]
   82a94:	fb02 f303 	mul.w	r3, r2, r3
   82a98:	617b      	str	r3, [r7, #20]
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   82a9a:	683b      	ldr	r3, [r7, #0]
   82a9c:	3b01      	subs	r3, #1
   82a9e:	041a      	lsls	r2, r3, #16
   82aa0:	4b07      	ldr	r3, [pc, #28]	; (82ac0 <pll_config_init+0x68>)
   82aa2:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   82aa4:	687a      	ldr	r2, [r7, #4]
   82aa6:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   82aa8:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   82aaa:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   82aae:	68fb      	ldr	r3, [r7, #12]
   82ab0:	601a      	str	r2, [r3, #0]
}
   82ab2:	bf00      	nop
   82ab4:	3718      	adds	r7, #24
   82ab6:	46bd      	mov	sp, r7
   82ab8:	bd80      	pop	{r7, pc}
   82aba:	bf00      	nop
   82abc:	000829bd 	.word	0x000829bd
   82ac0:	07ff0000 	.word	0x07ff0000

00082ac4 <pll_enable>:
{
   82ac4:	b580      	push	{r7, lr}
   82ac6:	b082      	sub	sp, #8
   82ac8:	af00      	add	r7, sp, #0
   82aca:	6078      	str	r0, [r7, #4]
   82acc:	6039      	str	r1, [r7, #0]
	if (ul_pll_id == PLLA_ID) {
   82ace:	683b      	ldr	r3, [r7, #0]
   82ad0:	2b00      	cmp	r3, #0
   82ad2:	d108      	bne.n	82ae6 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   82ad4:	4b09      	ldr	r3, [pc, #36]	; (82afc <pll_enable+0x38>)
   82ad6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82ad8:	687b      	ldr	r3, [r7, #4]
   82ada:	681b      	ldr	r3, [r3, #0]
   82adc:	4a08      	ldr	r2, [pc, #32]	; (82b00 <pll_enable+0x3c>)
   82ade:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82ae2:	6293      	str	r3, [r2, #40]	; 0x28
}
   82ae4:	e005      	b.n	82af2 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   82ae6:	687b      	ldr	r3, [r7, #4]
   82ae8:	681b      	ldr	r3, [r3, #0]
   82aea:	4a05      	ldr	r2, [pc, #20]	; (82b00 <pll_enable+0x3c>)
   82aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82af0:	61d3      	str	r3, [r2, #28]
}
   82af2:	bf00      	nop
   82af4:	3708      	adds	r7, #8
   82af6:	46bd      	mov	sp, r7
   82af8:	bd80      	pop	{r7, pc}
   82afa:	bf00      	nop
   82afc:	00082151 	.word	0x00082151
   82b00:	400e0400 	.word	0x400e0400

00082b04 <pll_is_locked>:
{
   82b04:	b580      	push	{r7, lr}
   82b06:	b082      	sub	sp, #8
   82b08:	af00      	add	r7, sp, #0
   82b0a:	6078      	str	r0, [r7, #4]
	if (ul_pll_id == PLLA_ID) {
   82b0c:	687b      	ldr	r3, [r7, #4]
   82b0e:	2b00      	cmp	r3, #0
   82b10:	d103      	bne.n	82b1a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   82b12:	4b05      	ldr	r3, [pc, #20]	; (82b28 <pll_is_locked+0x24>)
   82b14:	4798      	blx	r3
   82b16:	4603      	mov	r3, r0
   82b18:	e002      	b.n	82b20 <pll_is_locked+0x1c>
		return pmc_is_locked_upll();
   82b1a:	4b04      	ldr	r3, [pc, #16]	; (82b2c <pll_is_locked+0x28>)
   82b1c:	4798      	blx	r3
   82b1e:	4603      	mov	r3, r0
}
   82b20:	4618      	mov	r0, r3
   82b22:	3708      	adds	r7, #8
   82b24:	46bd      	mov	sp, r7
   82b26:	bd80      	pop	{r7, pc}
   82b28:	00082169 	.word	0x00082169
   82b2c:	0008219d 	.word	0x0008219d

00082b30 <pll_enable_source>:
{
   82b30:	b580      	push	{r7, lr}
   82b32:	b082      	sub	sp, #8
   82b34:	af00      	add	r7, sp, #0
   82b36:	4603      	mov	r3, r0
   82b38:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   82b3a:	79fb      	ldrb	r3, [r7, #7]
   82b3c:	3b03      	subs	r3, #3
   82b3e:	2b04      	cmp	r3, #4
   82b40:	d808      	bhi.n	82b54 <pll_enable_source+0x24>
		osc_enable(e_src);
   82b42:	79fb      	ldrb	r3, [r7, #7]
   82b44:	4618      	mov	r0, r3
   82b46:	4b06      	ldr	r3, [pc, #24]	; (82b60 <pll_enable_source+0x30>)
   82b48:	4798      	blx	r3
		osc_wait_ready(e_src);
   82b4a:	79fb      	ldrb	r3, [r7, #7]
   82b4c:	4618      	mov	r0, r3
   82b4e:	4b05      	ldr	r3, [pc, #20]	; (82b64 <pll_enable_source+0x34>)
   82b50:	4798      	blx	r3
		break;
   82b52:	e000      	b.n	82b56 <pll_enable_source+0x26>
		break;
   82b54:	bf00      	nop
}
   82b56:	bf00      	nop
   82b58:	3708      	adds	r7, #8
   82b5a:	46bd      	mov	sp, r7
   82b5c:	bd80      	pop	{r7, pc}
   82b5e:	bf00      	nop
   82b60:	000828b5 	.word	0x000828b5
   82b64:	00082a2d 	.word	0x00082a2d

00082b68 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   82b68:	b580      	push	{r7, lr}
   82b6a:	b082      	sub	sp, #8
   82b6c:	af00      	add	r7, sp, #0
   82b6e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82b70:	bf00      	nop
   82b72:	6878      	ldr	r0, [r7, #4]
   82b74:	4b04      	ldr	r3, [pc, #16]	; (82b88 <pll_wait_for_lock+0x20>)
   82b76:	4798      	blx	r3
   82b78:	4603      	mov	r3, r0
   82b7a:	2b00      	cmp	r3, #0
   82b7c:	d0f9      	beq.n	82b72 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   82b7e:	2300      	movs	r3, #0
}
   82b80:	4618      	mov	r0, r3
   82b82:	3708      	adds	r7, #8
   82b84:	46bd      	mov	sp, r7
   82b86:	bd80      	pop	{r7, pc}
   82b88:	00082b05 	.word	0x00082b05

00082b8c <sysclk_get_main_hz>:
{
   82b8c:	b580      	push	{r7, lr}
   82b8e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   82b90:	2006      	movs	r0, #6
   82b92:	4b03      	ldr	r3, [pc, #12]	; (82ba0 <sysclk_get_main_hz+0x14>)
   82b94:	4798      	blx	r3
   82b96:	4603      	mov	r3, r0
   82b98:	011b      	lsls	r3, r3, #4
}
   82b9a:	4618      	mov	r0, r3
   82b9c:	bd80      	pop	{r7, pc}
   82b9e:	bf00      	nop
   82ba0:	000829bd 	.word	0x000829bd

00082ba4 <sysclk_get_cpu_hz>:
{
   82ba4:	b580      	push	{r7, lr}
   82ba6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   82ba8:	4b02      	ldr	r3, [pc, #8]	; (82bb4 <sysclk_get_cpu_hz+0x10>)
   82baa:	4798      	blx	r3
   82bac:	4603      	mov	r3, r0
   82bae:	085b      	lsrs	r3, r3, #1
}
   82bb0:	4618      	mov	r0, r3
   82bb2:	bd80      	pop	{r7, pc}
   82bb4:	00082b8d 	.word	0x00082b8d

00082bb8 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   82bb8:	b590      	push	{r4, r7, lr}
   82bba:	b083      	sub	sp, #12
   82bbc:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	pll_enable_source(CONFIG_PLL1_SOURCE);
   82bbe:	2006      	movs	r0, #6
   82bc0:	4b09      	ldr	r3, [pc, #36]	; (82be8 <sysclk_enable_usb+0x30>)
   82bc2:	4798      	blx	r3
	pll_config_defaults(&pllcfg, 1);
   82bc4:	1d38      	adds	r0, r7, #4
   82bc6:	2300      	movs	r3, #0
   82bc8:	2200      	movs	r2, #0
   82bca:	2106      	movs	r1, #6
   82bcc:	4c07      	ldr	r4, [pc, #28]	; (82bec <sysclk_enable_usb+0x34>)
   82bce:	47a0      	blx	r4
	pll_enable(&pllcfg, 1);
   82bd0:	1d3b      	adds	r3, r7, #4
   82bd2:	2101      	movs	r1, #1
   82bd4:	4618      	mov	r0, r3
   82bd6:	4b06      	ldr	r3, [pc, #24]	; (82bf0 <sysclk_enable_usb+0x38>)
   82bd8:	4798      	blx	r3
	pll_wait_for_lock(1);
   82bda:	2001      	movs	r0, #1
   82bdc:	4b05      	ldr	r3, [pc, #20]	; (82bf4 <sysclk_enable_usb+0x3c>)
   82bde:	4798      	blx	r3
}
   82be0:	bf00      	nop
   82be2:	370c      	adds	r7, #12
   82be4:	46bd      	mov	sp, r7
   82be6:	bd90      	pop	{r4, r7, pc}
   82be8:	00082b31 	.word	0x00082b31
   82bec:	00082a59 	.word	0x00082a59
   82bf0:	00082ac5 	.word	0x00082ac5
   82bf4:	00082b69 	.word	0x00082b69

00082bf8 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   82bf8:	b590      	push	{r4, r7, lr}
   82bfa:	b083      	sub	sp, #12
   82bfc:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82bfe:	4816      	ldr	r0, [pc, #88]	; (82c58 <sysclk_init+0x60>)
   82c00:	4b16      	ldr	r3, [pc, #88]	; (82c5c <sysclk_init+0x64>)
   82c02:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   82c04:	2006      	movs	r0, #6
   82c06:	4b16      	ldr	r3, [pc, #88]	; (82c60 <sysclk_init+0x68>)
   82c08:	4798      	blx	r3
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   82c0a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   82c0e:	4b15      	ldr	r3, [pc, #84]	; (82c64 <sysclk_init+0x6c>)
   82c10:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   82c12:	bf00      	nop
   82c14:	4b14      	ldr	r3, [pc, #80]	; (82c68 <sysclk_init+0x70>)
   82c16:	4798      	blx	r3
   82c18:	4603      	mov	r3, r0
   82c1a:	2b00      	cmp	r3, #0
   82c1c:	d0fa      	beq.n	82c14 <sysclk_init+0x1c>
		}
		pll_config_defaults(&pllcfg, 0);
   82c1e:	1d38      	adds	r0, r7, #4
   82c20:	2310      	movs	r3, #16
   82c22:	2201      	movs	r2, #1
   82c24:	2106      	movs	r1, #6
   82c26:	4c11      	ldr	r4, [pc, #68]	; (82c6c <sysclk_init+0x74>)
   82c28:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   82c2a:	1d3b      	adds	r3, r7, #4
   82c2c:	2100      	movs	r1, #0
   82c2e:	4618      	mov	r0, r3
   82c30:	4b0f      	ldr	r3, [pc, #60]	; (82c70 <sysclk_init+0x78>)
   82c32:	4798      	blx	r3
		pll_wait_for_lock(0);
   82c34:	2000      	movs	r0, #0
   82c36:	4b0f      	ldr	r3, [pc, #60]	; (82c74 <sysclk_init+0x7c>)
   82c38:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82c3a:	2010      	movs	r0, #16
   82c3c:	4b0e      	ldr	r3, [pc, #56]	; (82c78 <sysclk_init+0x80>)
   82c3e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82c40:	4b0e      	ldr	r3, [pc, #56]	; (82c7c <sysclk_init+0x84>)
   82c42:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82c44:	4b0e      	ldr	r3, [pc, #56]	; (82c80 <sysclk_init+0x88>)
   82c46:	4798      	blx	r3
   82c48:	4603      	mov	r3, r0
   82c4a:	4618      	mov	r0, r3
   82c4c:	4b03      	ldr	r3, [pc, #12]	; (82c5c <sysclk_init+0x64>)
   82c4e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   82c50:	bf00      	nop
   82c52:	370c      	adds	r7, #12
   82c54:	46bd      	mov	sp, r7
   82c56:	bd90      	pop	{r4, r7, pc}
   82c58:	05b8d800 	.word	0x05b8d800
   82c5c:	200001bd 	.word	0x200001bd
   82c60:	00082b31 	.word	0x00082b31
   82c64:	00082111 	.word	0x00082111
   82c68:	000820f9 	.word	0x000820f9
   82c6c:	00082a59 	.word	0x00082a59
   82c70:	00082ac5 	.word	0x00082ac5
   82c74:	00082b69 	.word	0x00082b69
   82c78:	00081ee9 	.word	0x00081ee9
   82c7c:	00082c85 	.word	0x00082c85
   82c80:	00082ba5 	.word	0x00082ba5

00082c84 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   82c84:	b480      	push	{r7}
   82c86:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82c88:	4b57      	ldr	r3, [pc, #348]	; (82de8 <SystemCoreClockUpdate+0x164>)
   82c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82c8c:	f003 0303 	and.w	r3, r3, #3
   82c90:	2b03      	cmp	r3, #3
   82c92:	f200 808a 	bhi.w	82daa <SystemCoreClockUpdate+0x126>
   82c96:	a201      	add	r2, pc, #4	; (adr r2, 82c9c <SystemCoreClockUpdate+0x18>)
   82c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82c9c:	00082cad 	.word	0x00082cad
   82ca0:	00082ccd 	.word	0x00082ccd
   82ca4:	00082d1d 	.word	0x00082d1d
   82ca8:	00082d1d 	.word	0x00082d1d
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82cac:	4b4f      	ldr	r3, [pc, #316]	; (82dec <SystemCoreClockUpdate+0x168>)
   82cae:	695b      	ldr	r3, [r3, #20]
   82cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82cb4:	2b00      	cmp	r3, #0
   82cb6:	d004      	beq.n	82cc2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82cb8:	4b4d      	ldr	r3, [pc, #308]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82cba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82cbe:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   82cc0:	e073      	b.n	82daa <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82cc2:	4b4b      	ldr	r3, [pc, #300]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82cc4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   82cc8:	601a      	str	r2, [r3, #0]
		break;
   82cca:	e06e      	b.n	82daa <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82ccc:	4b46      	ldr	r3, [pc, #280]	; (82de8 <SystemCoreClockUpdate+0x164>)
   82cce:	6a1b      	ldr	r3, [r3, #32]
   82cd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82cd4:	2b00      	cmp	r3, #0
   82cd6:	d003      	beq.n	82ce0 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82cd8:	4b45      	ldr	r3, [pc, #276]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82cda:	4a46      	ldr	r2, [pc, #280]	; (82df4 <SystemCoreClockUpdate+0x170>)
   82cdc:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   82cde:	e064      	b.n	82daa <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82ce0:	4b43      	ldr	r3, [pc, #268]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82ce2:	4a45      	ldr	r2, [pc, #276]	; (82df8 <SystemCoreClockUpdate+0x174>)
   82ce4:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82ce6:	4b40      	ldr	r3, [pc, #256]	; (82de8 <SystemCoreClockUpdate+0x164>)
   82ce8:	6a1b      	ldr	r3, [r3, #32]
   82cea:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82cee:	2b10      	cmp	r3, #16
   82cf0:	d004      	beq.n	82cfc <SystemCoreClockUpdate+0x78>
   82cf2:	2b20      	cmp	r3, #32
   82cf4:	d008      	beq.n	82d08 <SystemCoreClockUpdate+0x84>
   82cf6:	2b00      	cmp	r3, #0
   82cf8:	d00e      	beq.n	82d18 <SystemCoreClockUpdate+0x94>
				break;
   82cfa:	e00e      	b.n	82d1a <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   82cfc:	4b3c      	ldr	r3, [pc, #240]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82cfe:	681b      	ldr	r3, [r3, #0]
   82d00:	005b      	lsls	r3, r3, #1
   82d02:	4a3b      	ldr	r2, [pc, #236]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82d04:	6013      	str	r3, [r2, #0]
				break;
   82d06:	e008      	b.n	82d1a <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   82d08:	4b39      	ldr	r3, [pc, #228]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82d0a:	681a      	ldr	r2, [r3, #0]
   82d0c:	4613      	mov	r3, r2
   82d0e:	005b      	lsls	r3, r3, #1
   82d10:	4413      	add	r3, r2
   82d12:	4a37      	ldr	r2, [pc, #220]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82d14:	6013      	str	r3, [r2, #0]
				break;
   82d16:	e000      	b.n	82d1a <SystemCoreClockUpdate+0x96>
				break;
   82d18:	bf00      	nop
		break;
   82d1a:	e046      	b.n	82daa <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82d1c:	4b32      	ldr	r3, [pc, #200]	; (82de8 <SystemCoreClockUpdate+0x164>)
   82d1e:	6a1b      	ldr	r3, [r3, #32]
   82d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82d24:	2b00      	cmp	r3, #0
   82d26:	d003      	beq.n	82d30 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82d28:	4b31      	ldr	r3, [pc, #196]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82d2a:	4a32      	ldr	r2, [pc, #200]	; (82df4 <SystemCoreClockUpdate+0x170>)
   82d2c:	601a      	str	r2, [r3, #0]
   82d2e:	e01c      	b.n	82d6a <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82d30:	4b2f      	ldr	r3, [pc, #188]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82d32:	4a31      	ldr	r2, [pc, #196]	; (82df8 <SystemCoreClockUpdate+0x174>)
   82d34:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82d36:	4b2c      	ldr	r3, [pc, #176]	; (82de8 <SystemCoreClockUpdate+0x164>)
   82d38:	6a1b      	ldr	r3, [r3, #32]
   82d3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82d3e:	2b10      	cmp	r3, #16
   82d40:	d004      	beq.n	82d4c <SystemCoreClockUpdate+0xc8>
   82d42:	2b20      	cmp	r3, #32
   82d44:	d008      	beq.n	82d58 <SystemCoreClockUpdate+0xd4>
   82d46:	2b00      	cmp	r3, #0
   82d48:	d00e      	beq.n	82d68 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   82d4a:	e00e      	b.n	82d6a <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   82d4c:	4b28      	ldr	r3, [pc, #160]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82d4e:	681b      	ldr	r3, [r3, #0]
   82d50:	005b      	lsls	r3, r3, #1
   82d52:	4a27      	ldr	r2, [pc, #156]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82d54:	6013      	str	r3, [r2, #0]
				break;
   82d56:	e008      	b.n	82d6a <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   82d58:	4b25      	ldr	r3, [pc, #148]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82d5a:	681a      	ldr	r2, [r3, #0]
   82d5c:	4613      	mov	r3, r2
   82d5e:	005b      	lsls	r3, r3, #1
   82d60:	4413      	add	r3, r2
   82d62:	4a23      	ldr	r2, [pc, #140]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82d64:	6013      	str	r3, [r2, #0]
				break;
   82d66:	e000      	b.n	82d6a <SystemCoreClockUpdate+0xe6>
				break;
   82d68:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82d6a:	4b1f      	ldr	r3, [pc, #124]	; (82de8 <SystemCoreClockUpdate+0x164>)
   82d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82d6e:	f003 0303 	and.w	r3, r3, #3
   82d72:	2b02      	cmp	r3, #2
   82d74:	d115      	bne.n	82da2 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82d76:	4b1c      	ldr	r3, [pc, #112]	; (82de8 <SystemCoreClockUpdate+0x164>)
   82d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82d7a:	0c1b      	lsrs	r3, r3, #16
   82d7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                          CKGR_PLLAR_MULA_Pos) + 1U);
   82d80:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82d82:	4a1b      	ldr	r2, [pc, #108]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82d84:	6812      	ldr	r2, [r2, #0]
   82d86:	fb02 f303 	mul.w	r3, r2, r3
   82d8a:	4a19      	ldr	r2, [pc, #100]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82d8c:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   82d8e:	4b16      	ldr	r3, [pc, #88]	; (82de8 <SystemCoreClockUpdate+0x164>)
   82d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82d92:	b2db      	uxtb	r3, r3
   82d94:	4a16      	ldr	r2, [pc, #88]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82d96:	6812      	ldr	r2, [r2, #0]
   82d98:	fbb2 f3f3 	udiv	r3, r2, r3
   82d9c:	4a14      	ldr	r2, [pc, #80]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82d9e:	6013      	str	r3, [r2, #0]
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   82da0:	e002      	b.n	82da8 <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82da2:	4b13      	ldr	r3, [pc, #76]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82da4:	4a15      	ldr	r2, [pc, #84]	; (82dfc <SystemCoreClockUpdate+0x178>)
   82da6:	601a      	str	r2, [r3, #0]
		break;
   82da8:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82daa:	4b0f      	ldr	r3, [pc, #60]	; (82de8 <SystemCoreClockUpdate+0x164>)
   82dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82dae:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82db2:	2b70      	cmp	r3, #112	; 0x70
   82db4:	d108      	bne.n	82dc8 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   82db6:	4b0e      	ldr	r3, [pc, #56]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82db8:	681b      	ldr	r3, [r3, #0]
   82dba:	4a11      	ldr	r2, [pc, #68]	; (82e00 <SystemCoreClockUpdate+0x17c>)
   82dbc:	fba2 2303 	umull	r2, r3, r2, r3
   82dc0:	085b      	lsrs	r3, r3, #1
   82dc2:	4a0b      	ldr	r2, [pc, #44]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82dc4:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                           PMC_MCKR_PRES_Pos);
	}
}
   82dc6:	e00a      	b.n	82dde <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82dc8:	4b07      	ldr	r3, [pc, #28]	; (82de8 <SystemCoreClockUpdate+0x164>)
   82dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82dcc:	091b      	lsrs	r3, r3, #4
   82dce:	f003 0307 	and.w	r3, r3, #7
   82dd2:	4a07      	ldr	r2, [pc, #28]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82dd4:	6812      	ldr	r2, [r2, #0]
   82dd6:	fa22 f303 	lsr.w	r3, r2, r3
   82dda:	4a05      	ldr	r2, [pc, #20]	; (82df0 <SystemCoreClockUpdate+0x16c>)
   82ddc:	6013      	str	r3, [r2, #0]
}
   82dde:	bf00      	nop
   82de0:	46bd      	mov	sp, r7
   82de2:	bc80      	pop	{r7}
   82de4:	4770      	bx	lr
   82de6:	bf00      	nop
   82de8:	400e0400 	.word	0x400e0400
   82dec:	400e1210 	.word	0x400e1210
   82df0:	20000298 	.word	0x20000298
   82df4:	00b71b00 	.word	0x00b71b00
   82df8:	003d0900 	.word	0x003d0900
   82dfc:	0e4e1c00 	.word	0x0e4e1c00
   82e00:	aaaaaaab 	.word	0xaaaaaaab

00082e04 <udc_get_string_serial_name>:
 * to a suitable pointer. This will also require the serial number length
 * define USB_DEVICE_GET_SERIAL_NAME_LENGTH.
 */
#if defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	static const uint8_t *udc_get_string_serial_name(void)
	{
   82e04:	b480      	push	{r7}
   82e06:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_GET_SERIAL_NAME_POINTER;
   82e08:	4b02      	ldr	r3, [pc, #8]	; (82e14 <udc_get_string_serial_name+0x10>)
	}
   82e0a:	4618      	mov	r0, r3
   82e0c:	46bd      	mov	sp, r7
   82e0e:	bc80      	pop	{r7}
   82e10:	4770      	bx	lr
   82e12:	bf00      	nop
   82e14:	2000025c 	.word	0x2000025c

00082e18 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
   82e18:	b480      	push	{r7}
   82e1a:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
   82e1c:	4b02      	ldr	r3, [pc, #8]	; (82e28 <udc_get_interface_desc+0x10>)
   82e1e:	681b      	ldr	r3, [r3, #0]
}
   82e20:	4618      	mov	r0, r3
   82e22:	46bd      	mov	sp, r7
   82e24:	bc80      	pop	{r7}
   82e26:	4770      	bx	lr
   82e28:	2000129c 	.word	0x2000129c

00082e2c <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
   82e2c:	b480      	push	{r7}
   82e2e:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   82e30:	4b06      	ldr	r3, [pc, #24]	; (82e4c <udc_get_eof_conf+0x20>)
   82e32:	681b      	ldr	r3, [r3, #0]
   82e34:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   82e36:	4a05      	ldr	r2, [pc, #20]	; (82e4c <udc_get_eof_conf+0x20>)
   82e38:	6812      	ldr	r2, [r2, #0]
   82e3a:	6812      	ldr	r2, [r2, #0]
   82e3c:	8852      	ldrh	r2, [r2, #2]
   82e3e:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   82e40:	4413      	add	r3, r2
}
   82e42:	4618      	mov	r0, r3
   82e44:	46bd      	mov	sp, r7
   82e46:	bc80      	pop	{r7}
   82e48:	4770      	bx	lr
   82e4a:	bf00      	nop
   82e4c:	20001298 	.word	0x20001298

00082e50 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   82e50:	b580      	push	{r7, lr}
   82e52:	b084      	sub	sp, #16
   82e54:	af00      	add	r7, sp, #0
   82e56:	6078      	str	r0, [r7, #4]
   82e58:	460b      	mov	r3, r1
   82e5a:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   82e5c:	4b12      	ldr	r3, [pc, #72]	; (82ea8 <udc_next_desc_in_iface+0x58>)
   82e5e:	4798      	blx	r3
   82e60:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   82e62:	687b      	ldr	r3, [r7, #4]
   82e64:	781b      	ldrb	r3, [r3, #0]
   82e66:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   82e68:	687b      	ldr	r3, [r7, #4]
   82e6a:	4413      	add	r3, r2
   82e6c:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   82e6e:	e010      	b.n	82e92 <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   82e70:	687b      	ldr	r3, [r7, #4]
   82e72:	785b      	ldrb	r3, [r3, #1]
   82e74:	2b04      	cmp	r3, #4
   82e76:	d011      	beq.n	82e9c <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   82e78:	687b      	ldr	r3, [r7, #4]
   82e7a:	785b      	ldrb	r3, [r3, #1]
   82e7c:	78fa      	ldrb	r2, [r7, #3]
   82e7e:	429a      	cmp	r2, r3
   82e80:	d101      	bne.n	82e86 <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
   82e82:	687b      	ldr	r3, [r7, #4]
   82e84:	e00c      	b.n	82ea0 <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   82e86:	687b      	ldr	r3, [r7, #4]
   82e88:	781b      	ldrb	r3, [r3, #0]
   82e8a:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   82e8c:	687b      	ldr	r3, [r7, #4]
   82e8e:	4413      	add	r3, r2
   82e90:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
   82e92:	68fa      	ldr	r2, [r7, #12]
   82e94:	687b      	ldr	r3, [r7, #4]
   82e96:	429a      	cmp	r2, r3
   82e98:	d8ea      	bhi.n	82e70 <udc_next_desc_in_iface+0x20>
   82e9a:	e000      	b.n	82e9e <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
   82e9c:	bf00      	nop
	}
	return NULL; // No specific descriptor found
   82e9e:	2300      	movs	r3, #0
}
   82ea0:	4618      	mov	r0, r3
   82ea2:	3710      	adds	r7, #16
   82ea4:	46bd      	mov	sp, r7
   82ea6:	bd80      	pop	{r7, pc}
   82ea8:	00082e2d 	.word	0x00082e2d

00082eac <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   82eac:	b580      	push	{r7, lr}
   82eae:	b084      	sub	sp, #16
   82eb0:	af00      	add	r7, sp, #0
   82eb2:	4603      	mov	r3, r0
   82eb4:	460a      	mov	r2, r1
   82eb6:	71fb      	strb	r3, [r7, #7]
   82eb8:	4613      	mov	r3, r2
   82eba:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   82ebc:	4b1e      	ldr	r3, [pc, #120]	; (82f38 <udc_update_iface_desc+0x8c>)
   82ebe:	781b      	ldrb	r3, [r3, #0]
   82ec0:	2b00      	cmp	r3, #0
   82ec2:	d101      	bne.n	82ec8 <udc_update_iface_desc+0x1c>
		return false;
   82ec4:	2300      	movs	r3, #0
   82ec6:	e032      	b.n	82f2e <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   82ec8:	4b1c      	ldr	r3, [pc, #112]	; (82f3c <udc_update_iface_desc+0x90>)
   82eca:	681b      	ldr	r3, [r3, #0]
   82ecc:	681b      	ldr	r3, [r3, #0]
   82ece:	791b      	ldrb	r3, [r3, #4]
   82ed0:	79fa      	ldrb	r2, [r7, #7]
   82ed2:	429a      	cmp	r2, r3
   82ed4:	d301      	bcc.n	82eda <udc_update_iface_desc+0x2e>
		return false;
   82ed6:	2300      	movs	r3, #0
   82ed8:	e029      	b.n	82f2e <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
   82eda:	4b18      	ldr	r3, [pc, #96]	; (82f3c <udc_update_iface_desc+0x90>)
   82edc:	681b      	ldr	r3, [r3, #0]
   82ede:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   82ee0:	4a17      	ldr	r2, [pc, #92]	; (82f40 <udc_update_iface_desc+0x94>)
   82ee2:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   82ee4:	4b17      	ldr	r3, [pc, #92]	; (82f44 <udc_update_iface_desc+0x98>)
   82ee6:	4798      	blx	r3
   82ee8:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
   82eea:	e01a      	b.n	82f22 <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   82eec:	4b14      	ldr	r3, [pc, #80]	; (82f40 <udc_update_iface_desc+0x94>)
   82eee:	681b      	ldr	r3, [r3, #0]
   82ef0:	785b      	ldrb	r3, [r3, #1]
   82ef2:	2b04      	cmp	r3, #4
   82ef4:	d10d      	bne.n	82f12 <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   82ef6:	4b12      	ldr	r3, [pc, #72]	; (82f40 <udc_update_iface_desc+0x94>)
   82ef8:	681b      	ldr	r3, [r3, #0]
   82efa:	789b      	ldrb	r3, [r3, #2]
   82efc:	79fa      	ldrb	r2, [r7, #7]
   82efe:	429a      	cmp	r2, r3
   82f00:	d107      	bne.n	82f12 <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
   82f02:	4b0f      	ldr	r3, [pc, #60]	; (82f40 <udc_update_iface_desc+0x94>)
   82f04:	681b      	ldr	r3, [r3, #0]
   82f06:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   82f08:	79ba      	ldrb	r2, [r7, #6]
   82f0a:	429a      	cmp	r2, r3
   82f0c:	d101      	bne.n	82f12 <udc_update_iface_desc+0x66>
				return true; // Interface found
   82f0e:	2301      	movs	r3, #1
   82f10:	e00d      	b.n	82f2e <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   82f12:	4b0b      	ldr	r3, [pc, #44]	; (82f40 <udc_update_iface_desc+0x94>)
   82f14:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   82f16:	4a0a      	ldr	r2, [pc, #40]	; (82f40 <udc_update_iface_desc+0x94>)
   82f18:	6812      	ldr	r2, [r2, #0]
   82f1a:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   82f1c:	4413      	add	r3, r2
   82f1e:	4a08      	ldr	r2, [pc, #32]	; (82f40 <udc_update_iface_desc+0x94>)
   82f20:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   82f22:	4b07      	ldr	r3, [pc, #28]	; (82f40 <udc_update_iface_desc+0x94>)
   82f24:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
   82f26:	68fa      	ldr	r2, [r7, #12]
   82f28:	429a      	cmp	r2, r3
   82f2a:	d8df      	bhi.n	82eec <udc_update_iface_desc+0x40>
	}
	return false; // Interface not found
   82f2c:	2300      	movs	r3, #0
}
   82f2e:	4618      	mov	r0, r3
   82f30:	3710      	adds	r7, #16
   82f32:	46bd      	mov	sp, r7
   82f34:	bd80      	pop	{r7, pc}
   82f36:	bf00      	nop
   82f38:	20001296 	.word	0x20001296
   82f3c:	20001298 	.word	0x20001298
   82f40:	2000129c 	.word	0x2000129c
   82f44:	00082e2d 	.word	0x00082e2d

00082f48 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   82f48:	b580      	push	{r7, lr}
   82f4a:	b084      	sub	sp, #16
   82f4c:	af00      	add	r7, sp, #0
   82f4e:	4603      	mov	r3, r0
   82f50:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   82f52:	79fb      	ldrb	r3, [r7, #7]
   82f54:	2100      	movs	r1, #0
   82f56:	4618      	mov	r0, r3
   82f58:	4b1e      	ldr	r3, [pc, #120]	; (82fd4 <udc_iface_disable+0x8c>)
   82f5a:	4798      	blx	r3
   82f5c:	4603      	mov	r3, r0
   82f5e:	f083 0301 	eor.w	r3, r3, #1
   82f62:	b2db      	uxtb	r3, r3
   82f64:	2b00      	cmp	r3, #0
   82f66:	d001      	beq.n	82f6c <udc_iface_disable+0x24>
		return false;
   82f68:	2300      	movs	r3, #0
   82f6a:	e02f      	b.n	82fcc <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   82f6c:	4b1a      	ldr	r3, [pc, #104]	; (82fd8 <udc_iface_disable+0x90>)
   82f6e:	681b      	ldr	r3, [r3, #0]
   82f70:	685a      	ldr	r2, [r3, #4]
   82f72:	79fb      	ldrb	r3, [r7, #7]
   82f74:	009b      	lsls	r3, r3, #2
   82f76:	4413      	add	r3, r2
   82f78:	681b      	ldr	r3, [r3, #0]
   82f7a:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   82f7c:	68bb      	ldr	r3, [r7, #8]
   82f7e:	68db      	ldr	r3, [r3, #12]
   82f80:	4798      	blx	r3
   82f82:	4603      	mov	r3, r0
   82f84:	461a      	mov	r2, r3
   82f86:	79fb      	ldrb	r3, [r7, #7]
   82f88:	4611      	mov	r1, r2
   82f8a:	4618      	mov	r0, r3
   82f8c:	4b11      	ldr	r3, [pc, #68]	; (82fd4 <udc_iface_disable+0x8c>)
   82f8e:	4798      	blx	r3
   82f90:	4603      	mov	r3, r0
   82f92:	f083 0301 	eor.w	r3, r3, #1
   82f96:	b2db      	uxtb	r3, r3
   82f98:	2b00      	cmp	r3, #0
   82f9a:	d001      	beq.n	82fa0 <udc_iface_disable+0x58>
		return false;
   82f9c:	2300      	movs	r3, #0
   82f9e:	e015      	b.n	82fcc <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   82fa0:	4b0e      	ldr	r3, [pc, #56]	; (82fdc <udc_iface_disable+0x94>)
   82fa2:	681b      	ldr	r3, [r3, #0]
   82fa4:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   82fa6:	2105      	movs	r1, #5
   82fa8:	68f8      	ldr	r0, [r7, #12]
   82faa:	4b0d      	ldr	r3, [pc, #52]	; (82fe0 <udc_iface_disable+0x98>)
   82fac:	4798      	blx	r3
   82fae:	60f8      	str	r0, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   82fb0:	68fb      	ldr	r3, [r7, #12]
   82fb2:	2b00      	cmp	r3, #0
   82fb4:	d005      	beq.n	82fc2 <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   82fb6:	68fb      	ldr	r3, [r7, #12]
   82fb8:	789b      	ldrb	r3, [r3, #2]
   82fba:	4618      	mov	r0, r3
   82fbc:	4b09      	ldr	r3, [pc, #36]	; (82fe4 <udc_iface_disable+0x9c>)
   82fbe:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   82fc0:	e7f1      	b.n	82fa6 <udc_iface_disable+0x5e>
				break;
   82fc2:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
   82fc4:	68bb      	ldr	r3, [r7, #8]
   82fc6:	685b      	ldr	r3, [r3, #4]
   82fc8:	4798      	blx	r3
	return true;
   82fca:	2301      	movs	r3, #1
}
   82fcc:	4618      	mov	r0, r3
   82fce:	3710      	adds	r7, #16
   82fd0:	46bd      	mov	sp, r7
   82fd2:	bd80      	pop	{r7, pc}
   82fd4:	00082ead 	.word	0x00082ead
   82fd8:	20001298 	.word	0x20001298
   82fdc:	2000129c 	.word	0x2000129c
   82fe0:	00082e51 	.word	0x00082e51
   82fe4:	0008466d 	.word	0x0008466d

00082fe8 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   82fe8:	b580      	push	{r7, lr}
   82fea:	b084      	sub	sp, #16
   82fec:	af00      	add	r7, sp, #0
   82fee:	4603      	mov	r3, r0
   82ff0:	460a      	mov	r2, r1
   82ff2:	71fb      	strb	r3, [r7, #7]
   82ff4:	4613      	mov	r3, r2
   82ff6:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   82ff8:	79ba      	ldrb	r2, [r7, #6]
   82ffa:	79fb      	ldrb	r3, [r7, #7]
   82ffc:	4611      	mov	r1, r2
   82ffe:	4618      	mov	r0, r3
   83000:	4b1a      	ldr	r3, [pc, #104]	; (8306c <udc_iface_enable+0x84>)
   83002:	4798      	blx	r3
   83004:	4603      	mov	r3, r0
   83006:	f083 0301 	eor.w	r3, r3, #1
   8300a:	b2db      	uxtb	r3, r3
   8300c:	2b00      	cmp	r3, #0
   8300e:	d001      	beq.n	83014 <udc_iface_enable+0x2c>
		return false;
   83010:	2300      	movs	r3, #0
   83012:	e027      	b.n	83064 <udc_iface_enable+0x7c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   83014:	4b16      	ldr	r3, [pc, #88]	; (83070 <udc_iface_enable+0x88>)
   83016:	681b      	ldr	r3, [r3, #0]
   83018:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   8301a:	2105      	movs	r1, #5
   8301c:	68f8      	ldr	r0, [r7, #12]
   8301e:	4b15      	ldr	r3, [pc, #84]	; (83074 <udc_iface_enable+0x8c>)
   83020:	4798      	blx	r3
   83022:	60f8      	str	r0, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   83024:	68fb      	ldr	r3, [r7, #12]
   83026:	2b00      	cmp	r3, #0
   83028:	d011      	beq.n	8304e <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   8302a:	68fb      	ldr	r3, [r7, #12]
   8302c:	7898      	ldrb	r0, [r3, #2]
   8302e:	68fb      	ldr	r3, [r7, #12]
   83030:	78d9      	ldrb	r1, [r3, #3]
   83032:	68fb      	ldr	r3, [r7, #12]
   83034:	889b      	ldrh	r3, [r3, #4]
   83036:	b29b      	uxth	r3, r3
   83038:	461a      	mov	r2, r3
   8303a:	4b0f      	ldr	r3, [pc, #60]	; (83078 <udc_iface_enable+0x90>)
   8303c:	4798      	blx	r3
   8303e:	4603      	mov	r3, r0
   83040:	f083 0301 	eor.w	r3, r3, #1
   83044:	b2db      	uxtb	r3, r3
   83046:	2b00      	cmp	r3, #0
   83048:	d0e7      	beq.n	8301a <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
   8304a:	2300      	movs	r3, #0
   8304c:	e00a      	b.n	83064 <udc_iface_enable+0x7c>
			break;
   8304e:	bf00      	nop
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   83050:	4b0a      	ldr	r3, [pc, #40]	; (8307c <udc_iface_enable+0x94>)
   83052:	681b      	ldr	r3, [r3, #0]
   83054:	685a      	ldr	r2, [r3, #4]
   83056:	79fb      	ldrb	r3, [r7, #7]
   83058:	009b      	lsls	r3, r3, #2
   8305a:	4413      	add	r3, r2
   8305c:	681b      	ldr	r3, [r3, #0]
   8305e:	681b      	ldr	r3, [r3, #0]
   83060:	4798      	blx	r3
   83062:	4603      	mov	r3, r0
}
   83064:	4618      	mov	r0, r3
   83066:	3710      	adds	r7, #16
   83068:	46bd      	mov	sp, r7
   8306a:	bd80      	pop	{r7, pc}
   8306c:	00082ead 	.word	0x00082ead
   83070:	2000129c 	.word	0x2000129c
   83074:	00082e51 	.word	0x00082e51
   83078:	000842c1 	.word	0x000842c1
   8307c:	20001298 	.word	0x20001298

00083080 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   83080:	b580      	push	{r7, lr}
   83082:	af00      	add	r7, sp, #0
	udd_enable();
   83084:	4b01      	ldr	r3, [pc, #4]	; (8308c <udc_start+0xc>)
   83086:	4798      	blx	r3
}
   83088:	bf00      	nop
   8308a:	bd80      	pop	{r7, pc}
   8308c:	0008407d 	.word	0x0008407d

00083090 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   83090:	b580      	push	{r7, lr}
   83092:	b082      	sub	sp, #8
   83094:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   83096:	4b0f      	ldr	r3, [pc, #60]	; (830d4 <udc_reset+0x44>)
   83098:	781b      	ldrb	r3, [r3, #0]
   8309a:	2b00      	cmp	r3, #0
   8309c:	d010      	beq.n	830c0 <udc_reset+0x30>
		for (iface_num = 0;
   8309e:	2300      	movs	r3, #0
   830a0:	71fb      	strb	r3, [r7, #7]
   830a2:	e006      	b.n	830b2 <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   830a4:	79fb      	ldrb	r3, [r7, #7]
   830a6:	4618      	mov	r0, r3
   830a8:	4b0b      	ldr	r3, [pc, #44]	; (830d8 <udc_reset+0x48>)
   830aa:	4798      	blx	r3
				iface_num++) {
   830ac:	79fb      	ldrb	r3, [r7, #7]
   830ae:	3301      	adds	r3, #1
   830b0:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   830b2:	4b0a      	ldr	r3, [pc, #40]	; (830dc <udc_reset+0x4c>)
   830b4:	681b      	ldr	r3, [r3, #0]
   830b6:	681b      	ldr	r3, [r3, #0]
   830b8:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   830ba:	79fa      	ldrb	r2, [r7, #7]
   830bc:	429a      	cmp	r2, r3
   830be:	d3f1      	bcc.n	830a4 <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
   830c0:	4b04      	ldr	r3, [pc, #16]	; (830d4 <udc_reset+0x44>)
   830c2:	2200      	movs	r2, #0
   830c4:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   830c6:	4b06      	ldr	r3, [pc, #24]	; (830e0 <udc_reset+0x50>)
   830c8:	2200      	movs	r2, #0
   830ca:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
   830cc:	bf00      	nop
   830ce:	3708      	adds	r7, #8
   830d0:	46bd      	mov	sp, r7
   830d2:	bd80      	pop	{r7, pc}
   830d4:	20001296 	.word	0x20001296
   830d8:	00082f49 	.word	0x00082f49
   830dc:	20001298 	.word	0x20001298
   830e0:	20001294 	.word	0x20001294

000830e4 <udc_sof_notify>:

void udc_sof_notify(void)
{
   830e4:	b580      	push	{r7, lr}
   830e6:	b082      	sub	sp, #8
   830e8:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   830ea:	4b14      	ldr	r3, [pc, #80]	; (8313c <udc_sof_notify+0x58>)
   830ec:	781b      	ldrb	r3, [r3, #0]
   830ee:	2b00      	cmp	r3, #0
   830f0:	d01f      	beq.n	83132 <udc_sof_notify+0x4e>
		for (iface_num = 0;
   830f2:	2300      	movs	r3, #0
   830f4:	71fb      	strb	r3, [r7, #7]
   830f6:	e015      	b.n	83124 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   830f8:	4b11      	ldr	r3, [pc, #68]	; (83140 <udc_sof_notify+0x5c>)
   830fa:	681b      	ldr	r3, [r3, #0]
   830fc:	685a      	ldr	r2, [r3, #4]
   830fe:	79fb      	ldrb	r3, [r7, #7]
   83100:	009b      	lsls	r3, r3, #2
   83102:	4413      	add	r3, r2
   83104:	681b      	ldr	r3, [r3, #0]
   83106:	691b      	ldr	r3, [r3, #16]
   83108:	2b00      	cmp	r3, #0
   8310a:	d008      	beq.n	8311e <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   8310c:	4b0c      	ldr	r3, [pc, #48]	; (83140 <udc_sof_notify+0x5c>)
   8310e:	681b      	ldr	r3, [r3, #0]
   83110:	685a      	ldr	r2, [r3, #4]
   83112:	79fb      	ldrb	r3, [r7, #7]
   83114:	009b      	lsls	r3, r3, #2
   83116:	4413      	add	r3, r2
   83118:	681b      	ldr	r3, [r3, #0]
   8311a:	691b      	ldr	r3, [r3, #16]
   8311c:	4798      	blx	r3
				iface_num++) {
   8311e:	79fb      	ldrb	r3, [r7, #7]
   83120:	3301      	adds	r3, #1
   83122:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83124:	4b06      	ldr	r3, [pc, #24]	; (83140 <udc_sof_notify+0x5c>)
   83126:	681b      	ldr	r3, [r3, #0]
   83128:	681b      	ldr	r3, [r3, #0]
   8312a:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   8312c:	79fa      	ldrb	r2, [r7, #7]
   8312e:	429a      	cmp	r2, r3
   83130:	d3e2      	bcc.n	830f8 <udc_sof_notify+0x14>
			}
		}
	}
}
   83132:	bf00      	nop
   83134:	3708      	adds	r7, #8
   83136:	46bd      	mov	sp, r7
   83138:	bd80      	pop	{r7, pc}
   8313a:	bf00      	nop
   8313c:	20001296 	.word	0x20001296
   83140:	20001298 	.word	0x20001298

00083144 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
   83144:	b580      	push	{r7, lr}
   83146:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   83148:	4b06      	ldr	r3, [pc, #24]	; (83164 <udc_req_std_dev_get_status+0x20>)
   8314a:	88db      	ldrh	r3, [r3, #6]
   8314c:	2b02      	cmp	r3, #2
   8314e:	d001      	beq.n	83154 <udc_req_std_dev_get_status+0x10>
		return false;
   83150:	2300      	movs	r3, #0
   83152:	e004      	b.n	8315e <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   83154:	2102      	movs	r1, #2
   83156:	4804      	ldr	r0, [pc, #16]	; (83168 <udc_req_std_dev_get_status+0x24>)
   83158:	4b04      	ldr	r3, [pc, #16]	; (8316c <udc_req_std_dev_get_status+0x28>)
   8315a:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   8315c:	2301      	movs	r3, #1
}
   8315e:	4618      	mov	r0, r3
   83160:	bd80      	pop	{r7, pc}
   83162:	bf00      	nop
   83164:	20001320 	.word	0x20001320
   83168:	20001294 	.word	0x20001294
   8316c:	00084299 	.word	0x00084299

00083170 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
   83170:	b580      	push	{r7, lr}
   83172:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   83174:	4b0b      	ldr	r3, [pc, #44]	; (831a4 <udc_req_std_ep_get_status+0x34>)
   83176:	88db      	ldrh	r3, [r3, #6]
   83178:	2b02      	cmp	r3, #2
   8317a:	d001      	beq.n	83180 <udc_req_std_ep_get_status+0x10>
		return false;
   8317c:	2300      	movs	r3, #0
   8317e:	e00e      	b.n	8319e <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   83180:	4b08      	ldr	r3, [pc, #32]	; (831a4 <udc_req_std_ep_get_status+0x34>)
   83182:	889b      	ldrh	r3, [r3, #4]
   83184:	b2db      	uxtb	r3, r3
   83186:	4618      	mov	r0, r3
   83188:	4b07      	ldr	r3, [pc, #28]	; (831a8 <udc_req_std_ep_get_status+0x38>)
   8318a:	4798      	blx	r3
   8318c:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   8318e:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   83190:	4b06      	ldr	r3, [pc, #24]	; (831ac <udc_req_std_ep_get_status+0x3c>)
   83192:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   83194:	2102      	movs	r1, #2
   83196:	4805      	ldr	r0, [pc, #20]	; (831ac <udc_req_std_ep_get_status+0x3c>)
   83198:	4b05      	ldr	r3, [pc, #20]	; (831b0 <udc_req_std_ep_get_status+0x40>)
   8319a:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   8319c:	2301      	movs	r3, #1
}
   8319e:	4618      	mov	r0, r3
   831a0:	bd80      	pop	{r7, pc}
   831a2:	bf00      	nop
   831a4:	20001320 	.word	0x20001320
   831a8:	000846ed 	.word	0x000846ed
   831ac:	200012a0 	.word	0x200012a0
   831b0:	00084299 	.word	0x00084299

000831b4 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
   831b4:	b480      	push	{r7}
   831b6:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   831b8:	4b0b      	ldr	r3, [pc, #44]	; (831e8 <udc_req_std_dev_clear_feature+0x34>)
   831ba:	88db      	ldrh	r3, [r3, #6]
   831bc:	2b00      	cmp	r3, #0
   831be:	d001      	beq.n	831c4 <udc_req_std_dev_clear_feature+0x10>
		return false;
   831c0:	2300      	movs	r3, #0
   831c2:	e00d      	b.n	831e0 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   831c4:	4b08      	ldr	r3, [pc, #32]	; (831e8 <udc_req_std_dev_clear_feature+0x34>)
   831c6:	885b      	ldrh	r3, [r3, #2]
   831c8:	2b01      	cmp	r3, #1
   831ca:	d108      	bne.n	831de <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   831cc:	4b07      	ldr	r3, [pc, #28]	; (831ec <udc_req_std_dev_clear_feature+0x38>)
   831ce:	881b      	ldrh	r3, [r3, #0]
   831d0:	f023 0302 	bic.w	r3, r3, #2
   831d4:	b29a      	uxth	r2, r3
   831d6:	4b05      	ldr	r3, [pc, #20]	; (831ec <udc_req_std_dev_clear_feature+0x38>)
   831d8:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   831da:	2301      	movs	r3, #1
   831dc:	e000      	b.n	831e0 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
   831de:	2300      	movs	r3, #0
}
   831e0:	4618      	mov	r0, r3
   831e2:	46bd      	mov	sp, r7
   831e4:	bc80      	pop	{r7}
   831e6:	4770      	bx	lr
   831e8:	20001320 	.word	0x20001320
   831ec:	20001294 	.word	0x20001294

000831f0 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
   831f0:	b580      	push	{r7, lr}
   831f2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   831f4:	4b0a      	ldr	r3, [pc, #40]	; (83220 <udc_req_std_ep_clear_feature+0x30>)
   831f6:	88db      	ldrh	r3, [r3, #6]
   831f8:	2b00      	cmp	r3, #0
   831fa:	d001      	beq.n	83200 <udc_req_std_ep_clear_feature+0x10>
		return false;
   831fc:	2300      	movs	r3, #0
   831fe:	e00c      	b.n	8321a <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   83200:	4b07      	ldr	r3, [pc, #28]	; (83220 <udc_req_std_ep_clear_feature+0x30>)
   83202:	885b      	ldrh	r3, [r3, #2]
   83204:	2b00      	cmp	r3, #0
   83206:	d107      	bne.n	83218 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   83208:	4b05      	ldr	r3, [pc, #20]	; (83220 <udc_req_std_ep_clear_feature+0x30>)
   8320a:	889b      	ldrh	r3, [r3, #4]
   8320c:	b2db      	uxtb	r3, r3
   8320e:	4618      	mov	r0, r3
   83210:	4b04      	ldr	r3, [pc, #16]	; (83224 <udc_req_std_ep_clear_feature+0x34>)
   83212:	4798      	blx	r3
   83214:	4603      	mov	r3, r0
   83216:	e000      	b.n	8321a <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
   83218:	2300      	movs	r3, #0
}
   8321a:	4618      	mov	r0, r3
   8321c:	bd80      	pop	{r7, pc}
   8321e:	bf00      	nop
   83220:	20001320 	.word	0x20001320
   83224:	00084869 	.word	0x00084869

00083228 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
   83228:	b580      	push	{r7, lr}
   8322a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   8322c:	4b26      	ldr	r3, [pc, #152]	; (832c8 <udc_req_std_dev_set_feature+0xa0>)
   8322e:	88db      	ldrh	r3, [r3, #6]
   83230:	2b00      	cmp	r3, #0
   83232:	d001      	beq.n	83238 <udc_req_std_dev_set_feature+0x10>
		return false;
   83234:	2300      	movs	r3, #0
   83236:	e045      	b.n	832c4 <udc_req_std_dev_set_feature+0x9c>
	}

	switch (udd_g_ctrlreq.req.wValue) {
   83238:	4b23      	ldr	r3, [pc, #140]	; (832c8 <udc_req_std_dev_set_feature+0xa0>)
   8323a:	885b      	ldrh	r3, [r3, #2]
   8323c:	2b01      	cmp	r3, #1
   8323e:	d002      	beq.n	83246 <udc_req_std_dev_set_feature+0x1e>
   83240:	2b02      	cmp	r3, #2
   83242:	d002      	beq.n	8324a <udc_req_std_dev_set_feature+0x22>
			break;
		}
		break;
#endif
	default:
		break;
   83244:	e03d      	b.n	832c2 <udc_req_std_dev_set_feature+0x9a>
		return false;
   83246:	2300      	movs	r3, #0
   83248:	e03c      	b.n	832c4 <udc_req_std_dev_set_feature+0x9c>
		if (!udd_is_high_speed()) {
   8324a:	4b20      	ldr	r3, [pc, #128]	; (832cc <udc_req_std_dev_set_feature+0xa4>)
   8324c:	4798      	blx	r3
   8324e:	4603      	mov	r3, r0
   83250:	f083 0301 	eor.w	r3, r3, #1
   83254:	b2db      	uxtb	r3, r3
   83256:	2b00      	cmp	r3, #0
   83258:	d130      	bne.n	832bc <udc_req_std_dev_set_feature+0x94>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   8325a:	4b1b      	ldr	r3, [pc, #108]	; (832c8 <udc_req_std_dev_set_feature+0xa0>)
   8325c:	889b      	ldrh	r3, [r3, #4]
   8325e:	b2db      	uxtb	r3, r3
   83260:	2b00      	cmp	r3, #0
   83262:	d12d      	bne.n	832c0 <udc_req_std_dev_set_feature+0x98>
		udc_reset();
   83264:	4b1a      	ldr	r3, [pc, #104]	; (832d0 <udc_req_std_dev_set_feature+0xa8>)
   83266:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   83268:	4b17      	ldr	r3, [pc, #92]	; (832c8 <udc_req_std_dev_set_feature+0xa0>)
   8326a:	889b      	ldrh	r3, [r3, #4]
   8326c:	0a1b      	lsrs	r3, r3, #8
   8326e:	b29b      	uxth	r3, r3
   83270:	b2db      	uxtb	r3, r3
   83272:	3b01      	subs	r3, #1
   83274:	2b03      	cmp	r3, #3
   83276:	d81f      	bhi.n	832b8 <udc_req_std_dev_set_feature+0x90>
   83278:	a201      	add	r2, pc, #4	; (adr r2, 83280 <udc_req_std_dev_set_feature+0x58>)
   8327a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8327e:	bf00      	nop
   83280:	00083291 	.word	0x00083291
   83284:	0008329b 	.word	0x0008329b
   83288:	000832a5 	.word	0x000832a5
   8328c:	000832af 	.word	0x000832af
			udd_g_ctrlreq.callback = udd_test_mode_j;
   83290:	4b0d      	ldr	r3, [pc, #52]	; (832c8 <udc_req_std_dev_set_feature+0xa0>)
   83292:	4a10      	ldr	r2, [pc, #64]	; (832d4 <udc_req_std_dev_set_feature+0xac>)
   83294:	611a      	str	r2, [r3, #16]
			return true;
   83296:	2301      	movs	r3, #1
   83298:	e014      	b.n	832c4 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   8329a:	4b0b      	ldr	r3, [pc, #44]	; (832c8 <udc_req_std_dev_set_feature+0xa0>)
   8329c:	4a0e      	ldr	r2, [pc, #56]	; (832d8 <udc_req_std_dev_set_feature+0xb0>)
   8329e:	611a      	str	r2, [r3, #16]
			return true;
   832a0:	2301      	movs	r3, #1
   832a2:	e00f      	b.n	832c4 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   832a4:	4b08      	ldr	r3, [pc, #32]	; (832c8 <udc_req_std_dev_set_feature+0xa0>)
   832a6:	4a0d      	ldr	r2, [pc, #52]	; (832dc <udc_req_std_dev_set_feature+0xb4>)
   832a8:	611a      	str	r2, [r3, #16]
			return true;
   832aa:	2301      	movs	r3, #1
   832ac:	e00a      	b.n	832c4 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   832ae:	4b06      	ldr	r3, [pc, #24]	; (832c8 <udc_req_std_dev_set_feature+0xa0>)
   832b0:	4a0b      	ldr	r2, [pc, #44]	; (832e0 <udc_req_std_dev_set_feature+0xb8>)
   832b2:	611a      	str	r2, [r3, #16]
			return true;
   832b4:	2301      	movs	r3, #1
   832b6:	e005      	b.n	832c4 <udc_req_std_dev_set_feature+0x9c>
			break;
   832b8:	bf00      	nop
		break;
   832ba:	e002      	b.n	832c2 <udc_req_std_dev_set_feature+0x9a>
			break;
   832bc:	bf00      	nop
   832be:	e000      	b.n	832c2 <udc_req_std_dev_set_feature+0x9a>
			break;
   832c0:	bf00      	nop
	}
	return false;
   832c2:	2300      	movs	r3, #0
}
   832c4:	4618      	mov	r0, r3
   832c6:	bd80      	pop	{r7, pc}
   832c8:	20001320 	.word	0x20001320
   832cc:	00084215 	.word	0x00084215
   832d0:	00083091 	.word	0x00083091
   832d4:	00084b29 	.word	0x00084b29
   832d8:	00084b5d 	.word	0x00084b5d
   832dc:	00084b91 	.word	0x00084b91
   832e0:	00084bb5 	.word	0x00084bb5

000832e4 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
   832e4:	b580      	push	{r7, lr}
   832e6:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   832e8:	4b0d      	ldr	r3, [pc, #52]	; (83320 <udc_req_std_ep_set_feature+0x3c>)
   832ea:	88db      	ldrh	r3, [r3, #6]
   832ec:	2b00      	cmp	r3, #0
   832ee:	d001      	beq.n	832f4 <udc_req_std_ep_set_feature+0x10>
		return false;
   832f0:	2300      	movs	r3, #0
   832f2:	e012      	b.n	8331a <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   832f4:	4b0a      	ldr	r3, [pc, #40]	; (83320 <udc_req_std_ep_set_feature+0x3c>)
   832f6:	885b      	ldrh	r3, [r3, #2]
   832f8:	2b00      	cmp	r3, #0
   832fa:	d10d      	bne.n	83318 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   832fc:	4b08      	ldr	r3, [pc, #32]	; (83320 <udc_req_std_ep_set_feature+0x3c>)
   832fe:	889b      	ldrh	r3, [r3, #4]
   83300:	b2db      	uxtb	r3, r3
   83302:	4618      	mov	r0, r3
   83304:	4b07      	ldr	r3, [pc, #28]	; (83324 <udc_req_std_ep_set_feature+0x40>)
   83306:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   83308:	4b05      	ldr	r3, [pc, #20]	; (83320 <udc_req_std_ep_set_feature+0x3c>)
   8330a:	889b      	ldrh	r3, [r3, #4]
   8330c:	b2db      	uxtb	r3, r3
   8330e:	4618      	mov	r0, r3
   83310:	4b05      	ldr	r3, [pc, #20]	; (83328 <udc_req_std_ep_set_feature+0x44>)
   83312:	4798      	blx	r3
   83314:	4603      	mov	r3, r0
   83316:	e000      	b.n	8331a <udc_req_std_ep_set_feature+0x36>
	}
	return false;
   83318:	2300      	movs	r3, #0
}
   8331a:	4618      	mov	r0, r3
   8331c:	bd80      	pop	{r7, pc}
   8331e:	bf00      	nop
   83320:	20001320 	.word	0x20001320
   83324:	00084aa1 	.word	0x00084aa1
   83328:	00084755 	.word	0x00084755

0008332c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   8332c:	b580      	push	{r7, lr}
   8332e:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   83330:	4b05      	ldr	r3, [pc, #20]	; (83348 <udc_valid_address+0x1c>)
   83332:	885b      	ldrh	r3, [r3, #2]
   83334:	b2db      	uxtb	r3, r3
   83336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   8333a:	b2db      	uxtb	r3, r3
   8333c:	4618      	mov	r0, r3
   8333e:	4b03      	ldr	r3, [pc, #12]	; (8334c <udc_valid_address+0x20>)
   83340:	4798      	blx	r3
}
   83342:	bf00      	nop
   83344:	bd80      	pop	{r7, pc}
   83346:	bf00      	nop
   83348:	20001320 	.word	0x20001320
   8334c:	00084239 	.word	0x00084239

00083350 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
   83350:	b480      	push	{r7}
   83352:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83354:	4b06      	ldr	r3, [pc, #24]	; (83370 <udc_req_std_dev_set_address+0x20>)
   83356:	88db      	ldrh	r3, [r3, #6]
   83358:	2b00      	cmp	r3, #0
   8335a:	d001      	beq.n	83360 <udc_req_std_dev_set_address+0x10>
		return false;
   8335c:	2300      	movs	r3, #0
   8335e:	e003      	b.n	83368 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   83360:	4b03      	ldr	r3, [pc, #12]	; (83370 <udc_req_std_dev_set_address+0x20>)
   83362:	4a04      	ldr	r2, [pc, #16]	; (83374 <udc_req_std_dev_set_address+0x24>)
   83364:	611a      	str	r2, [r3, #16]
	return true;
   83366:	2301      	movs	r3, #1
}
   83368:	4618      	mov	r0, r3
   8336a:	46bd      	mov	sp, r7
   8336c:	bc80      	pop	{r7}
   8336e:	4770      	bx	lr
   83370:	20001320 	.word	0x20001320
   83374:	0008332d 	.word	0x0008332d

00083378 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
   83378:	b580      	push	{r7, lr}
   8337a:	b084      	sub	sp, #16
   8337c:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
   8337e:	2300      	movs	r3, #0
   83380:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   83382:	4b29      	ldr	r3, [pc, #164]	; (83428 <udc_req_std_dev_get_str_desc+0xb0>)
   83384:	885b      	ldrh	r3, [r3, #2]
   83386:	b2db      	uxtb	r3, r3
   83388:	2b03      	cmp	r3, #3
   8338a:	d820      	bhi.n	833ce <udc_req_std_dev_get_str_desc+0x56>
   8338c:	a201      	add	r2, pc, #4	; (adr r2, 83394 <udc_req_std_dev_get_str_desc+0x1c>)
   8338e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83392:	bf00      	nop
   83394:	000833a5 	.word	0x000833a5
   83398:	000833af 	.word	0x000833af
   8339c:	000833b9 	.word	0x000833b9
   833a0:	000833c3 	.word	0x000833c3
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   833a4:	2104      	movs	r1, #4
   833a6:	4821      	ldr	r0, [pc, #132]	; (8342c <udc_req_std_dev_get_str_desc+0xb4>)
   833a8:	4b21      	ldr	r3, [pc, #132]	; (83430 <udc_req_std_dev_get_str_desc+0xb8>)
   833aa:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
   833ac:	e011      	b.n	833d2 <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   833ae:	2315      	movs	r3, #21
   833b0:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
   833b2:	4b20      	ldr	r3, [pc, #128]	; (83434 <udc_req_std_dev_get_str_desc+0xbc>)
   833b4:	60bb      	str	r3, [r7, #8]
		break;
   833b6:	e00c      	b.n	833d2 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   833b8:	2310      	movs	r3, #16
   833ba:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
   833bc:	4b1e      	ldr	r3, [pc, #120]	; (83438 <udc_req_std_dev_get_str_desc+0xc0>)
   833be:	60bb      	str	r3, [r7, #8]
		break;
   833c0:	e007      	b.n	833d2 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   833c2:	2320      	movs	r3, #32
   833c4:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
   833c6:	4b1d      	ldr	r3, [pc, #116]	; (8343c <udc_req_std_dev_get_str_desc+0xc4>)
   833c8:	4798      	blx	r3
   833ca:	60b8      	str	r0, [r7, #8]
		break;
   833cc:	e001      	b.n	833d2 <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
   833ce:	2300      	movs	r3, #0
   833d0:	e026      	b.n	83420 <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
   833d2:	79fb      	ldrb	r3, [r7, #7]
   833d4:	2b00      	cmp	r3, #0
   833d6:	d022      	beq.n	8341e <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
   833d8:	2300      	movs	r3, #0
   833da:	73fb      	strb	r3, [r7, #15]
   833dc:	e00d      	b.n	833fa <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   833de:	7bfb      	ldrb	r3, [r7, #15]
   833e0:	68ba      	ldr	r2, [r7, #8]
   833e2:	4413      	add	r3, r2
   833e4:	781a      	ldrb	r2, [r3, #0]
   833e6:	7bfb      	ldrb	r3, [r7, #15]
   833e8:	b291      	uxth	r1, r2
   833ea:	4a15      	ldr	r2, [pc, #84]	; (83440 <udc_req_std_dev_get_str_desc+0xc8>)
   833ec:	005b      	lsls	r3, r3, #1
   833ee:	4413      	add	r3, r2
   833f0:	460a      	mov	r2, r1
   833f2:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
   833f4:	7bfb      	ldrb	r3, [r7, #15]
   833f6:	3301      	adds	r3, #1
   833f8:	73fb      	strb	r3, [r7, #15]
   833fa:	7bfa      	ldrb	r2, [r7, #15]
   833fc:	79fb      	ldrb	r3, [r7, #7]
   833fe:	429a      	cmp	r2, r3
   83400:	d3ed      	bcc.n	833de <udc_req_std_dev_get_str_desc+0x66>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   83402:	79fb      	ldrb	r3, [r7, #7]
   83404:	3301      	adds	r3, #1
   83406:	b2db      	uxtb	r3, r3
   83408:	005b      	lsls	r3, r3, #1
   8340a:	b2da      	uxtb	r2, r3
   8340c:	4b0c      	ldr	r3, [pc, #48]	; (83440 <udc_req_std_dev_get_str_desc+0xc8>)
   8340e:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
   83410:	4b0b      	ldr	r3, [pc, #44]	; (83440 <udc_req_std_dev_get_str_desc+0xc8>)
   83412:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
   83414:	b29b      	uxth	r3, r3
   83416:	4619      	mov	r1, r3
   83418:	4809      	ldr	r0, [pc, #36]	; (83440 <udc_req_std_dev_get_str_desc+0xc8>)
   8341a:	4b05      	ldr	r3, [pc, #20]	; (83430 <udc_req_std_dev_get_str_desc+0xb8>)
   8341c:	4798      	blx	r3
	}

	return true;
   8341e:	2301      	movs	r3, #1
}
   83420:	4618      	mov	r0, r3
   83422:	3710      	adds	r7, #16
   83424:	46bd      	mov	sp, r7
   83426:	bd80      	pop	{r7, pc}
   83428:	20001320 	.word	0x20001320
   8342c:	2000029c 	.word	0x2000029c
   83430:	00084299 	.word	0x00084299
   83434:	200002a0 	.word	0x200002a0
   83438:	200002b8 	.word	0x200002b8
   8343c:	00082e05 	.word	0x00082e05
   83440:	200002cc 	.word	0x200002cc

00083444 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
   83444:	b580      	push	{r7, lr}
   83446:	b082      	sub	sp, #8
   83448:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   8344a:	4b80      	ldr	r3, [pc, #512]	; (8364c <udc_req_std_dev_get_descriptor+0x208>)
   8344c:	885b      	ldrh	r3, [r3, #2]
   8344e:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   83450:	4b7e      	ldr	r3, [pc, #504]	; (8364c <udc_req_std_dev_get_descriptor+0x208>)
   83452:	885b      	ldrh	r3, [r3, #2]
   83454:	0a1b      	lsrs	r3, r3, #8
   83456:	b29b      	uxth	r3, r3
   83458:	b2db      	uxtb	r3, r3
   8345a:	3b01      	subs	r3, #1
   8345c:	2b0e      	cmp	r3, #14
   8345e:	f200 80e2 	bhi.w	83626 <udc_req_std_dev_get_descriptor+0x1e2>
   83462:	a201      	add	r2, pc, #4	; (adr r2, 83468 <udc_req_std_dev_get_descriptor+0x24>)
   83464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83468:	000834a5 	.word	0x000834a5
   8346c:	000834e1 	.word	0x000834e1
   83470:	00083613 	.word	0x00083613
   83474:	00083627 	.word	0x00083627
   83478:	00083627 	.word	0x00083627
   8347c:	0008355b 	.word	0x0008355b
   83480:	00083571 	.word	0x00083571
   83484:	00083627 	.word	0x00083627
   83488:	00083627 	.word	0x00083627
   8348c:	00083627 	.word	0x00083627
   83490:	00083627 	.word	0x00083627
   83494:	00083627 	.word	0x00083627
   83498:	00083627 	.word	0x00083627
   8349c:	00083627 	.word	0x00083627
   834a0:	000835f1 	.word	0x000835f1
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   834a4:	4b6a      	ldr	r3, [pc, #424]	; (83650 <udc_req_std_dev_get_descriptor+0x20c>)
   834a6:	4798      	blx	r3
   834a8:	4603      	mov	r3, r0
   834aa:	f083 0301 	eor.w	r3, r3, #1
   834ae:	b2db      	uxtb	r3, r3
   834b0:	2b00      	cmp	r3, #0
   834b2:	d00a      	beq.n	834ca <udc_req_std_dev_get_descriptor+0x86>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
   834b4:	4b67      	ldr	r3, [pc, #412]	; (83654 <udc_req_std_dev_get_descriptor+0x210>)
   834b6:	689a      	ldr	r2, [r3, #8]
				udc_config.confdev_hs->bLength);
   834b8:	4b66      	ldr	r3, [pc, #408]	; (83654 <udc_req_std_dev_get_descriptor+0x210>)
   834ba:	689b      	ldr	r3, [r3, #8]
   834bc:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   834be:	b29b      	uxth	r3, r3
   834c0:	4619      	mov	r1, r3
   834c2:	4610      	mov	r0, r2
   834c4:	4b64      	ldr	r3, [pc, #400]	; (83658 <udc_req_std_dev_get_descriptor+0x214>)
   834c6:	4798      	blx	r3
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
   834c8:	e0b0      	b.n	8362c <udc_req_std_dev_get_descriptor+0x1e8>
				(uint8_t *) udc_config.confdev_lsfs,
   834ca:	4b62      	ldr	r3, [pc, #392]	; (83654 <udc_req_std_dev_get_descriptor+0x210>)
   834cc:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
   834ce:	4b61      	ldr	r3, [pc, #388]	; (83654 <udc_req_std_dev_get_descriptor+0x210>)
   834d0:	681b      	ldr	r3, [r3, #0]
   834d2:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   834d4:	b29b      	uxth	r3, r3
   834d6:	4619      	mov	r1, r3
   834d8:	4610      	mov	r0, r2
   834da:	4b5f      	ldr	r3, [pc, #380]	; (83658 <udc_req_std_dev_get_descriptor+0x214>)
   834dc:	4798      	blx	r3
		break;
   834de:	e0a5      	b.n	8362c <udc_req_std_dev_get_descriptor+0x1e8>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   834e0:	4b5b      	ldr	r3, [pc, #364]	; (83650 <udc_req_std_dev_get_descriptor+0x20c>)
   834e2:	4798      	blx	r3
   834e4:	4603      	mov	r3, r0
   834e6:	2b00      	cmp	r3, #0
   834e8:	d019      	beq.n	8351e <udc_req_std_dev_get_descriptor+0xda>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   834ea:	4b5a      	ldr	r3, [pc, #360]	; (83654 <udc_req_std_dev_get_descriptor+0x210>)
   834ec:	689b      	ldr	r3, [r3, #8]
   834ee:	7c5b      	ldrb	r3, [r3, #17]
   834f0:	79fa      	ldrb	r2, [r7, #7]
   834f2:	429a      	cmp	r2, r3
   834f4:	d301      	bcc.n	834fa <udc_req_std_dev_get_descriptor+0xb6>
					bNumConfigurations) {
				return false;
   834f6:	2300      	movs	r3, #0
   834f8:	e0a3      	b.n	83642 <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   834fa:	4b56      	ldr	r3, [pc, #344]	; (83654 <udc_req_std_dev_get_descriptor+0x210>)
   834fc:	691a      	ldr	r2, [r3, #16]
   834fe:	79fb      	ldrb	r3, [r7, #7]
   83500:	00db      	lsls	r3, r3, #3
   83502:	4413      	add	r3, r2
   83504:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   83506:	4b53      	ldr	r3, [pc, #332]	; (83654 <udc_req_std_dev_get_descriptor+0x210>)
   83508:	691a      	ldr	r2, [r3, #16]
   8350a:	79fb      	ldrb	r3, [r7, #7]
   8350c:	00db      	lsls	r3, r3, #3
   8350e:	4413      	add	r3, r2
   83510:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   83512:	885b      	ldrh	r3, [r3, #2]
   83514:	b29b      	uxth	r3, r3
   83516:	4619      	mov	r1, r3
   83518:	4b4f      	ldr	r3, [pc, #316]	; (83658 <udc_req_std_dev_get_descriptor+0x214>)
   8351a:	4798      	blx	r3
   8351c:	e018      	b.n	83550 <udc_req_std_dev_get_descriptor+0x10c>
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   8351e:	4b4d      	ldr	r3, [pc, #308]	; (83654 <udc_req_std_dev_get_descriptor+0x210>)
   83520:	681b      	ldr	r3, [r3, #0]
   83522:	7c5b      	ldrb	r3, [r3, #17]
   83524:	79fa      	ldrb	r2, [r7, #7]
   83526:	429a      	cmp	r2, r3
   83528:	d301      	bcc.n	8352e <udc_req_std_dev_get_descriptor+0xea>
					bNumConfigurations) {
				return false;
   8352a:	2300      	movs	r3, #0
   8352c:	e089      	b.n	83642 <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   8352e:	4b49      	ldr	r3, [pc, #292]	; (83654 <udc_req_std_dev_get_descriptor+0x210>)
   83530:	685a      	ldr	r2, [r3, #4]
   83532:	79fb      	ldrb	r3, [r7, #7]
   83534:	00db      	lsls	r3, r3, #3
   83536:	4413      	add	r3, r2
   83538:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   8353a:	4b46      	ldr	r3, [pc, #280]	; (83654 <udc_req_std_dev_get_descriptor+0x210>)
   8353c:	685a      	ldr	r2, [r3, #4]
   8353e:	79fb      	ldrb	r3, [r7, #7]
   83540:	00db      	lsls	r3, r3, #3
   83542:	4413      	add	r3, r2
   83544:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   83546:	885b      	ldrh	r3, [r3, #2]
   83548:	b29b      	uxth	r3, r3
   8354a:	4619      	mov	r1, r3
   8354c:	4b42      	ldr	r3, [pc, #264]	; (83658 <udc_req_std_dev_get_descriptor+0x214>)
   8354e:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   83550:	4b3e      	ldr	r3, [pc, #248]	; (8364c <udc_req_std_dev_get_descriptor+0x208>)
   83552:	689b      	ldr	r3, [r3, #8]
   83554:	2202      	movs	r2, #2
   83556:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
   83558:	e068      	b.n	8362c <udc_req_std_dev_get_descriptor+0x1e8>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   8355a:	4b3e      	ldr	r3, [pc, #248]	; (83654 <udc_req_std_dev_get_descriptor+0x210>)
   8355c:	68da      	ldr	r2, [r3, #12]
				udc_config.qualifier->bLength);
   8355e:	4b3d      	ldr	r3, [pc, #244]	; (83654 <udc_req_std_dev_get_descriptor+0x210>)
   83560:	68db      	ldr	r3, [r3, #12]
   83562:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   83564:	b29b      	uxth	r3, r3
   83566:	4619      	mov	r1, r3
   83568:	4610      	mov	r0, r2
   8356a:	4b3b      	ldr	r3, [pc, #236]	; (83658 <udc_req_std_dev_get_descriptor+0x214>)
   8356c:	4798      	blx	r3
		break;
   8356e:	e05d      	b.n	8362c <udc_req_std_dev_get_descriptor+0x1e8>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   83570:	4b37      	ldr	r3, [pc, #220]	; (83650 <udc_req_std_dev_get_descriptor+0x20c>)
   83572:	4798      	blx	r3
   83574:	4603      	mov	r3, r0
   83576:	f083 0301 	eor.w	r3, r3, #1
   8357a:	b2db      	uxtb	r3, r3
   8357c:	2b00      	cmp	r3, #0
   8357e:	d019      	beq.n	835b4 <udc_req_std_dev_get_descriptor+0x170>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   83580:	4b34      	ldr	r3, [pc, #208]	; (83654 <udc_req_std_dev_get_descriptor+0x210>)
   83582:	689b      	ldr	r3, [r3, #8]
   83584:	7c5b      	ldrb	r3, [r3, #17]
   83586:	79fa      	ldrb	r2, [r7, #7]
   83588:	429a      	cmp	r2, r3
   8358a:	d301      	bcc.n	83590 <udc_req_std_dev_get_descriptor+0x14c>
					bNumConfigurations) {
				return false;
   8358c:	2300      	movs	r3, #0
   8358e:	e058      	b.n	83642 <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   83590:	4b30      	ldr	r3, [pc, #192]	; (83654 <udc_req_std_dev_get_descriptor+0x210>)
   83592:	691a      	ldr	r2, [r3, #16]
   83594:	79fb      	ldrb	r3, [r7, #7]
   83596:	00db      	lsls	r3, r3, #3
   83598:	4413      	add	r3, r2
   8359a:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   8359c:	4b2d      	ldr	r3, [pc, #180]	; (83654 <udc_req_std_dev_get_descriptor+0x210>)
   8359e:	691a      	ldr	r2, [r3, #16]
   835a0:	79fb      	ldrb	r3, [r7, #7]
   835a2:	00db      	lsls	r3, r3, #3
   835a4:	4413      	add	r3, r2
   835a6:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   835a8:	885b      	ldrh	r3, [r3, #2]
   835aa:	b29b      	uxth	r3, r3
   835ac:	4619      	mov	r1, r3
   835ae:	4b2a      	ldr	r3, [pc, #168]	; (83658 <udc_req_std_dev_get_descriptor+0x214>)
   835b0:	4798      	blx	r3
   835b2:	e018      	b.n	835e6 <udc_req_std_dev_get_descriptor+0x1a2>
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   835b4:	4b27      	ldr	r3, [pc, #156]	; (83654 <udc_req_std_dev_get_descriptor+0x210>)
   835b6:	681b      	ldr	r3, [r3, #0]
   835b8:	7c5b      	ldrb	r3, [r3, #17]
   835ba:	79fa      	ldrb	r2, [r7, #7]
   835bc:	429a      	cmp	r2, r3
   835be:	d301      	bcc.n	835c4 <udc_req_std_dev_get_descriptor+0x180>
					bNumConfigurations) {
				return false;
   835c0:	2300      	movs	r3, #0
   835c2:	e03e      	b.n	83642 <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   835c4:	4b23      	ldr	r3, [pc, #140]	; (83654 <udc_req_std_dev_get_descriptor+0x210>)
   835c6:	685a      	ldr	r2, [r3, #4]
   835c8:	79fb      	ldrb	r3, [r7, #7]
   835ca:	00db      	lsls	r3, r3, #3
   835cc:	4413      	add	r3, r2
   835ce:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   835d0:	4b20      	ldr	r3, [pc, #128]	; (83654 <udc_req_std_dev_get_descriptor+0x210>)
   835d2:	685a      	ldr	r2, [r3, #4]
   835d4:	79fb      	ldrb	r3, [r7, #7]
   835d6:	00db      	lsls	r3, r3, #3
   835d8:	4413      	add	r3, r2
   835da:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   835dc:	885b      	ldrh	r3, [r3, #2]
   835de:	b29b      	uxth	r3, r3
   835e0:	4619      	mov	r1, r3
   835e2:	4b1d      	ldr	r3, [pc, #116]	; (83658 <udc_req_std_dev_get_descriptor+0x214>)
   835e4:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   835e6:	4b19      	ldr	r3, [pc, #100]	; (8364c <udc_req_std_dev_get_descriptor+0x208>)
   835e8:	689b      	ldr	r3, [r3, #8]
   835ea:	2207      	movs	r2, #7
   835ec:	705a      	strb	r2, [r3, #1]
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
   835ee:	e01d      	b.n	8362c <udc_req_std_dev_get_descriptor+0x1e8>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
   835f0:	4b18      	ldr	r3, [pc, #96]	; (83654 <udc_req_std_dev_get_descriptor+0x210>)
   835f2:	695b      	ldr	r3, [r3, #20]
   835f4:	2b00      	cmp	r3, #0
   835f6:	d101      	bne.n	835fc <udc_req_std_dev_get_descriptor+0x1b8>
			return false;
   835f8:	2300      	movs	r3, #0
   835fa:	e022      	b.n	83642 <udc_req_std_dev_get_descriptor+0x1fe>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   835fc:	4b15      	ldr	r3, [pc, #84]	; (83654 <udc_req_std_dev_get_descriptor+0x210>)
   835fe:	695a      	ldr	r2, [r3, #20]
				udc_config.conf_bos->wTotalLength);
   83600:	4b14      	ldr	r3, [pc, #80]	; (83654 <udc_req_std_dev_get_descriptor+0x210>)
   83602:	695b      	ldr	r3, [r3, #20]
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   83604:	885b      	ldrh	r3, [r3, #2]
   83606:	b29b      	uxth	r3, r3
   83608:	4619      	mov	r1, r3
   8360a:	4610      	mov	r0, r2
   8360c:	4b12      	ldr	r3, [pc, #72]	; (83658 <udc_req_std_dev_get_descriptor+0x214>)
   8360e:	4798      	blx	r3
		break;
   83610:	e00c      	b.n	8362c <udc_req_std_dev_get_descriptor+0x1e8>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
   83612:	4b12      	ldr	r3, [pc, #72]	; (8365c <udc_req_std_dev_get_descriptor+0x218>)
   83614:	4798      	blx	r3
   83616:	4603      	mov	r3, r0
   83618:	f083 0301 	eor.w	r3, r3, #1
   8361c:	b2db      	uxtb	r3, r3
   8361e:	2b00      	cmp	r3, #0
   83620:	d003      	beq.n	8362a <udc_req_std_dev_get_descriptor+0x1e6>
			return false;
   83622:	2300      	movs	r3, #0
   83624:	e00d      	b.n	83642 <udc_req_std_dev_get_descriptor+0x1fe>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   83626:	2300      	movs	r3, #0
   83628:	e00b      	b.n	83642 <udc_req_std_dev_get_descriptor+0x1fe>
		break;
   8362a:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   8362c:	4b07      	ldr	r3, [pc, #28]	; (8364c <udc_req_std_dev_get_descriptor+0x208>)
   8362e:	88da      	ldrh	r2, [r3, #6]
   83630:	4b06      	ldr	r3, [pc, #24]	; (8364c <udc_req_std_dev_get_descriptor+0x208>)
   83632:	899b      	ldrh	r3, [r3, #12]
   83634:	429a      	cmp	r2, r3
   83636:	d203      	bcs.n	83640 <udc_req_std_dev_get_descriptor+0x1fc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   83638:	4b04      	ldr	r3, [pc, #16]	; (8364c <udc_req_std_dev_get_descriptor+0x208>)
   8363a:	88da      	ldrh	r2, [r3, #6]
   8363c:	4b03      	ldr	r3, [pc, #12]	; (8364c <udc_req_std_dev_get_descriptor+0x208>)
   8363e:	819a      	strh	r2, [r3, #12]
	}
	return true;
   83640:	2301      	movs	r3, #1
}
   83642:	4618      	mov	r0, r3
   83644:	3708      	adds	r7, #8
   83646:	46bd      	mov	sp, r7
   83648:	bd80      	pop	{r7, pc}
   8364a:	bf00      	nop
   8364c:	20001320 	.word	0x20001320
   83650:	00084215 	.word	0x00084215
   83654:	20000398 	.word	0x20000398
   83658:	00084299 	.word	0x00084299
   8365c:	00083379 	.word	0x00083379

00083660 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
   83660:	b580      	push	{r7, lr}
   83662:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
   83664:	4b06      	ldr	r3, [pc, #24]	; (83680 <udc_req_std_dev_get_configuration+0x20>)
   83666:	88db      	ldrh	r3, [r3, #6]
   83668:	2b01      	cmp	r3, #1
   8366a:	d001      	beq.n	83670 <udc_req_std_dev_get_configuration+0x10>
		return false;
   8366c:	2300      	movs	r3, #0
   8366e:	e004      	b.n	8367a <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   83670:	2101      	movs	r1, #1
   83672:	4804      	ldr	r0, [pc, #16]	; (83684 <udc_req_std_dev_get_configuration+0x24>)
   83674:	4b04      	ldr	r3, [pc, #16]	; (83688 <udc_req_std_dev_get_configuration+0x28>)
   83676:	4798      	blx	r3
	return true;
   83678:	2301      	movs	r3, #1
}
   8367a:	4618      	mov	r0, r3
   8367c:	bd80      	pop	{r7, pc}
   8367e:	bf00      	nop
   83680:	20001320 	.word	0x20001320
   83684:	20001296 	.word	0x20001296
   83688:	00084299 	.word	0x00084299

0008368c <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
   8368c:	b580      	push	{r7, lr}
   8368e:	b082      	sub	sp, #8
   83690:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   83692:	4b37      	ldr	r3, [pc, #220]	; (83770 <udc_req_std_dev_set_configuration+0xe4>)
   83694:	88db      	ldrh	r3, [r3, #6]
   83696:	2b00      	cmp	r3, #0
   83698:	d001      	beq.n	8369e <udc_req_std_dev_set_configuration+0x12>
		return false;
   8369a:	2300      	movs	r3, #0
   8369c:	e063      	b.n	83766 <udc_req_std_dev_set_configuration+0xda>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   8369e:	4b35      	ldr	r3, [pc, #212]	; (83774 <udc_req_std_dev_set_configuration+0xe8>)
   836a0:	4798      	blx	r3
   836a2:	4603      	mov	r3, r0
   836a4:	2b00      	cmp	r3, #0
   836a6:	d101      	bne.n	836ac <udc_req_std_dev_set_configuration+0x20>
		return false;
   836a8:	2300      	movs	r3, #0
   836aa:	e05c      	b.n	83766 <udc_req_std_dev_set_configuration+0xda>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   836ac:	4b32      	ldr	r3, [pc, #200]	; (83778 <udc_req_std_dev_set_configuration+0xec>)
   836ae:	4798      	blx	r3
   836b0:	4603      	mov	r3, r0
   836b2:	2b00      	cmp	r3, #0
   836b4:	d009      	beq.n	836ca <udc_req_std_dev_set_configuration+0x3e>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   836b6:	4b2e      	ldr	r3, [pc, #184]	; (83770 <udc_req_std_dev_set_configuration+0xe4>)
   836b8:	885b      	ldrh	r3, [r3, #2]
   836ba:	b2db      	uxtb	r3, r3
				udc_config.confdev_hs->bNumConfigurations) {
   836bc:	4a2f      	ldr	r2, [pc, #188]	; (8377c <udc_req_std_dev_set_configuration+0xf0>)
   836be:	6892      	ldr	r2, [r2, #8]
   836c0:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   836c2:	4293      	cmp	r3, r2
   836c4:	dd0b      	ble.n	836de <udc_req_std_dev_set_configuration+0x52>
			return false;
   836c6:	2300      	movs	r3, #0
   836c8:	e04d      	b.n	83766 <udc_req_std_dev_set_configuration+0xda>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   836ca:	4b29      	ldr	r3, [pc, #164]	; (83770 <udc_req_std_dev_set_configuration+0xe4>)
   836cc:	885b      	ldrh	r3, [r3, #2]
   836ce:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
   836d0:	4a2a      	ldr	r2, [pc, #168]	; (8377c <udc_req_std_dev_set_configuration+0xf0>)
   836d2:	6812      	ldr	r2, [r2, #0]
   836d4:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   836d6:	4293      	cmp	r3, r2
   836d8:	dd01      	ble.n	836de <udc_req_std_dev_set_configuration+0x52>
			return false;
   836da:	2300      	movs	r3, #0
   836dc:	e043      	b.n	83766 <udc_req_std_dev_set_configuration+0xda>
		}
	}

	// Reset current configuration
	udc_reset();
   836de:	4b28      	ldr	r3, [pc, #160]	; (83780 <udc_req_std_dev_set_configuration+0xf4>)
   836e0:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   836e2:	4b23      	ldr	r3, [pc, #140]	; (83770 <udc_req_std_dev_set_configuration+0xe4>)
   836e4:	885b      	ldrh	r3, [r3, #2]
   836e6:	b2da      	uxtb	r2, r3
   836e8:	4b26      	ldr	r3, [pc, #152]	; (83784 <udc_req_std_dev_set_configuration+0xf8>)
   836ea:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
   836ec:	4b25      	ldr	r3, [pc, #148]	; (83784 <udc_req_std_dev_set_configuration+0xf8>)
   836ee:	781b      	ldrb	r3, [r3, #0]
   836f0:	2b00      	cmp	r3, #0
   836f2:	d101      	bne.n	836f8 <udc_req_std_dev_set_configuration+0x6c>
		return true; // Default empty configuration requested
   836f4:	2301      	movs	r3, #1
   836f6:	e036      	b.n	83766 <udc_req_std_dev_set_configuration+0xda>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   836f8:	4b1f      	ldr	r3, [pc, #124]	; (83778 <udc_req_std_dev_set_configuration+0xec>)
   836fa:	4798      	blx	r3
   836fc:	4603      	mov	r3, r0
   836fe:	2b00      	cmp	r3, #0
   83700:	d00b      	beq.n	8371a <udc_req_std_dev_set_configuration+0x8e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   83702:	4b1e      	ldr	r3, [pc, #120]	; (8377c <udc_req_std_dev_set_configuration+0xf0>)
   83704:	691a      	ldr	r2, [r3, #16]
   83706:	4b1f      	ldr	r3, [pc, #124]	; (83784 <udc_req_std_dev_set_configuration+0xf8>)
   83708:	781b      	ldrb	r3, [r3, #0]
   8370a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   8370e:	3b01      	subs	r3, #1
   83710:	00db      	lsls	r3, r3, #3
   83712:	4413      	add	r3, r2
   83714:	4a1c      	ldr	r2, [pc, #112]	; (83788 <udc_req_std_dev_set_configuration+0xfc>)
   83716:	6013      	str	r3, [r2, #0]
   83718:	e00a      	b.n	83730 <udc_req_std_dev_set_configuration+0xa4>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   8371a:	4b18      	ldr	r3, [pc, #96]	; (8377c <udc_req_std_dev_set_configuration+0xf0>)
   8371c:	685a      	ldr	r2, [r3, #4]
   8371e:	4b19      	ldr	r3, [pc, #100]	; (83784 <udc_req_std_dev_set_configuration+0xf8>)
   83720:	781b      	ldrb	r3, [r3, #0]
   83722:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   83726:	3b01      	subs	r3, #1
   83728:	00db      	lsls	r3, r3, #3
   8372a:	4413      	add	r3, r2
   8372c:	4a16      	ldr	r2, [pc, #88]	; (83788 <udc_req_std_dev_set_configuration+0xfc>)
   8372e:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83730:	2300      	movs	r3, #0
   83732:	71fb      	strb	r3, [r7, #7]
   83734:	e00f      	b.n	83756 <udc_req_std_dev_set_configuration+0xca>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   83736:	79fb      	ldrb	r3, [r7, #7]
   83738:	2100      	movs	r1, #0
   8373a:	4618      	mov	r0, r3
   8373c:	4b13      	ldr	r3, [pc, #76]	; (8378c <udc_req_std_dev_set_configuration+0x100>)
   8373e:	4798      	blx	r3
   83740:	4603      	mov	r3, r0
   83742:	f083 0301 	eor.w	r3, r3, #1
   83746:	b2db      	uxtb	r3, r3
   83748:	2b00      	cmp	r3, #0
   8374a:	d001      	beq.n	83750 <udc_req_std_dev_set_configuration+0xc4>
			return false;
   8374c:	2300      	movs	r3, #0
   8374e:	e00a      	b.n	83766 <udc_req_std_dev_set_configuration+0xda>
			iface_num++) {
   83750:	79fb      	ldrb	r3, [r7, #7]
   83752:	3301      	adds	r3, #1
   83754:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83756:	4b0c      	ldr	r3, [pc, #48]	; (83788 <udc_req_std_dev_set_configuration+0xfc>)
   83758:	681b      	ldr	r3, [r3, #0]
   8375a:	681b      	ldr	r3, [r3, #0]
   8375c:	791b      	ldrb	r3, [r3, #4]
   8375e:	79fa      	ldrb	r2, [r7, #7]
   83760:	429a      	cmp	r2, r3
   83762:	d3e8      	bcc.n	83736 <udc_req_std_dev_set_configuration+0xaa>
		}
	}
	return true;
   83764:	2301      	movs	r3, #1
}
   83766:	4618      	mov	r0, r3
   83768:	3708      	adds	r7, #8
   8376a:	46bd      	mov	sp, r7
   8376c:	bd80      	pop	{r7, pc}
   8376e:	bf00      	nop
   83770:	20001320 	.word	0x20001320
   83774:	0008427d 	.word	0x0008427d
   83778:	00084215 	.word	0x00084215
   8377c:	20000398 	.word	0x20000398
   83780:	00083091 	.word	0x00083091
   83784:	20001296 	.word	0x20001296
   83788:	20001298 	.word	0x20001298
   8378c:	00082fe9 	.word	0x00082fe9

00083790 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
   83790:	b580      	push	{r7, lr}
   83792:	b082      	sub	sp, #8
   83794:	af00      	add	r7, sp, #0
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   83796:	4b1e      	ldr	r3, [pc, #120]	; (83810 <udc_req_std_iface_get_setting+0x80>)
   83798:	88db      	ldrh	r3, [r3, #6]
   8379a:	2b01      	cmp	r3, #1
   8379c:	d001      	beq.n	837a2 <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
   8379e:	2300      	movs	r3, #0
   837a0:	e032      	b.n	83808 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
   837a2:	4b1c      	ldr	r3, [pc, #112]	; (83814 <udc_req_std_iface_get_setting+0x84>)
   837a4:	781b      	ldrb	r3, [r3, #0]
   837a6:	2b00      	cmp	r3, #0
   837a8:	d101      	bne.n	837ae <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
   837aa:	2300      	movs	r3, #0
   837ac:	e02c      	b.n	83808 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   837ae:	4b18      	ldr	r3, [pc, #96]	; (83810 <udc_req_std_iface_get_setting+0x80>)
   837b0:	889b      	ldrh	r3, [r3, #4]
   837b2:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   837b4:	4b18      	ldr	r3, [pc, #96]	; (83818 <udc_req_std_iface_get_setting+0x88>)
   837b6:	681b      	ldr	r3, [r3, #0]
   837b8:	681b      	ldr	r3, [r3, #0]
   837ba:	791b      	ldrb	r3, [r3, #4]
   837bc:	79fa      	ldrb	r2, [r7, #7]
   837be:	429a      	cmp	r2, r3
   837c0:	d301      	bcc.n	837c6 <udc_req_std_iface_get_setting+0x36>
		return false;
   837c2:	2300      	movs	r3, #0
   837c4:	e020      	b.n	83808 <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   837c6:	79fb      	ldrb	r3, [r7, #7]
   837c8:	2100      	movs	r1, #0
   837ca:	4618      	mov	r0, r3
   837cc:	4b13      	ldr	r3, [pc, #76]	; (8381c <udc_req_std_iface_get_setting+0x8c>)
   837ce:	4798      	blx	r3
   837d0:	4603      	mov	r3, r0
   837d2:	f083 0301 	eor.w	r3, r3, #1
   837d6:	b2db      	uxtb	r3, r3
   837d8:	2b00      	cmp	r3, #0
   837da:	d001      	beq.n	837e0 <udc_req_std_iface_get_setting+0x50>
		return false;
   837dc:	2300      	movs	r3, #0
   837de:	e013      	b.n	83808 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   837e0:	4b0d      	ldr	r3, [pc, #52]	; (83818 <udc_req_std_iface_get_setting+0x88>)
   837e2:	681b      	ldr	r3, [r3, #0]
   837e4:	685a      	ldr	r2, [r3, #4]
   837e6:	79fb      	ldrb	r3, [r7, #7]
   837e8:	009b      	lsls	r3, r3, #2
   837ea:	4413      	add	r3, r2
   837ec:	681b      	ldr	r3, [r3, #0]
   837ee:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
   837f0:	683b      	ldr	r3, [r7, #0]
   837f2:	68db      	ldr	r3, [r3, #12]
   837f4:	4798      	blx	r3
   837f6:	4603      	mov	r3, r0
   837f8:	461a      	mov	r2, r3
   837fa:	4b09      	ldr	r3, [pc, #36]	; (83820 <udc_req_std_iface_get_setting+0x90>)
   837fc:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   837fe:	2101      	movs	r1, #1
   83800:	4807      	ldr	r0, [pc, #28]	; (83820 <udc_req_std_iface_get_setting+0x90>)
   83802:	4b08      	ldr	r3, [pc, #32]	; (83824 <udc_req_std_iface_get_setting+0x94>)
   83804:	4798      	blx	r3
	return true;
   83806:	2301      	movs	r3, #1
}
   83808:	4618      	mov	r0, r3
   8380a:	3708      	adds	r7, #8
   8380c:	46bd      	mov	sp, r7
   8380e:	bd80      	pop	{r7, pc}
   83810:	20001320 	.word	0x20001320
   83814:	20001296 	.word	0x20001296
   83818:	20001298 	.word	0x20001298
   8381c:	00082ead 	.word	0x00082ead
   83820:	200012a2 	.word	0x200012a2
   83824:	00084299 	.word	0x00084299

00083828 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
   83828:	b580      	push	{r7, lr}
   8382a:	b082      	sub	sp, #8
   8382c:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   8382e:	4b14      	ldr	r3, [pc, #80]	; (83880 <udc_req_std_iface_set_setting+0x58>)
   83830:	88db      	ldrh	r3, [r3, #6]
   83832:	2b00      	cmp	r3, #0
   83834:	d001      	beq.n	8383a <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
   83836:	2300      	movs	r3, #0
   83838:	e01e      	b.n	83878 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
   8383a:	4b12      	ldr	r3, [pc, #72]	; (83884 <udc_req_std_iface_set_setting+0x5c>)
   8383c:	781b      	ldrb	r3, [r3, #0]
   8383e:	2b00      	cmp	r3, #0
   83840:	d101      	bne.n	83846 <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
   83842:	2300      	movs	r3, #0
   83844:	e018      	b.n	83878 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   83846:	4b0e      	ldr	r3, [pc, #56]	; (83880 <udc_req_std_iface_set_setting+0x58>)
   83848:	889b      	ldrh	r3, [r3, #4]
   8384a:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   8384c:	4b0c      	ldr	r3, [pc, #48]	; (83880 <udc_req_std_iface_set_setting+0x58>)
   8384e:	885b      	ldrh	r3, [r3, #2]
   83850:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   83852:	79fb      	ldrb	r3, [r7, #7]
   83854:	4618      	mov	r0, r3
   83856:	4b0c      	ldr	r3, [pc, #48]	; (83888 <udc_req_std_iface_set_setting+0x60>)
   83858:	4798      	blx	r3
   8385a:	4603      	mov	r3, r0
   8385c:	f083 0301 	eor.w	r3, r3, #1
   83860:	b2db      	uxtb	r3, r3
   83862:	2b00      	cmp	r3, #0
   83864:	d001      	beq.n	8386a <udc_req_std_iface_set_setting+0x42>
		return false;
   83866:	2300      	movs	r3, #0
   83868:	e006      	b.n	83878 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   8386a:	79ba      	ldrb	r2, [r7, #6]
   8386c:	79fb      	ldrb	r3, [r7, #7]
   8386e:	4611      	mov	r1, r2
   83870:	4618      	mov	r0, r3
   83872:	4b06      	ldr	r3, [pc, #24]	; (8388c <udc_req_std_iface_set_setting+0x64>)
   83874:	4798      	blx	r3
   83876:	4603      	mov	r3, r0
}
   83878:	4618      	mov	r0, r3
   8387a:	3708      	adds	r7, #8
   8387c:	46bd      	mov	sp, r7
   8387e:	bd80      	pop	{r7, pc}
   83880:	20001320 	.word	0x20001320
   83884:	20001296 	.word	0x20001296
   83888:	00082f49 	.word	0x00082f49
   8388c:	00082fe9 	.word	0x00082fe9

00083890 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
   83890:	b580      	push	{r7, lr}
   83892:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   83894:	4b51      	ldr	r3, [pc, #324]	; (839dc <udc_reqstd+0x14c>)
   83896:	781b      	ldrb	r3, [r3, #0]
   83898:	b25b      	sxtb	r3, r3
   8389a:	2b00      	cmp	r3, #0
   8389c:	da40      	bge.n	83920 <udc_reqstd+0x90>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
   8389e:	4b4f      	ldr	r3, [pc, #316]	; (839dc <udc_reqstd+0x14c>)
   838a0:	88db      	ldrh	r3, [r3, #6]
   838a2:	2b00      	cmp	r3, #0
   838a4:	d101      	bne.n	838aa <udc_reqstd+0x1a>
			return false; // Error for USB host
   838a6:	2300      	movs	r3, #0
   838a8:	e096      	b.n	839d8 <udc_reqstd+0x148>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   838aa:	4b4c      	ldr	r3, [pc, #304]	; (839dc <udc_reqstd+0x14c>)
   838ac:	781b      	ldrb	r3, [r3, #0]
   838ae:	f003 031f 	and.w	r3, r3, #31
   838b2:	2b00      	cmp	r3, #0
   838b4:	d114      	bne.n	838e0 <udc_reqstd+0x50>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   838b6:	4b49      	ldr	r3, [pc, #292]	; (839dc <udc_reqstd+0x14c>)
   838b8:	785b      	ldrb	r3, [r3, #1]
   838ba:	2b06      	cmp	r3, #6
   838bc:	d008      	beq.n	838d0 <udc_reqstd+0x40>
   838be:	2b08      	cmp	r3, #8
   838c0:	d00a      	beq.n	838d8 <udc_reqstd+0x48>
   838c2:	2b00      	cmp	r3, #0
   838c4:	d000      	beq.n	838c8 <udc_reqstd+0x38>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
   838c6:	e00c      	b.n	838e2 <udc_reqstd+0x52>
				return udc_req_std_dev_get_status();
   838c8:	4b45      	ldr	r3, [pc, #276]	; (839e0 <udc_reqstd+0x150>)
   838ca:	4798      	blx	r3
   838cc:	4603      	mov	r3, r0
   838ce:	e083      	b.n	839d8 <udc_reqstd+0x148>
				return udc_req_std_dev_get_descriptor();
   838d0:	4b44      	ldr	r3, [pc, #272]	; (839e4 <udc_reqstd+0x154>)
   838d2:	4798      	blx	r3
   838d4:	4603      	mov	r3, r0
   838d6:	e07f      	b.n	839d8 <udc_reqstd+0x148>
				return udc_req_std_dev_get_configuration();
   838d8:	4b43      	ldr	r3, [pc, #268]	; (839e8 <udc_reqstd+0x158>)
   838da:	4798      	blx	r3
   838dc:	4603      	mov	r3, r0
   838de:	e07b      	b.n	839d8 <udc_reqstd+0x148>
			}
		}
   838e0:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   838e2:	4b3e      	ldr	r3, [pc, #248]	; (839dc <udc_reqstd+0x14c>)
   838e4:	781b      	ldrb	r3, [r3, #0]
   838e6:	f003 031f 	and.w	r3, r3, #31
   838ea:	2b01      	cmp	r3, #1
   838ec:	d108      	bne.n	83900 <udc_reqstd+0x70>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   838ee:	4b3b      	ldr	r3, [pc, #236]	; (839dc <udc_reqstd+0x14c>)
   838f0:	785b      	ldrb	r3, [r3, #1]
   838f2:	2b0a      	cmp	r3, #10
   838f4:	d000      	beq.n	838f8 <udc_reqstd+0x68>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
   838f6:	e004      	b.n	83902 <udc_reqstd+0x72>
				return udc_req_std_iface_get_setting();
   838f8:	4b3c      	ldr	r3, [pc, #240]	; (839ec <udc_reqstd+0x15c>)
   838fa:	4798      	blx	r3
   838fc:	4603      	mov	r3, r0
   838fe:	e06b      	b.n	839d8 <udc_reqstd+0x148>
			}
		}
   83900:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   83902:	4b36      	ldr	r3, [pc, #216]	; (839dc <udc_reqstd+0x14c>)
   83904:	781b      	ldrb	r3, [r3, #0]
   83906:	f003 031f 	and.w	r3, r3, #31
   8390a:	2b02      	cmp	r3, #2
   8390c:	d160      	bne.n	839d0 <udc_reqstd+0x140>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   8390e:	4b33      	ldr	r3, [pc, #204]	; (839dc <udc_reqstd+0x14c>)
   83910:	785b      	ldrb	r3, [r3, #1]
   83912:	2b00      	cmp	r3, #0
   83914:	d000      	beq.n	83918 <udc_reqstd+0x88>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
   83916:	e05e      	b.n	839d6 <udc_reqstd+0x146>
				return udc_req_std_ep_get_status();
   83918:	4b35      	ldr	r3, [pc, #212]	; (839f0 <udc_reqstd+0x160>)
   8391a:	4798      	blx	r3
   8391c:	4603      	mov	r3, r0
   8391e:	e05b      	b.n	839d8 <udc_reqstd+0x148>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   83920:	4b2e      	ldr	r3, [pc, #184]	; (839dc <udc_reqstd+0x14c>)
   83922:	781b      	ldrb	r3, [r3, #0]
   83924:	f003 031f 	and.w	r3, r3, #31
   83928:	2b00      	cmp	r3, #0
   8392a:	d129      	bne.n	83980 <udc_reqstd+0xf0>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   8392c:	4b2b      	ldr	r3, [pc, #172]	; (839dc <udc_reqstd+0x14c>)
   8392e:	785b      	ldrb	r3, [r3, #1]
   83930:	3b01      	subs	r3, #1
   83932:	2b08      	cmp	r3, #8
   83934:	d826      	bhi.n	83984 <udc_reqstd+0xf4>
   83936:	a201      	add	r2, pc, #4	; (adr r2, 8393c <udc_reqstd+0xac>)
   83938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8393c:	00083969 	.word	0x00083969
   83940:	00083985 	.word	0x00083985
   83944:	00083971 	.word	0x00083971
   83948:	00083985 	.word	0x00083985
   8394c:	00083961 	.word	0x00083961
   83950:	00083985 	.word	0x00083985
   83954:	00083985 	.word	0x00083985
   83958:	00083985 	.word	0x00083985
   8395c:	00083979 	.word	0x00083979
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
   83960:	4b24      	ldr	r3, [pc, #144]	; (839f4 <udc_reqstd+0x164>)
   83962:	4798      	blx	r3
   83964:	4603      	mov	r3, r0
   83966:	e037      	b.n	839d8 <udc_reqstd+0x148>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
   83968:	4b23      	ldr	r3, [pc, #140]	; (839f8 <udc_reqstd+0x168>)
   8396a:	4798      	blx	r3
   8396c:	4603      	mov	r3, r0
   8396e:	e033      	b.n	839d8 <udc_reqstd+0x148>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   83970:	4b22      	ldr	r3, [pc, #136]	; (839fc <udc_reqstd+0x16c>)
   83972:	4798      	blx	r3
   83974:	4603      	mov	r3, r0
   83976:	e02f      	b.n	839d8 <udc_reqstd+0x148>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
   83978:	4b21      	ldr	r3, [pc, #132]	; (83a00 <udc_reqstd+0x170>)
   8397a:	4798      	blx	r3
   8397c:	4603      	mov	r3, r0
   8397e:	e02b      	b.n	839d8 <udc_reqstd+0x148>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
			}
		}
   83980:	bf00      	nop
   83982:	e000      	b.n	83986 <udc_reqstd+0xf6>
				break;
   83984:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   83986:	4b15      	ldr	r3, [pc, #84]	; (839dc <udc_reqstd+0x14c>)
   83988:	781b      	ldrb	r3, [r3, #0]
   8398a:	f003 031f 	and.w	r3, r3, #31
   8398e:	2b01      	cmp	r3, #1
   83990:	d108      	bne.n	839a4 <udc_reqstd+0x114>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   83992:	4b12      	ldr	r3, [pc, #72]	; (839dc <udc_reqstd+0x14c>)
   83994:	785b      	ldrb	r3, [r3, #1]
   83996:	2b0b      	cmp	r3, #11
   83998:	d000      	beq.n	8399c <udc_reqstd+0x10c>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
   8399a:	e004      	b.n	839a6 <udc_reqstd+0x116>
				return udc_req_std_iface_set_setting();
   8399c:	4b19      	ldr	r3, [pc, #100]	; (83a04 <udc_reqstd+0x174>)
   8399e:	4798      	blx	r3
   839a0:	4603      	mov	r3, r0
   839a2:	e019      	b.n	839d8 <udc_reqstd+0x148>
			}
		}
   839a4:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   839a6:	4b0d      	ldr	r3, [pc, #52]	; (839dc <udc_reqstd+0x14c>)
   839a8:	781b      	ldrb	r3, [r3, #0]
   839aa:	f003 031f 	and.w	r3, r3, #31
   839ae:	2b02      	cmp	r3, #2
   839b0:	d110      	bne.n	839d4 <udc_reqstd+0x144>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   839b2:	4b0a      	ldr	r3, [pc, #40]	; (839dc <udc_reqstd+0x14c>)
   839b4:	785b      	ldrb	r3, [r3, #1]
   839b6:	2b01      	cmp	r3, #1
   839b8:	d002      	beq.n	839c0 <udc_reqstd+0x130>
   839ba:	2b03      	cmp	r3, #3
   839bc:	d004      	beq.n	839c8 <udc_reqstd+0x138>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
   839be:	e00a      	b.n	839d6 <udc_reqstd+0x146>
				return udc_req_std_ep_clear_feature();
   839c0:	4b11      	ldr	r3, [pc, #68]	; (83a08 <udc_reqstd+0x178>)
   839c2:	4798      	blx	r3
   839c4:	4603      	mov	r3, r0
   839c6:	e007      	b.n	839d8 <udc_reqstd+0x148>
				return udc_req_std_ep_set_feature();
   839c8:	4b10      	ldr	r3, [pc, #64]	; (83a0c <udc_reqstd+0x17c>)
   839ca:	4798      	blx	r3
   839cc:	4603      	mov	r3, r0
   839ce:	e003      	b.n	839d8 <udc_reqstd+0x148>
		}
   839d0:	bf00      	nop
   839d2:	e000      	b.n	839d6 <udc_reqstd+0x146>
			}
		}
   839d4:	bf00      	nop
#endif
	}
	return false;
   839d6:	2300      	movs	r3, #0
}
   839d8:	4618      	mov	r0, r3
   839da:	bd80      	pop	{r7, pc}
   839dc:	20001320 	.word	0x20001320
   839e0:	00083145 	.word	0x00083145
   839e4:	00083445 	.word	0x00083445
   839e8:	00083661 	.word	0x00083661
   839ec:	00083791 	.word	0x00083791
   839f0:	00083171 	.word	0x00083171
   839f4:	00083351 	.word	0x00083351
   839f8:	000831b5 	.word	0x000831b5
   839fc:	00083229 	.word	0x00083229
   83a00:	0008368d 	.word	0x0008368d
   83a04:	00083829 	.word	0x00083829
   83a08:	000831f1 	.word	0x000831f1
   83a0c:	000832e5 	.word	0x000832e5

00083a10 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   83a10:	b580      	push	{r7, lr}
   83a12:	b082      	sub	sp, #8
   83a14:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   83a16:	4b20      	ldr	r3, [pc, #128]	; (83a98 <udc_req_iface+0x88>)
   83a18:	781b      	ldrb	r3, [r3, #0]
   83a1a:	2b00      	cmp	r3, #0
   83a1c:	d101      	bne.n	83a22 <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
   83a1e:	2300      	movs	r3, #0
   83a20:	e036      	b.n	83a90 <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   83a22:	4b1e      	ldr	r3, [pc, #120]	; (83a9c <udc_req_iface+0x8c>)
   83a24:	889b      	ldrh	r3, [r3, #4]
   83a26:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   83a28:	4b1d      	ldr	r3, [pc, #116]	; (83aa0 <udc_req_iface+0x90>)
   83a2a:	681b      	ldr	r3, [r3, #0]
   83a2c:	681b      	ldr	r3, [r3, #0]
   83a2e:	791b      	ldrb	r3, [r3, #4]
   83a30:	79fa      	ldrb	r2, [r7, #7]
   83a32:	429a      	cmp	r2, r3
   83a34:	d301      	bcc.n	83a3a <udc_req_iface+0x2a>
		return false;
   83a36:	2300      	movs	r3, #0
   83a38:	e02a      	b.n	83a90 <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   83a3a:	79fb      	ldrb	r3, [r7, #7]
   83a3c:	2100      	movs	r1, #0
   83a3e:	4618      	mov	r0, r3
   83a40:	4b18      	ldr	r3, [pc, #96]	; (83aa4 <udc_req_iface+0x94>)
   83a42:	4798      	blx	r3
   83a44:	4603      	mov	r3, r0
   83a46:	f083 0301 	eor.w	r3, r3, #1
   83a4a:	b2db      	uxtb	r3, r3
   83a4c:	2b00      	cmp	r3, #0
   83a4e:	d001      	beq.n	83a54 <udc_req_iface+0x44>
		return false;
   83a50:	2300      	movs	r3, #0
   83a52:	e01d      	b.n	83a90 <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   83a54:	4b12      	ldr	r3, [pc, #72]	; (83aa0 <udc_req_iface+0x90>)
   83a56:	681b      	ldr	r3, [r3, #0]
   83a58:	685a      	ldr	r2, [r3, #4]
   83a5a:	79fb      	ldrb	r3, [r7, #7]
   83a5c:	009b      	lsls	r3, r3, #2
   83a5e:	4413      	add	r3, r2
   83a60:	681b      	ldr	r3, [r3, #0]
   83a62:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   83a64:	683b      	ldr	r3, [r7, #0]
   83a66:	68db      	ldr	r3, [r3, #12]
   83a68:	4798      	blx	r3
   83a6a:	4603      	mov	r3, r0
   83a6c:	461a      	mov	r2, r3
   83a6e:	79fb      	ldrb	r3, [r7, #7]
   83a70:	4611      	mov	r1, r2
   83a72:	4618      	mov	r0, r3
   83a74:	4b0b      	ldr	r3, [pc, #44]	; (83aa4 <udc_req_iface+0x94>)
   83a76:	4798      	blx	r3
   83a78:	4603      	mov	r3, r0
   83a7a:	f083 0301 	eor.w	r3, r3, #1
   83a7e:	b2db      	uxtb	r3, r3
   83a80:	2b00      	cmp	r3, #0
   83a82:	d001      	beq.n	83a88 <udc_req_iface+0x78>
		return false;
   83a84:	2300      	movs	r3, #0
   83a86:	e003      	b.n	83a90 <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   83a88:	683b      	ldr	r3, [r7, #0]
   83a8a:	689b      	ldr	r3, [r3, #8]
   83a8c:	4798      	blx	r3
   83a8e:	4603      	mov	r3, r0
}
   83a90:	4618      	mov	r0, r3
   83a92:	3708      	adds	r7, #8
   83a94:	46bd      	mov	sp, r7
   83a96:	bd80      	pop	{r7, pc}
   83a98:	20001296 	.word	0x20001296
   83a9c:	20001320 	.word	0x20001320
   83aa0:	20001298 	.word	0x20001298
   83aa4:	00082ead 	.word	0x00082ead

00083aa8 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   83aa8:	b580      	push	{r7, lr}
   83aaa:	b082      	sub	sp, #8
   83aac:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   83aae:	4b1e      	ldr	r3, [pc, #120]	; (83b28 <udc_req_ep+0x80>)
   83ab0:	781b      	ldrb	r3, [r3, #0]
   83ab2:	2b00      	cmp	r3, #0
   83ab4:	d101      	bne.n	83aba <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
   83ab6:	2300      	movs	r3, #0
   83ab8:	e032      	b.n	83b20 <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   83aba:	4b1c      	ldr	r3, [pc, #112]	; (83b2c <udc_req_ep+0x84>)
   83abc:	889b      	ldrh	r3, [r3, #4]
   83abe:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83ac0:	2300      	movs	r3, #0
   83ac2:	71fb      	strb	r3, [r7, #7]
   83ac4:	e024      	b.n	83b10 <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   83ac6:	4b1a      	ldr	r3, [pc, #104]	; (83b30 <udc_req_ep+0x88>)
   83ac8:	681b      	ldr	r3, [r3, #0]
   83aca:	685a      	ldr	r2, [r3, #4]
   83acc:	79fb      	ldrb	r3, [r7, #7]
   83ace:	009b      	lsls	r3, r3, #2
   83ad0:	4413      	add	r3, r2
   83ad2:	681b      	ldr	r3, [r3, #0]
   83ad4:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   83ad6:	683b      	ldr	r3, [r7, #0]
   83ad8:	68db      	ldr	r3, [r3, #12]
   83ada:	4798      	blx	r3
   83adc:	4603      	mov	r3, r0
   83ade:	461a      	mov	r2, r3
   83ae0:	79fb      	ldrb	r3, [r7, #7]
   83ae2:	4611      	mov	r1, r2
   83ae4:	4618      	mov	r0, r3
   83ae6:	4b13      	ldr	r3, [pc, #76]	; (83b34 <udc_req_ep+0x8c>)
   83ae8:	4798      	blx	r3
   83aea:	4603      	mov	r3, r0
   83aec:	f083 0301 	eor.w	r3, r3, #1
   83af0:	b2db      	uxtb	r3, r3
   83af2:	2b00      	cmp	r3, #0
   83af4:	d001      	beq.n	83afa <udc_req_ep+0x52>
			return false;
   83af6:	2300      	movs	r3, #0
   83af8:	e012      	b.n	83b20 <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   83afa:	683b      	ldr	r3, [r7, #0]
   83afc:	689b      	ldr	r3, [r3, #8]
   83afe:	4798      	blx	r3
   83b00:	4603      	mov	r3, r0
   83b02:	2b00      	cmp	r3, #0
   83b04:	d001      	beq.n	83b0a <udc_req_ep+0x62>
			return true;
   83b06:	2301      	movs	r3, #1
   83b08:	e00a      	b.n	83b20 <udc_req_ep+0x78>
			iface_num++) {
   83b0a:	79fb      	ldrb	r3, [r7, #7]
   83b0c:	3301      	adds	r3, #1
   83b0e:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83b10:	4b07      	ldr	r3, [pc, #28]	; (83b30 <udc_req_ep+0x88>)
   83b12:	681b      	ldr	r3, [r3, #0]
   83b14:	681b      	ldr	r3, [r3, #0]
   83b16:	791b      	ldrb	r3, [r3, #4]
   83b18:	79fa      	ldrb	r2, [r7, #7]
   83b1a:	429a      	cmp	r2, r3
   83b1c:	d3d3      	bcc.n	83ac6 <udc_req_ep+0x1e>
		}
	}
	return false;
   83b1e:	2300      	movs	r3, #0
}
   83b20:	4618      	mov	r0, r3
   83b22:	3708      	adds	r7, #8
   83b24:	46bd      	mov	sp, r7
   83b26:	bd80      	pop	{r7, pc}
   83b28:	20001296 	.word	0x20001296
   83b2c:	20001320 	.word	0x20001320
   83b30:	20001298 	.word	0x20001298
   83b34:	00082ead 	.word	0x00082ead

00083b38 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   83b38:	b580      	push	{r7, lr}
   83b3a:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   83b3c:	4b1e      	ldr	r3, [pc, #120]	; (83bb8 <udc_process_setup+0x80>)
   83b3e:	2200      	movs	r2, #0
   83b40:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   83b42:	4b1d      	ldr	r3, [pc, #116]	; (83bb8 <udc_process_setup+0x80>)
   83b44:	2200      	movs	r2, #0
   83b46:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   83b48:	4b1b      	ldr	r3, [pc, #108]	; (83bb8 <udc_process_setup+0x80>)
   83b4a:	2200      	movs	r2, #0
   83b4c:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   83b4e:	4b1a      	ldr	r3, [pc, #104]	; (83bb8 <udc_process_setup+0x80>)
   83b50:	781b      	ldrb	r3, [r3, #0]
   83b52:	b25b      	sxtb	r3, r3
   83b54:	2b00      	cmp	r3, #0
   83b56:	da05      	bge.n	83b64 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
   83b58:	4b17      	ldr	r3, [pc, #92]	; (83bb8 <udc_process_setup+0x80>)
   83b5a:	88db      	ldrh	r3, [r3, #6]
   83b5c:	2b00      	cmp	r3, #0
   83b5e:	d101      	bne.n	83b64 <udc_process_setup+0x2c>
			return false; // Error from USB host
   83b60:	2300      	movs	r3, #0
   83b62:	e027      	b.n	83bb4 <udc_process_setup+0x7c>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   83b64:	4b14      	ldr	r3, [pc, #80]	; (83bb8 <udc_process_setup+0x80>)
   83b66:	781b      	ldrb	r3, [r3, #0]
   83b68:	f003 0360 	and.w	r3, r3, #96	; 0x60
   83b6c:	2b00      	cmp	r3, #0
   83b6e:	d106      	bne.n	83b7e <udc_process_setup+0x46>
		if (udc_reqstd()) {
   83b70:	4b12      	ldr	r3, [pc, #72]	; (83bbc <udc_process_setup+0x84>)
   83b72:	4798      	blx	r3
   83b74:	4603      	mov	r3, r0
   83b76:	2b00      	cmp	r3, #0
   83b78:	d001      	beq.n	83b7e <udc_process_setup+0x46>
			return true;
   83b7a:	2301      	movs	r3, #1
   83b7c:	e01a      	b.n	83bb4 <udc_process_setup+0x7c>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   83b7e:	4b0e      	ldr	r3, [pc, #56]	; (83bb8 <udc_process_setup+0x80>)
   83b80:	781b      	ldrb	r3, [r3, #0]
   83b82:	f003 031f 	and.w	r3, r3, #31
   83b86:	2b01      	cmp	r3, #1
   83b88:	d106      	bne.n	83b98 <udc_process_setup+0x60>
		if (udc_req_iface()) {
   83b8a:	4b0d      	ldr	r3, [pc, #52]	; (83bc0 <udc_process_setup+0x88>)
   83b8c:	4798      	blx	r3
   83b8e:	4603      	mov	r3, r0
   83b90:	2b00      	cmp	r3, #0
   83b92:	d001      	beq.n	83b98 <udc_process_setup+0x60>
			return true;
   83b94:	2301      	movs	r3, #1
   83b96:	e00d      	b.n	83bb4 <udc_process_setup+0x7c>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   83b98:	4b07      	ldr	r3, [pc, #28]	; (83bb8 <udc_process_setup+0x80>)
   83b9a:	781b      	ldrb	r3, [r3, #0]
   83b9c:	f003 031f 	and.w	r3, r3, #31
   83ba0:	2b02      	cmp	r3, #2
   83ba2:	d106      	bne.n	83bb2 <udc_process_setup+0x7a>
		if (udc_req_ep()) {
   83ba4:	4b07      	ldr	r3, [pc, #28]	; (83bc4 <udc_process_setup+0x8c>)
   83ba6:	4798      	blx	r3
   83ba8:	4603      	mov	r3, r0
   83baa:	2b00      	cmp	r3, #0
   83bac:	d001      	beq.n	83bb2 <udc_process_setup+0x7a>
			return true;
   83bae:	2301      	movs	r3, #1
   83bb0:	e000      	b.n	83bb4 <udc_process_setup+0x7c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   83bb2:	2300      	movs	r3, #0
#endif
}
   83bb4:	4618      	mov	r0, r3
   83bb6:	bd80      	pop	{r7, pc}
   83bb8:	20001320 	.word	0x20001320
   83bbc:	00083891 	.word	0x00083891
   83bc0:	00083a11 	.word	0x00083a11
   83bc4:	00083aa9 	.word	0x00083aa9

00083bc8 <udi_vendor_enable>:
/**
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
   83bc8:	b580      	push	{r7, lr}
   83bca:	af00      	add	r7, sp, #0
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   83bcc:	4b0b      	ldr	r3, [pc, #44]	; (83bfc <udi_vendor_enable+0x34>)
   83bce:	4798      	blx	r3
   83bd0:	4603      	mov	r3, r0
   83bd2:	78da      	ldrb	r2, [r3, #3]
   83bd4:	4b0a      	ldr	r3, [pc, #40]	; (83c00 <udi_vendor_enable+0x38>)
   83bd6:	701a      	strb	r2, [r3, #0]
	if (0 == udi_vendor_alternate_setting) {
   83bd8:	4b09      	ldr	r3, [pc, #36]	; (83c00 <udi_vendor_enable+0x38>)
   83bda:	781b      	ldrb	r3, [r3, #0]
   83bdc:	2b00      	cmp	r3, #0
   83bde:	d109      	bne.n	83bf4 <udi_vendor_enable+0x2c>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
   83be0:	4b08      	ldr	r3, [pc, #32]	; (83c04 <udi_vendor_enable+0x3c>)
   83be2:	4798      	blx	r3
   83be4:	4603      	mov	r3, r0
   83be6:	f083 0301 	eor.w	r3, r3, #1
   83bea:	b2db      	uxtb	r3, r3
   83bec:	2b00      	cmp	r3, #0
   83bee:	d001      	beq.n	83bf4 <udi_vendor_enable+0x2c>
			return false;
   83bf0:	2300      	movs	r3, #0
   83bf2:	e000      	b.n	83bf6 <udi_vendor_enable+0x2e>
		}
	}
	return true;
   83bf4:	2301      	movs	r3, #1
}
   83bf6:	4618      	mov	r0, r3
   83bf8:	bd80      	pop	{r7, pc}
   83bfa:	bf00      	nop
   83bfc:	00082e19 	.word	0x00082e19
   83c00:	200012a3 	.word	0x200012a3
   83c04:	00080ded 	.word	0x00080ded

00083c08 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
   83c08:	b580      	push	{r7, lr}
   83c0a:	af00      	add	r7, sp, #0
	if (0 == udi_vendor_alternate_setting) {
   83c0c:	4b03      	ldr	r3, [pc, #12]	; (83c1c <udi_vendor_disable+0x14>)
   83c0e:	781b      	ldrb	r3, [r3, #0]
   83c10:	2b00      	cmp	r3, #0
   83c12:	d101      	bne.n	83c18 <udi_vendor_disable+0x10>
		UDI_VENDOR_DISABLE_EXT();
   83c14:	4b02      	ldr	r3, [pc, #8]	; (83c20 <udi_vendor_disable+0x18>)
   83c16:	4798      	blx	r3
	}
}
   83c18:	bf00      	nop
   83c1a:	bd80      	pop	{r7, pc}
   83c1c:	200012a3 	.word	0x200012a3
   83c20:	00080e19 	.word	0x00080e19

00083c24 <udi_vendor_setup>:

bool udi_vendor_setup(void)
{
   83c24:	b580      	push	{r7, lr}
   83c26:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   83c28:	4b10      	ldr	r3, [pc, #64]	; (83c6c <udi_vendor_setup+0x48>)
   83c2a:	781b      	ldrb	r3, [r3, #0]
   83c2c:	b25b      	sxtb	r3, r3
   83c2e:	2b00      	cmp	r3, #0
   83c30:	da09      	bge.n	83c46 <udi_vendor_setup+0x22>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83c32:	4b0e      	ldr	r3, [pc, #56]	; (83c6c <udi_vendor_setup+0x48>)
   83c34:	781b      	ldrb	r3, [r3, #0]
   83c36:	f003 0360 	and.w	r3, r3, #96	; 0x60
   83c3a:	2b40      	cmp	r3, #64	; 0x40
   83c3c:	d103      	bne.n	83c46 <udi_vendor_setup+0x22>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   83c3e:	4b0c      	ldr	r3, [pc, #48]	; (83c70 <udi_vendor_setup+0x4c>)
   83c40:	4798      	blx	r3
   83c42:	4603      	mov	r3, r0
   83c44:	e00f      	b.n	83c66 <udi_vendor_setup+0x42>
		}
	}
	if (Udd_setup_is_out()) {
   83c46:	4b09      	ldr	r3, [pc, #36]	; (83c6c <udi_vendor_setup+0x48>)
   83c48:	781b      	ldrb	r3, [r3, #0]
   83c4a:	b25b      	sxtb	r3, r3
   83c4c:	2b00      	cmp	r3, #0
   83c4e:	db09      	blt.n	83c64 <udi_vendor_setup+0x40>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83c50:	4b06      	ldr	r3, [pc, #24]	; (83c6c <udi_vendor_setup+0x48>)
   83c52:	781b      	ldrb	r3, [r3, #0]
   83c54:	f003 0360 	and.w	r3, r3, #96	; 0x60
   83c58:	2b40      	cmp	r3, #64	; 0x40
   83c5a:	d103      	bne.n	83c64 <udi_vendor_setup+0x40>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   83c5c:	4b05      	ldr	r3, [pc, #20]	; (83c74 <udi_vendor_setup+0x50>)
   83c5e:	4798      	blx	r3
   83c60:	4603      	mov	r3, r0
   83c62:	e000      	b.n	83c66 <udi_vendor_setup+0x42>
		}
	}
	return false; // Not supported request
   83c64:	2300      	movs	r3, #0
}
   83c66:	4618      	mov	r0, r3
   83c68:	bd80      	pop	{r7, pc}
   83c6a:	bf00      	nop
   83c6c:	20001320 	.word	0x20001320
   83c70:	00081251 	.word	0x00081251
   83c74:	00081101 	.word	0x00081101

00083c78 <udi_vendor_getsetting>:

uint8_t udi_vendor_getsetting(void)
{
   83c78:	b480      	push	{r7}
   83c7a:	af00      	add	r7, sp, #0
	return udi_vendor_alternate_setting;
   83c7c:	4b02      	ldr	r3, [pc, #8]	; (83c88 <udi_vendor_getsetting+0x10>)
   83c7e:	781b      	ldrb	r3, [r3, #0]
}
   83c80:	4618      	mov	r0, r3
   83c82:	46bd      	mov	sp, r7
   83c84:	bc80      	pop	{r7}
   83c86:	4770      	bx	lr
   83c88:	200012a3 	.word	0x200012a3

00083c8c <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   83c8c:	b590      	push	{r4, r7, lr}
   83c8e:	b087      	sub	sp, #28
   83c90:	af02      	add	r7, sp, #8
   83c92:	60f8      	str	r0, [r7, #12]
   83c94:	60b9      	str	r1, [r7, #8]
   83c96:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   83c98:	687b      	ldr	r3, [r7, #4]
   83c9a:	9300      	str	r3, [sp, #0]
   83c9c:	68bb      	ldr	r3, [r7, #8]
   83c9e:	68fa      	ldr	r2, [r7, #12]
   83ca0:	2100      	movs	r1, #0
   83ca2:	2081      	movs	r0, #129	; 0x81
   83ca4:	4c03      	ldr	r4, [pc, #12]	; (83cb4 <udi_vendor_bulk_in_run+0x28>)
   83ca6:	47a0      	blx	r4
   83ca8:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   83caa:	4618      	mov	r0, r3
   83cac:	3714      	adds	r7, #20
   83cae:	46bd      	mov	sp, r7
   83cb0:	bd90      	pop	{r4, r7, pc}
   83cb2:	bf00      	nop
   83cb4:	00084999 	.word	0x00084999

00083cb8 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   83cb8:	b590      	push	{r4, r7, lr}
   83cba:	b087      	sub	sp, #28
   83cbc:	af02      	add	r7, sp, #8
   83cbe:	60f8      	str	r0, [r7, #12]
   83cc0:	60b9      	str	r1, [r7, #8]
   83cc2:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   83cc4:	687b      	ldr	r3, [r7, #4]
   83cc6:	9300      	str	r3, [sp, #0]
   83cc8:	68bb      	ldr	r3, [r7, #8]
   83cca:	68fa      	ldr	r2, [r7, #12]
   83ccc:	2100      	movs	r1, #0
   83cce:	2002      	movs	r0, #2
   83cd0:	4c03      	ldr	r4, [pc, #12]	; (83ce0 <udi_vendor_bulk_out_run+0x28>)
   83cd2:	47a0      	blx	r4
   83cd4:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   83cd6:	4618      	mov	r0, r3
   83cd8:	3714      	adds	r7, #20
   83cda:	46bd      	mov	sp, r7
   83cdc:	bd90      	pop	{r4, r7, pc}
   83cde:	bf00      	nop
   83ce0:	00084999 	.word	0x00084999

00083ce4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   83ce4:	b480      	push	{r7}
   83ce6:	b083      	sub	sp, #12
   83ce8:	af00      	add	r7, sp, #0
   83cea:	4603      	mov	r3, r0
   83cec:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83cee:	79fb      	ldrb	r3, [r7, #7]
   83cf0:	f003 031f 	and.w	r3, r3, #31
   83cf4:	2201      	movs	r2, #1
   83cf6:	fa02 f103 	lsl.w	r1, r2, r3
   83cfa:	4a05      	ldr	r2, [pc, #20]	; (83d10 <NVIC_EnableIRQ+0x2c>)
   83cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   83d00:	095b      	lsrs	r3, r3, #5
   83d02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   83d06:	bf00      	nop
   83d08:	370c      	adds	r7, #12
   83d0a:	46bd      	mov	sp, r7
   83d0c:	bc80      	pop	{r7}
   83d0e:	4770      	bx	lr
   83d10:	e000e100 	.word	0xe000e100

00083d14 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   83d14:	b480      	push	{r7}
   83d16:	b083      	sub	sp, #12
   83d18:	af00      	add	r7, sp, #0
   83d1a:	4603      	mov	r3, r0
   83d1c:	6039      	str	r1, [r7, #0]
   83d1e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   83d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
   83d24:	2b00      	cmp	r3, #0
   83d26:	da0b      	bge.n	83d40 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   83d28:	683b      	ldr	r3, [r7, #0]
   83d2a:	b2da      	uxtb	r2, r3
   83d2c:	490c      	ldr	r1, [pc, #48]	; (83d60 <NVIC_SetPriority+0x4c>)
   83d2e:	79fb      	ldrb	r3, [r7, #7]
   83d30:	f003 030f 	and.w	r3, r3, #15
   83d34:	3b04      	subs	r3, #4
   83d36:	0112      	lsls	r2, r2, #4
   83d38:	b2d2      	uxtb	r2, r2
   83d3a:	440b      	add	r3, r1
   83d3c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   83d3e:	e009      	b.n	83d54 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83d40:	683b      	ldr	r3, [r7, #0]
   83d42:	b2da      	uxtb	r2, r3
   83d44:	4907      	ldr	r1, [pc, #28]	; (83d64 <NVIC_SetPriority+0x50>)
   83d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
   83d4a:	0112      	lsls	r2, r2, #4
   83d4c:	b2d2      	uxtb	r2, r2
   83d4e:	440b      	add	r3, r1
   83d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   83d54:	bf00      	nop
   83d56:	370c      	adds	r7, #12
   83d58:	46bd      	mov	sp, r7
   83d5a:	bc80      	pop	{r7}
   83d5c:	4770      	bx	lr
   83d5e:	bf00      	nop
   83d60:	e000ed00 	.word	0xe000ed00
   83d64:	e000e100 	.word	0xe000e100

00083d68 <cpu_irq_save>:
{
   83d68:	b480      	push	{r7}
   83d6a:	b083      	sub	sp, #12
   83d6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83d6e:	f3ef 8310 	mrs	r3, PRIMASK
   83d72:	603b      	str	r3, [r7, #0]
  return(result);
   83d74:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   83d76:	2b00      	cmp	r3, #0
   83d78:	bf0c      	ite	eq
   83d7a:	2301      	moveq	r3, #1
   83d7c:	2300      	movne	r3, #0
   83d7e:	b2db      	uxtb	r3, r3
   83d80:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   83d82:	b672      	cpsid	i
  __ASM volatile ("dmb");
   83d84:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83d88:	4b04      	ldr	r3, [pc, #16]	; (83d9c <cpu_irq_save+0x34>)
   83d8a:	2200      	movs	r2, #0
   83d8c:	701a      	strb	r2, [r3, #0]
	return flags;
   83d8e:	687b      	ldr	r3, [r7, #4]
}
   83d90:	4618      	mov	r0, r3
   83d92:	370c      	adds	r7, #12
   83d94:	46bd      	mov	sp, r7
   83d96:	bc80      	pop	{r7}
   83d98:	4770      	bx	lr
   83d9a:	bf00      	nop
   83d9c:	20000294 	.word	0x20000294

00083da0 <cpu_irq_is_enabled_flags>:
{
   83da0:	b480      	push	{r7}
   83da2:	b083      	sub	sp, #12
   83da4:	af00      	add	r7, sp, #0
   83da6:	6078      	str	r0, [r7, #4]
	return (flags);
   83da8:	687b      	ldr	r3, [r7, #4]
   83daa:	2b00      	cmp	r3, #0
   83dac:	bf14      	ite	ne
   83dae:	2301      	movne	r3, #1
   83db0:	2300      	moveq	r3, #0
   83db2:	b2db      	uxtb	r3, r3
}
   83db4:	4618      	mov	r0, r3
   83db6:	370c      	adds	r7, #12
   83db8:	46bd      	mov	sp, r7
   83dba:	bc80      	pop	{r7}
   83dbc:	4770      	bx	lr
   83dbe:	0000      	movs	r0, r0

00083dc0 <cpu_irq_restore>:
{
   83dc0:	b580      	push	{r7, lr}
   83dc2:	b082      	sub	sp, #8
   83dc4:	af00      	add	r7, sp, #0
   83dc6:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   83dc8:	6878      	ldr	r0, [r7, #4]
   83dca:	4b07      	ldr	r3, [pc, #28]	; (83de8 <cpu_irq_restore+0x28>)
   83dcc:	4798      	blx	r3
   83dce:	4603      	mov	r3, r0
   83dd0:	2b00      	cmp	r3, #0
   83dd2:	d005      	beq.n	83de0 <cpu_irq_restore+0x20>
		cpu_irq_enable();
   83dd4:	4b05      	ldr	r3, [pc, #20]	; (83dec <cpu_irq_restore+0x2c>)
   83dd6:	2201      	movs	r2, #1
   83dd8:	701a      	strb	r2, [r3, #0]
   83dda:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83dde:	b662      	cpsie	i
}
   83de0:	bf00      	nop
   83de2:	3708      	adds	r7, #8
   83de4:	46bd      	mov	sp, r7
   83de6:	bd80      	pop	{r7, pc}
   83de8:	00083da1 	.word	0x00083da1
   83dec:	20000294 	.word	0x20000294

00083df0 <sleepmgr_lock_mode>:
{
   83df0:	b580      	push	{r7, lr}
   83df2:	b084      	sub	sp, #16
   83df4:	af00      	add	r7, sp, #0
   83df6:	4603      	mov	r3, r0
   83df8:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   83dfa:	4b08      	ldr	r3, [pc, #32]	; (83e1c <sleepmgr_lock_mode+0x2c>)
   83dfc:	4798      	blx	r3
   83dfe:	60f8      	str	r0, [r7, #12]
	++sleepmgr_locks[mode];
   83e00:	79fb      	ldrb	r3, [r7, #7]
   83e02:	4a07      	ldr	r2, [pc, #28]	; (83e20 <sleepmgr_lock_mode+0x30>)
   83e04:	5cd2      	ldrb	r2, [r2, r3]
   83e06:	3201      	adds	r2, #1
   83e08:	b2d1      	uxtb	r1, r2
   83e0a:	4a05      	ldr	r2, [pc, #20]	; (83e20 <sleepmgr_lock_mode+0x30>)
   83e0c:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   83e0e:	68f8      	ldr	r0, [r7, #12]
   83e10:	4b04      	ldr	r3, [pc, #16]	; (83e24 <sleepmgr_lock_mode+0x34>)
   83e12:	4798      	blx	r3
}
   83e14:	bf00      	nop
   83e16:	3710      	adds	r7, #16
   83e18:	46bd      	mov	sp, r7
   83e1a:	bd80      	pop	{r7, pc}
   83e1c:	00083d69 	.word	0x00083d69
   83e20:	20001318 	.word	0x20001318
   83e24:	00083dc1 	.word	0x00083dc1

00083e28 <sleepmgr_unlock_mode>:
{
   83e28:	b580      	push	{r7, lr}
   83e2a:	b084      	sub	sp, #16
   83e2c:	af00      	add	r7, sp, #0
   83e2e:	4603      	mov	r3, r0
   83e30:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   83e32:	4b08      	ldr	r3, [pc, #32]	; (83e54 <sleepmgr_unlock_mode+0x2c>)
   83e34:	4798      	blx	r3
   83e36:	60f8      	str	r0, [r7, #12]
	--sleepmgr_locks[mode];
   83e38:	79fb      	ldrb	r3, [r7, #7]
   83e3a:	4a07      	ldr	r2, [pc, #28]	; (83e58 <sleepmgr_unlock_mode+0x30>)
   83e3c:	5cd2      	ldrb	r2, [r2, r3]
   83e3e:	3a01      	subs	r2, #1
   83e40:	b2d1      	uxtb	r1, r2
   83e42:	4a05      	ldr	r2, [pc, #20]	; (83e58 <sleepmgr_unlock_mode+0x30>)
   83e44:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   83e46:	68f8      	ldr	r0, [r7, #12]
   83e48:	4b04      	ldr	r3, [pc, #16]	; (83e5c <sleepmgr_unlock_mode+0x34>)
   83e4a:	4798      	blx	r3
}
   83e4c:	bf00      	nop
   83e4e:	3710      	adds	r7, #16
   83e50:	46bd      	mov	sp, r7
   83e52:	bd80      	pop	{r7, pc}
   83e54:	00083d69 	.word	0x00083d69
   83e58:	20001318 	.word	0x20001318
   83e5c:	00083dc1 	.word	0x00083dc1

00083e60 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
   83e60:	b580      	push	{r7, lr}
   83e62:	b082      	sub	sp, #8
   83e64:	af00      	add	r7, sp, #0
   83e66:	4603      	mov	r3, r0
   83e68:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
   83e6a:	79fb      	ldrb	r3, [r7, #7]
   83e6c:	f083 0301 	eor.w	r3, r3, #1
   83e70:	b2db      	uxtb	r3, r3
   83e72:	2b00      	cmp	r3, #0
   83e74:	d006      	beq.n	83e84 <udd_sleep_mode+0x24>
   83e76:	4b0d      	ldr	r3, [pc, #52]	; (83eac <udd_sleep_mode+0x4c>)
   83e78:	781b      	ldrb	r3, [r3, #0]
   83e7a:	2b00      	cmp	r3, #0
   83e7c:	d002      	beq.n	83e84 <udd_sleep_mode+0x24>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   83e7e:	2002      	movs	r0, #2
   83e80:	4b0b      	ldr	r3, [pc, #44]	; (83eb0 <udd_sleep_mode+0x50>)
   83e82:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
   83e84:	79fb      	ldrb	r3, [r7, #7]
   83e86:	2b00      	cmp	r3, #0
   83e88:	d009      	beq.n	83e9e <udd_sleep_mode+0x3e>
   83e8a:	4b08      	ldr	r3, [pc, #32]	; (83eac <udd_sleep_mode+0x4c>)
   83e8c:	781b      	ldrb	r3, [r3, #0]
   83e8e:	f083 0301 	eor.w	r3, r3, #1
   83e92:	b2db      	uxtb	r3, r3
   83e94:	2b00      	cmp	r3, #0
   83e96:	d002      	beq.n	83e9e <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   83e98:	2002      	movs	r0, #2
   83e9a:	4b06      	ldr	r3, [pc, #24]	; (83eb4 <udd_sleep_mode+0x54>)
   83e9c:	4798      	blx	r3
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   83e9e:	4a03      	ldr	r2, [pc, #12]	; (83eac <udd_sleep_mode+0x4c>)
   83ea0:	79fb      	ldrb	r3, [r7, #7]
   83ea2:	7013      	strb	r3, [r2, #0]
}
   83ea4:	bf00      	nop
   83ea6:	3708      	adds	r7, #8
   83ea8:	46bd      	mov	sp, r7
   83eaa:	bd80      	pop	{r7, pc}
   83eac:	200012a4 	.word	0x200012a4
   83eb0:	00083e29 	.word	0x00083e29
   83eb4:	00083df1 	.word	0x00083df1

00083eb8 <UDPHS_Handler>:
 * Here, the global interrupt mask is not clear when an USB interrupt is enabled
 * because this one can not be occurred during the USB ISR (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests in peripheral modules.
 */
ISR(UDD_USB_INT_FUN)
{
   83eb8:	b580      	push	{r7, lr}
   83eba:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   83ebc:	201d      	movs	r0, #29
   83ebe:	4b5f      	ldr	r3, [pc, #380]	; (8403c <UDPHS_Handler+0x184>)
   83ec0:	4798      	blx	r3
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   83ec2:	4b5f      	ldr	r3, [pc, #380]	; (84040 <UDPHS_Handler+0x188>)
   83ec4:	4798      	blx	r3
   83ec6:	4603      	mov	r3, r0
   83ec8:	f083 0301 	eor.w	r3, r3, #1
   83ecc:	b2db      	uxtb	r3, r3
   83ece:	2b00      	cmp	r3, #0
   83ed0:	d00c      	beq.n	83eec <UDPHS_Handler+0x34>
   83ed2:	4b5c      	ldr	r3, [pc, #368]	; (84044 <UDPHS_Handler+0x18c>)
   83ed4:	695b      	ldr	r3, [r3, #20]
   83ed6:	f003 0302 	and.w	r3, r3, #2
   83eda:	2b00      	cmp	r3, #0
   83edc:	d106      	bne.n	83eec <UDPHS_Handler+0x34>
  __ASM volatile ("cpsid i");
   83ede:	b672      	cpsid	i
   83ee0:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   83ee4:	4b58      	ldr	r3, [pc, #352]	; (84048 <UDPHS_Handler+0x190>)
   83ee6:	2200      	movs	r2, #0
   83ee8:	701a      	strb	r2, [r3, #0]
		return;
   83eea:	e0a5      	b.n	84038 <UDPHS_Handler+0x180>
	}

	if (Is_udd_sof()) {
   83eec:	4b55      	ldr	r3, [pc, #340]	; (84044 <UDPHS_Handler+0x18c>)
   83eee:	695b      	ldr	r3, [r3, #20]
   83ef0:	f003 0308 	and.w	r3, r3, #8
   83ef4:	2b00      	cmp	r3, #0
   83ef6:	d00d      	beq.n	83f14 <UDPHS_Handler+0x5c>
		udd_ack_sof();
   83ef8:	4b52      	ldr	r3, [pc, #328]	; (84044 <UDPHS_Handler+0x18c>)
   83efa:	2208      	movs	r2, #8
   83efc:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   83efe:	4b51      	ldr	r3, [pc, #324]	; (84044 <UDPHS_Handler+0x18c>)
   83f00:	695b      	ldr	r3, [r3, #20]
   83f02:	f003 0301 	and.w	r3, r3, #1
   83f06:	2b00      	cmp	r3, #0
   83f08:	d101      	bne.n	83f0e <UDPHS_Handler+0x56>
			udc_sof_notify();
   83f0a:	4b50      	ldr	r3, [pc, #320]	; (8404c <UDPHS_Handler+0x194>)
   83f0c:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   83f0e:	4b50      	ldr	r3, [pc, #320]	; (84050 <UDPHS_Handler+0x198>)
   83f10:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
   83f12:	e090      	b.n	84036 <UDPHS_Handler+0x17e>
	}

	if (Is_udd_msof()) {
   83f14:	4b4b      	ldr	r3, [pc, #300]	; (84044 <UDPHS_Handler+0x18c>)
   83f16:	695b      	ldr	r3, [r3, #20]
   83f18:	f003 0304 	and.w	r3, r3, #4
   83f1c:	2b00      	cmp	r3, #0
   83f1e:	d005      	beq.n	83f2c <UDPHS_Handler+0x74>
		udd_ack_msof();
   83f20:	4b48      	ldr	r3, [pc, #288]	; (84044 <UDPHS_Handler+0x18c>)
   83f22:	2204      	movs	r2, #4
   83f24:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   83f26:	4b49      	ldr	r3, [pc, #292]	; (8404c <UDPHS_Handler+0x194>)
   83f28:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   83f2a:	e084      	b.n	84036 <UDPHS_Handler+0x17e>
	}
	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');

	if (udd_ctrl_interrupt()) {
   83f2c:	4b49      	ldr	r3, [pc, #292]	; (84054 <UDPHS_Handler+0x19c>)
   83f2e:	4798      	blx	r3
   83f30:	4603      	mov	r3, r0
   83f32:	2b00      	cmp	r3, #0
   83f34:	d17a      	bne.n	8402c <UDPHS_Handler+0x174>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
   83f36:	4b48      	ldr	r3, [pc, #288]	; (84058 <UDPHS_Handler+0x1a0>)
   83f38:	4798      	blx	r3
   83f3a:	4603      	mov	r3, r0
   83f3c:	2b00      	cmp	r3, #0
   83f3e:	d177      	bne.n	84030 <UDPHS_Handler+0x178>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   83f40:	4b40      	ldr	r3, [pc, #256]	; (84044 <UDPHS_Handler+0x18c>)
   83f42:	695b      	ldr	r3, [r3, #20]
   83f44:	f003 0310 	and.w	r3, r3, #16
   83f48:	2b00      	cmp	r3, #0
   83f4a:	d01d      	beq.n	83f88 <UDPHS_Handler+0xd0>
		dbg_print("EoR ");
		udd_ack_reset();
   83f4c:	4b3d      	ldr	r3, [pc, #244]	; (84044 <UDPHS_Handler+0x18c>)
   83f4e:	2210      	movs	r2, #16
   83f50:	619a      	str	r2, [r3, #24]
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
   83f52:	4b42      	ldr	r3, [pc, #264]	; (8405c <UDPHS_Handler+0x1a4>)
   83f54:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
   83f56:	4b42      	ldr	r3, [pc, #264]	; (84060 <UDPHS_Handler+0x1a8>)
   83f58:	4798      	blx	r3
		// Reset endpoint control
		udd_reset_ep_ctrl();
   83f5a:	4b42      	ldr	r3, [pc, #264]	; (84064 <UDPHS_Handler+0x1ac>)
   83f5c:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
   83f5e:	4b42      	ldr	r3, [pc, #264]	; (84068 <UDPHS_Handler+0x1b0>)
   83f60:	4798      	blx	r3
		// Enable SOF interrupts cleared by USB reset event
		udd_enable_sof_interrupt();
   83f62:	4b38      	ldr	r3, [pc, #224]	; (84044 <UDPHS_Handler+0x18c>)
   83f64:	691b      	ldr	r3, [r3, #16]
   83f66:	4a37      	ldr	r2, [pc, #220]	; (84044 <UDPHS_Handler+0x18c>)
   83f68:	f043 0308 	orr.w	r3, r3, #8
   83f6c:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   83f6e:	4b35      	ldr	r3, [pc, #212]	; (84044 <UDPHS_Handler+0x18c>)
   83f70:	691b      	ldr	r3, [r3, #16]
   83f72:	4a34      	ldr	r2, [pc, #208]	; (84044 <UDPHS_Handler+0x18c>)
   83f74:	f043 0304 	orr.w	r3, r3, #4
   83f78:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   83f7a:	4b32      	ldr	r3, [pc, #200]	; (84044 <UDPHS_Handler+0x18c>)
   83f7c:	691b      	ldr	r3, [r3, #16]
   83f7e:	4a31      	ldr	r2, [pc, #196]	; (84044 <UDPHS_Handler+0x18c>)
   83f80:	f043 0302 	orr.w	r3, r3, #2
   83f84:	6113      	str	r3, [r2, #16]
		goto udd_interrupt_end;
   83f86:	e056      	b.n	84036 <UDPHS_Handler+0x17e>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   83f88:	4b2e      	ldr	r3, [pc, #184]	; (84044 <UDPHS_Handler+0x18c>)
   83f8a:	691b      	ldr	r3, [r3, #16]
   83f8c:	f003 0302 	and.w	r3, r3, #2
   83f90:	2b00      	cmp	r3, #0
   83f92:	d020      	beq.n	83fd6 <UDPHS_Handler+0x11e>
   83f94:	4b2b      	ldr	r3, [pc, #172]	; (84044 <UDPHS_Handler+0x18c>)
   83f96:	695b      	ldr	r3, [r3, #20]
   83f98:	f003 0302 	and.w	r3, r3, #2
   83f9c:	2b00      	cmp	r3, #0
   83f9e:	d01a      	beq.n	83fd6 <UDPHS_Handler+0x11e>
		dbg_print("Susp ");
		// Remove old wakeup status
		udd_ack_wake_up();
   83fa0:	4b28      	ldr	r3, [pc, #160]	; (84044 <UDPHS_Handler+0x18c>)
   83fa2:	2220      	movs	r2, #32
   83fa4:	619a      	str	r2, [r3, #24]
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   83fa6:	4b27      	ldr	r3, [pc, #156]	; (84044 <UDPHS_Handler+0x18c>)
   83fa8:	691b      	ldr	r3, [r3, #16]
   83faa:	4a26      	ldr	r2, [pc, #152]	; (84044 <UDPHS_Handler+0x18c>)
   83fac:	f023 0302 	bic.w	r3, r3, #2
   83fb0:	6113      	str	r3, [r2, #16]
		udd_enable_wake_up_interrupt();
   83fb2:	4b24      	ldr	r3, [pc, #144]	; (84044 <UDPHS_Handler+0x18c>)
   83fb4:	691b      	ldr	r3, [r3, #16]
   83fb6:	4a23      	ldr	r2, [pc, #140]	; (84044 <UDPHS_Handler+0x18c>)
   83fb8:	f043 0320 	orr.w	r3, r3, #32
   83fbc:	6113      	str	r3, [r2, #16]

		// The wakeup interrupt is generated even if the device controller clock is disabled.
		udd_ack_suspend();
   83fbe:	4b21      	ldr	r3, [pc, #132]	; (84044 <UDPHS_Handler+0x18c>)
   83fc0:	2202      	movs	r2, #2
   83fc2:	619a      	str	r2, [r3, #24]

		udd_disable_periph_ck();
   83fc4:	201d      	movs	r0, #29
   83fc6:	4b29      	ldr	r3, [pc, #164]	; (8406c <UDPHS_Handler+0x1b4>)
   83fc8:	4798      	blx	r3

#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   83fca:	4b29      	ldr	r3, [pc, #164]	; (84070 <UDPHS_Handler+0x1b8>)
   83fcc:	4798      	blx	r3
#endif
		udd_sleep_mode(false); // Enter in SUSPEND mode
   83fce:	2000      	movs	r0, #0
   83fd0:	4b28      	ldr	r3, [pc, #160]	; (84074 <UDPHS_Handler+0x1bc>)
   83fd2:	4798      	blx	r3
		goto udd_interrupt_end;
   83fd4:	e02f      	b.n	84036 <UDPHS_Handler+0x17e>
	}

	// On wakeup, _IEN is reseted only with EoR enabled
	if (Is_udd_wake_up()) {
   83fd6:	4b1b      	ldr	r3, [pc, #108]	; (84044 <UDPHS_Handler+0x18c>)
   83fd8:	695b      	ldr	r3, [r3, #20]
   83fda:	f003 0320 	and.w	r3, r3, #32
   83fde:	2b00      	cmp	r3, #0
   83fe0:	d028      	beq.n	84034 <UDPHS_Handler+0x17c>
		udd_sleep_mode(true); // Enter in IDLE mode
   83fe2:	2001      	movs	r0, #1
   83fe4:	4b23      	ldr	r3, [pc, #140]	; (84074 <UDPHS_Handler+0x1bc>)
   83fe6:	4798      	blx	r3
		// Remove old suspend status
		udd_ack_suspend();
   83fe8:	4b16      	ldr	r3, [pc, #88]	; (84044 <UDPHS_Handler+0x18c>)
   83fea:	2202      	movs	r2, #2
   83fec:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wake_up();
   83fee:	4b15      	ldr	r3, [pc, #84]	; (84044 <UDPHS_Handler+0x18c>)
   83ff0:	2220      	movs	r2, #32
   83ff2:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_disable_wake_up_interrupt();
   83ff4:	4b13      	ldr	r3, [pc, #76]	; (84044 <UDPHS_Handler+0x18c>)
   83ff6:	691b      	ldr	r3, [r3, #16]
   83ff8:	4a12      	ldr	r2, [pc, #72]	; (84044 <UDPHS_Handler+0x18c>)
   83ffa:	f023 0320 	bic.w	r3, r3, #32
   83ffe:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   84000:	4b10      	ldr	r3, [pc, #64]	; (84044 <UDPHS_Handler+0x18c>)
   84002:	691b      	ldr	r3, [r3, #16]
   84004:	4a0f      	ldr	r2, [pc, #60]	; (84044 <UDPHS_Handler+0x18c>)
   84006:	f043 0302 	orr.w	r3, r3, #2
   8400a:	6113      	str	r3, [r2, #16]
		udd_enable_sof_interrupt();
   8400c:	4b0d      	ldr	r3, [pc, #52]	; (84044 <UDPHS_Handler+0x18c>)
   8400e:	691b      	ldr	r3, [r3, #16]
   84010:	4a0c      	ldr	r2, [pc, #48]	; (84044 <UDPHS_Handler+0x18c>)
   84012:	f043 0308 	orr.w	r3, r3, #8
   84016:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   84018:	4b0a      	ldr	r3, [pc, #40]	; (84044 <UDPHS_Handler+0x18c>)
   8401a:	691b      	ldr	r3, [r3, #16]
   8401c:	4a09      	ldr	r2, [pc, #36]	; (84044 <UDPHS_Handler+0x18c>)
   8401e:	f043 0304 	orr.w	r3, r3, #4
   84022:	6113      	str	r3, [r2, #16]

#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   84024:	4b14      	ldr	r3, [pc, #80]	; (84078 <UDPHS_Handler+0x1c0>)
   84026:	4798      	blx	r3
#endif
		dbg_print("Wkup ");
		goto udd_interrupt_end;
   84028:	bf00      	nop
   8402a:	e004      	b.n	84036 <UDPHS_Handler+0x17e>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
   8402c:	bf00      	nop
   8402e:	e002      	b.n	84036 <UDPHS_Handler+0x17e>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
   84030:	bf00      	nop
   84032:	e000      	b.n	84036 <UDPHS_Handler+0x17e>
	}
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);

udd_interrupt_end:
   84034:	bf00      	nop
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
	//dbg_print("m%08x", UDPHS->UDPHS_IEN);
	dbg_print("\n\r");
udd_interrupt_sof_end:
	return;
   84036:	bf00      	nop
}
   84038:	bd80      	pop	{r7, pc}
   8403a:	bf00      	nop
   8403c:	000821b5 	.word	0x000821b5
   84040:	000826e1 	.word	0x000826e1
   84044:	400a4000 	.word	0x400a4000
   84048:	20000294 	.word	0x20000294
   8404c:	000830e5 	.word	0x000830e5
   84050:	00080dd1 	.word	0x00080dd1
   84054:	00085321 	.word	0x00085321
   84058:	00085739 	.word	0x00085739
   8405c:	00085461 	.word	0x00085461
   84060:	00083091 	.word	0x00083091
   84064:	00084c81 	.word	0x00084c81
   84068:	00084d01 	.word	0x00084d01
   8406c:	00082201 	.word	0x00082201
   84070:	00080db9 	.word	0x00080db9
   84074:	00083e61 	.word	0x00083e61
   84078:	00080dc5 	.word	0x00080dc5

0008407c <udd_enable>:
#endif
}


void udd_enable(void)
{
   8407c:	b580      	push	{r7, lr}
   8407e:	b082      	sub	sp, #8
   84080:	af00      	add	r7, sp, #0
	irqflags_t flags;
	sysclk_enable_usb();
   84082:	4b19      	ldr	r3, [pc, #100]	; (840e8 <udd_enable+0x6c>)
   84084:	4798      	blx	r3

	udd_enable_periph_ck();
   84086:	201d      	movs	r0, #29
   84088:	4b18      	ldr	r3, [pc, #96]	; (840ec <udd_enable+0x70>)
   8408a:	4798      	blx	r3

	flags = cpu_irq_save();
   8408c:	4b18      	ldr	r3, [pc, #96]	; (840f0 <udd_enable+0x74>)
   8408e:	4798      	blx	r3
   84090:	6078      	str	r0, [r7, #4]

	//** Enable USB hardware
	udd_enable_periph();
   84092:	4b18      	ldr	r3, [pc, #96]	; (840f4 <udd_enable+0x78>)
   84094:	681b      	ldr	r3, [r3, #0]
   84096:	4a17      	ldr	r2, [pc, #92]	; (840f4 <udd_enable+0x78>)
   84098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8409c:	6013      	str	r3, [r2, #0]

	// Cortex-M3, uses NVIC, no need to register IRQ handler
	// Here, only the Device mode is possible,
	// UDPHS interrupt is UDD interrupt
	NVIC_SetPriority((IRQn_Type) ID_UDPHS, UDD_USB_INT_LEVEL);
   8409e:	2105      	movs	r1, #5
   840a0:	201d      	movs	r0, #29
   840a2:	4b15      	ldr	r3, [pc, #84]	; (840f8 <udd_enable+0x7c>)
   840a4:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDPHS);
   840a6:	201d      	movs	r0, #29
   840a8:	4b14      	ldr	r3, [pc, #80]	; (840fc <udd_enable+0x80>)
   840aa:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
   840ac:	4b14      	ldr	r3, [pc, #80]	; (84100 <udd_enable+0x84>)
   840ae:	4798      	blx	r3
#endif

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   840b0:	4b10      	ldr	r3, [pc, #64]	; (840f4 <udd_enable+0x78>)
   840b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   840b6:	4a0f      	ldr	r2, [pc, #60]	; (840f4 <udd_enable+0x78>)
   840b8:	f023 0303 	bic.w	r3, r3, #3
   840bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
#else
	udd_high_speed_disable();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   840c0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   840c4:	4b0f      	ldr	r3, [pc, #60]	; (84104 <udd_enable+0x88>)
   840c6:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
   840c8:	4b0f      	ldr	r3, [pc, #60]	; (84108 <udd_enable+0x8c>)
   840ca:	2200      	movs	r2, #0
   840cc:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
   840ce:	2003      	movs	r0, #3
   840d0:	4b0e      	ldr	r3, [pc, #56]	; (8410c <udd_enable+0x90>)
   840d2:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
   840d4:	4b0e      	ldr	r3, [pc, #56]	; (84110 <udd_enable+0x94>)
   840d6:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
   840d8:	6878      	ldr	r0, [r7, #4]
   840da:	4b0e      	ldr	r3, [pc, #56]	; (84114 <udd_enable+0x98>)
   840dc:	4798      	blx	r3
}
   840de:	bf00      	nop
   840e0:	3708      	adds	r7, #8
   840e2:	46bd      	mov	sp, r7
   840e4:	bd80      	pop	{r7, pc}
   840e6:	bf00      	nop
   840e8:	00082bb9 	.word	0x00082bb9
   840ec:	000821b5 	.word	0x000821b5
   840f0:	00083d69 	.word	0x00083d69
   840f4:	400a4000 	.word	0x400a4000
   840f8:	00083d15 	.word	0x00083d15
   840fc:	00083ce5 	.word	0x00083ce5
   84100:	00085405 	.word	0x00085405
   84104:	00082271 	.word	0x00082271
   84108:	200012a4 	.word	0x200012a4
   8410c:	00083df1 	.word	0x00083df1
   84110:	00084119 	.word	0x00084119
   84114:	00083dc1 	.word	0x00083dc1

00084118 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   84118:	b580      	push	{r7, lr}
   8411a:	b082      	sub	sp, #8
   8411c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
   8411e:	4b26      	ldr	r3, [pc, #152]	; (841b8 <udd_attach+0xa0>)
   84120:	4798      	blx	r3
   84122:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   84124:	2001      	movs	r0, #1
   84126:	4b25      	ldr	r3, [pc, #148]	; (841bc <udd_attach+0xa4>)
   84128:	4798      	blx	r3
	udd_enable_periph_ck();
   8412a:	201d      	movs	r0, #29
   8412c:	4b24      	ldr	r3, [pc, #144]	; (841c0 <udd_attach+0xa8>)
   8412e:	4798      	blx	r3

	// Authorize attach if Vbus is present
	udd_attach_device();
   84130:	4b24      	ldr	r3, [pc, #144]	; (841c4 <udd_attach+0xac>)
   84132:	681b      	ldr	r3, [r3, #0]
   84134:	4a23      	ldr	r2, [pc, #140]	; (841c4 <udd_attach+0xac>)
   84136:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8413a:	6013      	str	r3, [r2, #0]
   8413c:	4b21      	ldr	r3, [pc, #132]	; (841c4 <udd_attach+0xac>)
   8413e:	681b      	ldr	r3, [r3, #0]
   84140:	4a20      	ldr	r2, [pc, #128]	; (841c4 <udd_attach+0xac>)
   84142:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   84146:	6013      	str	r3, [r2, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   84148:	4b1e      	ldr	r3, [pc, #120]	; (841c4 <udd_attach+0xac>)
   8414a:	691b      	ldr	r3, [r3, #16]
   8414c:	4a1d      	ldr	r2, [pc, #116]	; (841c4 <udd_attach+0xac>)
   8414e:	f043 0310 	orr.w	r3, r3, #16
   84152:	6113      	str	r3, [r2, #16]
	udd_enable_suspend_interrupt();
   84154:	4b1b      	ldr	r3, [pc, #108]	; (841c4 <udd_attach+0xac>)
   84156:	691b      	ldr	r3, [r3, #16]
   84158:	4a1a      	ldr	r2, [pc, #104]	; (841c4 <udd_attach+0xac>)
   8415a:	f043 0302 	orr.w	r3, r3, #2
   8415e:	6113      	str	r3, [r2, #16]
	udd_enable_wake_up_interrupt();
   84160:	4b18      	ldr	r3, [pc, #96]	; (841c4 <udd_attach+0xac>)
   84162:	691b      	ldr	r3, [r3, #16]
   84164:	4a17      	ldr	r2, [pc, #92]	; (841c4 <udd_attach+0xac>)
   84166:	f043 0320 	orr.w	r3, r3, #32
   8416a:	6113      	str	r3, [r2, #16]
	udd_enable_sof_interrupt();
   8416c:	4b15      	ldr	r3, [pc, #84]	; (841c4 <udd_attach+0xac>)
   8416e:	691b      	ldr	r3, [r3, #16]
   84170:	4a14      	ldr	r2, [pc, #80]	; (841c4 <udd_attach+0xac>)
   84172:	f043 0308 	orr.w	r3, r3, #8
   84176:	6113      	str	r3, [r2, #16]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   84178:	4b12      	ldr	r3, [pc, #72]	; (841c4 <udd_attach+0xac>)
   8417a:	691b      	ldr	r3, [r3, #16]
   8417c:	4a11      	ldr	r2, [pc, #68]	; (841c4 <udd_attach+0xac>)
   8417e:	f043 0304 	orr.w	r3, r3, #4
   84182:	6113      	str	r3, [r2, #16]
#endif
	// Reset following interrupts flag
	udd_ack_sof();
   84184:	4b0f      	ldr	r3, [pc, #60]	; (841c4 <udd_attach+0xac>)
   84186:	2208      	movs	r2, #8
   84188:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   8418a:	4b0e      	ldr	r3, [pc, #56]	; (841c4 <udd_attach+0xac>)
   8418c:	2204      	movs	r2, #4
   8418e:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   84190:	4b0c      	ldr	r3, [pc, #48]	; (841c4 <udd_attach+0xac>)
   84192:	2210      	movs	r2, #16
   84194:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   84196:	4b0b      	ldr	r3, [pc, #44]	; (841c4 <udd_attach+0xac>)
   84198:	2202      	movs	r2, #2
   8419a:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   8419c:	4b09      	ldr	r3, [pc, #36]	; (841c4 <udd_attach+0xac>)
   8419e:	2220      	movs	r2, #32
   841a0:	619a      	str	r2, [r3, #24]

	udd_disable_periph_ck();
   841a2:	201d      	movs	r0, #29
   841a4:	4b08      	ldr	r3, [pc, #32]	; (841c8 <udd_attach+0xb0>)
   841a6:	4798      	blx	r3
	cpu_irq_restore(flags);
   841a8:	6878      	ldr	r0, [r7, #4]
   841aa:	4b08      	ldr	r3, [pc, #32]	; (841cc <udd_attach+0xb4>)
   841ac:	4798      	blx	r3
}
   841ae:	bf00      	nop
   841b0:	3708      	adds	r7, #8
   841b2:	46bd      	mov	sp, r7
   841b4:	bd80      	pop	{r7, pc}
   841b6:	bf00      	nop
   841b8:	00083d69 	.word	0x00083d69
   841bc:	00083e61 	.word	0x00083e61
   841c0:	000821b5 	.word	0x000821b5
   841c4:	400a4000 	.word	0x400a4000
   841c8:	00082201 	.word	0x00082201
   841cc:	00083dc1 	.word	0x00083dc1

000841d0 <udd_detach>:


void udd_detach(void)
{
   841d0:	b580      	push	{r7, lr}
   841d2:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   841d4:	201d      	movs	r0, #29
   841d6:	4b0b      	ldr	r3, [pc, #44]	; (84204 <udd_detach+0x34>)
   841d8:	4798      	blx	r3
	// Detach device from the bus
	udd_detach_device();
   841da:	4b0b      	ldr	r3, [pc, #44]	; (84208 <udd_detach+0x38>)
   841dc:	681b      	ldr	r3, [r3, #0]
   841de:	4a0a      	ldr	r2, [pc, #40]	; (84208 <udd_detach+0x38>)
   841e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   841e4:	6013      	str	r3, [r2, #0]
   841e6:	4b08      	ldr	r3, [pc, #32]	; (84208 <udd_detach+0x38>)
   841e8:	681b      	ldr	r3, [r3, #0]
   841ea:	4a07      	ldr	r2, [pc, #28]	; (84208 <udd_detach+0x38>)
   841ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   841f0:	6013      	str	r3, [r2, #0]
	udd_disable_periph_ck();
   841f2:	201d      	movs	r0, #29
   841f4:	4b05      	ldr	r3, [pc, #20]	; (8420c <udd_detach+0x3c>)
   841f6:	4798      	blx	r3
	udd_sleep_mode(false);
   841f8:	2000      	movs	r0, #0
   841fa:	4b05      	ldr	r3, [pc, #20]	; (84210 <udd_detach+0x40>)
   841fc:	4798      	blx	r3
}
   841fe:	bf00      	nop
   84200:	bd80      	pop	{r7, pc}
   84202:	bf00      	nop
   84204:	000821b5 	.word	0x000821b5
   84208:	400a4000 	.word	0x400a4000
   8420c:	00082201 	.word	0x00082201
   84210:	00083e61 	.word	0x00083e61

00084214 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
   84214:	b480      	push	{r7}
   84216:	af00      	add	r7, sp, #0
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   84218:	4b06      	ldr	r3, [pc, #24]	; (84234 <udd_is_high_speed+0x20>)
   8421a:	695b      	ldr	r3, [r3, #20]
   8421c:	f003 0301 	and.w	r3, r3, #1
   84220:	2b00      	cmp	r3, #0
   84222:	bf14      	ite	ne
   84224:	2301      	movne	r3, #1
   84226:	2300      	moveq	r3, #0
   84228:	b2db      	uxtb	r3, r3
#else
	return false;
#endif
}
   8422a:	4618      	mov	r0, r3
   8422c:	46bd      	mov	sp, r7
   8422e:	bc80      	pop	{r7}
   84230:	4770      	bx	lr
   84232:	bf00      	nop
   84234:	400a4000 	.word	0x400a4000

00084238 <udd_set_address>:


void udd_set_address(uint8_t address)
{
   84238:	b480      	push	{r7}
   8423a:	b083      	sub	sp, #12
   8423c:	af00      	add	r7, sp, #0
   8423e:	4603      	mov	r3, r0
   84240:	71fb      	strb	r3, [r7, #7]
	dbg_print("Addr%d ", address);
	udd_disable_address();
   84242:	4b0d      	ldr	r3, [pc, #52]	; (84278 <udd_set_address+0x40>)
   84244:	681b      	ldr	r3, [r3, #0]
   84246:	4a0c      	ldr	r2, [pc, #48]	; (84278 <udd_set_address+0x40>)
   84248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8424c:	6013      	str	r3, [r2, #0]
	udd_configure_address(address);
   8424e:	4b0a      	ldr	r3, [pc, #40]	; (84278 <udd_set_address+0x40>)
   84250:	681b      	ldr	r3, [r3, #0]
   84252:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   84256:	79fb      	ldrb	r3, [r7, #7]
   84258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   8425c:	4906      	ldr	r1, [pc, #24]	; (84278 <udd_set_address+0x40>)
   8425e:	4313      	orrs	r3, r2
   84260:	600b      	str	r3, [r1, #0]
	udd_enable_address();
   84262:	4b05      	ldr	r3, [pc, #20]	; (84278 <udd_set_address+0x40>)
   84264:	681b      	ldr	r3, [r3, #0]
   84266:	4a04      	ldr	r2, [pc, #16]	; (84278 <udd_set_address+0x40>)
   84268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8426c:	6013      	str	r3, [r2, #0]
}
   8426e:	bf00      	nop
   84270:	370c      	adds	r7, #12
   84272:	46bd      	mov	sp, r7
   84274:	bc80      	pop	{r7}
   84276:	4770      	bx	lr
   84278:	400a4000 	.word	0x400a4000

0008427c <udd_getaddress>:


uint8_t udd_getaddress(void)
{
   8427c:	b480      	push	{r7}
   8427e:	af00      	add	r7, sp, #0
	return udd_get_configured_address();
   84280:	4b04      	ldr	r3, [pc, #16]	; (84294 <udd_getaddress+0x18>)
   84282:	681b      	ldr	r3, [r3, #0]
   84284:	b2db      	uxtb	r3, r3
   84286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   8428a:	b2db      	uxtb	r3, r3
}
   8428c:	4618      	mov	r0, r3
   8428e:	46bd      	mov	sp, r7
   84290:	bc80      	pop	{r7}
   84292:	4770      	bx	lr
   84294:	400a4000 	.word	0x400a4000

00084298 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
   84298:	b480      	push	{r7}
   8429a:	b083      	sub	sp, #12
   8429c:	af00      	add	r7, sp, #0
   8429e:	6078      	str	r0, [r7, #4]
   842a0:	460b      	mov	r3, r1
   842a2:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
   842a4:	4a05      	ldr	r2, [pc, #20]	; (842bc <udd_set_setup_payload+0x24>)
   842a6:	687b      	ldr	r3, [r7, #4]
   842a8:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   842aa:	4a04      	ldr	r2, [pc, #16]	; (842bc <udd_set_setup_payload+0x24>)
   842ac:	887b      	ldrh	r3, [r7, #2]
   842ae:	8193      	strh	r3, [r2, #12]
}
   842b0:	bf00      	nop
   842b2:	370c      	adds	r7, #12
   842b4:	46bd      	mov	sp, r7
   842b6:	bc80      	pop	{r7}
   842b8:	4770      	bx	lr
   842ba:	bf00      	nop
   842bc:	20001320 	.word	0x20001320

000842c0 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   842c0:	b590      	push	{r4, r7, lr}
   842c2:	b089      	sub	sp, #36	; 0x24
   842c4:	af02      	add	r7, sp, #8
   842c6:	4603      	mov	r3, r0
   842c8:	71fb      	strb	r3, [r7, #7]
   842ca:	460b      	mov	r3, r1
   842cc:	71bb      	strb	r3, [r7, #6]
   842ce:	4613      	mov	r3, r2
   842d0:	80bb      	strh	r3, [r7, #4]
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, nb_tran = 0, i;
   842d2:	2300      	movs	r3, #0
   842d4:	74fb      	strb	r3, [r7, #19]
	bool b_iso_hbw = false;
   842d6:	2300      	movs	r3, #0
   842d8:	747b      	strb	r3, [r7, #17]

	b_dir_in = ep & USB_EP_DIR_IN;
   842da:	79fb      	ldrb	r3, [r7, #7]
   842dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
   842e0:	2b00      	cmp	r3, #0
   842e2:	bf14      	ite	ne
   842e4:	2301      	movne	r3, #1
   842e6:	2300      	moveq	r3, #0
   842e8:	743b      	strb	r3, [r7, #16]
	ep = ep & USB_EP_ADDR_MASK;
   842ea:	79fb      	ldrb	r3, [r7, #7]
   842ec:	f003 030f 	and.w	r3, r3, #15
   842f0:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
   842f2:	79fb      	ldrb	r3, [r7, #7]
   842f4:	2b02      	cmp	r3, #2
   842f6:	d901      	bls.n	842fc <udd_ep_alloc+0x3c>
		return false;
   842f8:	2300      	movs	r3, #0
   842fa:	e1ae      	b.n	8465a <udd_ep_alloc+0x39a>
	}
	if (Is_udd_endpoint_enabled(ep)) {
   842fc:	4ab0      	ldr	r2, [pc, #704]	; (845c0 <udd_ep_alloc+0x300>)
   842fe:	79fb      	ldrb	r3, [r7, #7]
   84300:	015b      	lsls	r3, r3, #5
   84302:	4413      	add	r3, r2
   84304:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   84308:	681b      	ldr	r3, [r3, #0]
   8430a:	f003 0301 	and.w	r3, r3, #1
   8430e:	2b00      	cmp	r3, #0
   84310:	d001      	beq.n	84316 <udd_ep_alloc+0x56>
		return false;
   84312:	2300      	movs	r3, #0
   84314:	e1a1      	b.n	8465a <udd_ep_alloc+0x39a>
	}

	// Bank choice
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   84316:	79bb      	ldrb	r3, [r7, #6]
   84318:	f003 0303 	and.w	r3, r3, #3
   8431c:	2b02      	cmp	r3, #2
   8431e:	d01a      	beq.n	84356 <udd_ep_alloc+0x96>
   84320:	2b03      	cmp	r3, #3
   84322:	d015      	beq.n	84350 <udd_ep_alloc+0x90>
   84324:	2b01      	cmp	r3, #1
   84326:	d119      	bne.n	8435c <udd_ep_alloc+0x9c>
	case USB_EP_TYPE_ISOCHRONOUS:
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   84328:	79fb      	ldrb	r3, [r7, #7]
   8432a:	2b00      	cmp	r3, #0
   8432c:	d007      	beq.n	8433e <udd_ep_alloc+0x7e>
   8432e:	79fb      	ldrb	r3, [r7, #7]
   84330:	2b03      	cmp	r3, #3
   84332:	d004      	beq.n	8433e <udd_ep_alloc+0x7e>
   84334:	79fb      	ldrb	r3, [r7, #7]
   84336:	2b04      	cmp	r3, #4
   84338:	d001      	beq.n	8433e <udd_ep_alloc+0x7e>
   8433a:	2301      	movs	r3, #1
   8433c:	e000      	b.n	84340 <udd_ep_alloc+0x80>
   8433e:	2300      	movs	r3, #0
   84340:	747b      	strb	r3, [r7, #17]
   84342:	7c7b      	ldrb	r3, [r7, #17]
   84344:	f003 0301 	and.w	r3, r3, #1
   84348:	747b      	strb	r3, [r7, #17]
		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
   8434a:	2301      	movs	r3, #1
   8434c:	757b      	strb	r3, [r7, #21]
		break;
   8434e:	e007      	b.n	84360 <udd_ep_alloc+0xa0>
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
   84350:	2301      	movs	r3, #1
   84352:	757b      	strb	r3, [r7, #21]
		break;
   84354:	e004      	b.n	84360 <udd_ep_alloc+0xa0>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   84356:	2302      	movs	r3, #2
   84358:	757b      	strb	r3, [r7, #21]
		break;
   8435a:	e001      	b.n	84360 <udd_ep_alloc+0xa0>
	default:
		Assert(false);
		return false;
   8435c:	2300      	movs	r3, #0
   8435e:	e17c      	b.n	8465a <udd_ep_alloc+0x39a>
	}
	switch (nb_bank) {
   84360:	7d7b      	ldrb	r3, [r7, #21]
   84362:	2b02      	cmp	r3, #2
   84364:	d006      	beq.n	84374 <udd_ep_alloc+0xb4>
   84366:	2b03      	cmp	r3, #3
   84368:	d007      	beq.n	8437a <udd_ep_alloc+0xba>
   8436a:	2b01      	cmp	r3, #1
   8436c:	d108      	bne.n	84380 <udd_ep_alloc+0xc0>
	case 1:
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   8436e:	2301      	movs	r3, #1
   84370:	753b      	strb	r3, [r7, #20]
		break;
   84372:	e007      	b.n	84384 <udd_ep_alloc+0xc4>
	case 2:
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   84374:	2302      	movs	r3, #2
   84376:	753b      	strb	r3, [r7, #20]
		break;
   84378:	e004      	b.n	84384 <udd_ep_alloc+0xc4>
	case 3:
		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   8437a:	2303      	movs	r3, #3
   8437c:	753b      	strb	r3, [r7, #20]
		break;
   8437e:	e001      	b.n	84384 <udd_ep_alloc+0xc4>
	default:
		Assert(false);
		return false;
   84380:	2300      	movs	r3, #0
   84382:	e16a      	b.n	8465a <udd_ep_alloc+0x39a>
	}
	if (b_iso_hbw) {
   84384:	7c7b      	ldrb	r3, [r7, #17]
   84386:	2b00      	cmp	r3, #0
   84388:	d017      	beq.n	843ba <udd_ep_alloc+0xfa>
		switch(MaxEndpointSize & (0x3u << 11)) {
   8438a:	88bb      	ldrh	r3, [r7, #4]
   8438c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   84390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   84394:	d003      	beq.n	8439e <udd_ep_alloc+0xde>
   84396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   8439a:	d003      	beq.n	843a4 <udd_ep_alloc+0xe4>
   8439c:	e005      	b.n	843aa <udd_ep_alloc+0xea>
		case (0x1u << 11):
			nb_tran = 2;
   8439e:	2302      	movs	r3, #2
   843a0:	74fb      	strb	r3, [r7, #19]
			break;
   843a2:	e005      	b.n	843b0 <udd_ep_alloc+0xf0>
		case (0x2u << 11):
			nb_tran = 3;
   843a4:	2303      	movs	r3, #3
   843a6:	74fb      	strb	r3, [r7, #19]
			break;
   843a8:	e002      	b.n	843b0 <udd_ep_alloc+0xf0>
		default:
			nb_tran = 1;
   843aa:	2301      	movs	r3, #1
   843ac:	74fb      	strb	r3, [r7, #19]
			break;
   843ae:	bf00      	nop
		}
		MaxEndpointSize &= ~(0x3u << 11);
   843b0:	88bb      	ldrh	r3, [r7, #4]
   843b2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
   843b6:	80bb      	strh	r3, [r7, #4]
   843b8:	e006      	b.n	843c8 <udd_ep_alloc+0x108>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   843ba:	88bb      	ldrh	r3, [r7, #4]
   843bc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   843c0:	2b00      	cmp	r3, #0
   843c2:	d001      	beq.n	843c8 <udd_ep_alloc+0x108>
		// High BW not supported
		return false;
   843c4:	2300      	movs	r3, #0
   843c6:	e148      	b.n	8465a <udd_ep_alloc+0x39a>
	Assert(MaxEndpointSize <= udd_get_endpoint_size_max(ep));
	Assert(nb_bank <= udd_get_endpoint_bank_max_nbr(ep));

	// Set configuration of new endpoint
	// Note: NB_TRANS is at maximum for isochronous endpoint, else 0 (ignored).
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   843c8:	4a7d      	ldr	r2, [pc, #500]	; (845c0 <udd_ep_alloc+0x300>)
   843ca:	79fb      	ldrb	r3, [r7, #7]
   843cc:	3308      	adds	r3, #8
   843ce:	015b      	lsls	r3, r3, #5
   843d0:	4413      	add	r3, r2
   843d2:	681b      	ldr	r3, [r3, #0]
   843d4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   843d8:	f023 0303 	bic.w	r3, r3, #3
   843dc:	79ba      	ldrb	r2, [r7, #6]
   843de:	0112      	lsls	r2, r2, #4
   843e0:	f002 0230 	and.w	r2, r2, #48	; 0x30
   843e4:	7c39      	ldrb	r1, [r7, #16]
   843e6:	2900      	cmp	r1, #0
   843e8:	d001      	beq.n	843ee <udd_ep_alloc+0x12e>
   843ea:	2108      	movs	r1, #8
   843ec:	e000      	b.n	843f0 <udd_ep_alloc+0x130>
   843ee:	2100      	movs	r1, #0
   843f0:	4311      	orrs	r1, r2
   843f2:	88ba      	ldrh	r2, [r7, #4]
   843f4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   843f8:	d207      	bcs.n	8440a <udd_ep_alloc+0x14a>
   843fa:	88ba      	ldrh	r2, [r7, #4]
   843fc:	2a08      	cmp	r2, #8
   843fe:	bf38      	it	cc
   84400:	2208      	movcc	r2, #8
   84402:	b292      	uxth	r2, r2
   84404:	0052      	lsls	r2, r2, #1
   84406:	3a01      	subs	r2, #1
   84408:	e001      	b.n	8440e <udd_ep_alloc+0x14e>
   8440a:	f240 72ff 	movw	r2, #2047	; 0x7ff
   8440e:	fab2 f282 	clz	r2, r2
   84412:	f1c2 021c 	rsb	r2, r2, #28
   84416:	4311      	orrs	r1, r2
   84418:	7d3a      	ldrb	r2, [r7, #20]
   8441a:	0192      	lsls	r2, r2, #6
   8441c:	b2d2      	uxtb	r2, r2
   8441e:	4311      	orrs	r1, r2
   84420:	7c7a      	ldrb	r2, [r7, #17]
   84422:	2a00      	cmp	r2, #0
   84424:	d004      	beq.n	84430 <udd_ep_alloc+0x170>
   84426:	7cfa      	ldrb	r2, [r7, #19]
   84428:	0212      	lsls	r2, r2, #8
   8442a:	f402 7240 	and.w	r2, r2, #768	; 0x300
   8442e:	e000      	b.n	84432 <udd_ep_alloc+0x172>
   84430:	2200      	movs	r2, #0
   84432:	430a      	orrs	r2, r1
   84434:	f3c2 0209 	ubfx	r2, r2, #0, #10
   84438:	4861      	ldr	r0, [pc, #388]	; (845c0 <udd_ep_alloc+0x300>)
   8443a:	79f9      	ldrb	r1, [r7, #7]
   8443c:	431a      	orrs	r2, r3
   8443e:	f101 0308 	add.w	r3, r1, #8
   84442:	015b      	lsls	r3, r3, #5
   84444:	4403      	add	r3, r0
   84446:	601a      	str	r2, [r3, #0]
			MaxEndpointSize, bank, (b_iso_hbw)?nb_tran:0);
	if (!Is_udd_endpoint_mapped(ep)) {
   84448:	4a5d      	ldr	r2, [pc, #372]	; (845c0 <udd_ep_alloc+0x300>)
   8444a:	79fb      	ldrb	r3, [r7, #7]
   8444c:	3308      	adds	r3, #8
   8444e:	015b      	lsls	r3, r3, #5
   84450:	4413      	add	r3, r2
   84452:	681b      	ldr	r3, [r3, #0]
   84454:	2b00      	cmp	r3, #0
   84456:	db01      	blt.n	8445c <udd_ep_alloc+0x19c>
		return false;
   84458:	2300      	movs	r3, #0
   8445a:	e0fe      	b.n	8465a <udd_ep_alloc+0x39a>
	}
	udd_enable_endpoint(ep);
   8445c:	4a58      	ldr	r2, [pc, #352]	; (845c0 <udd_ep_alloc+0x300>)
   8445e:	79fb      	ldrb	r3, [r7, #7]
   84460:	3308      	adds	r3, #8
   84462:	015b      	lsls	r3, r3, #5
   84464:	4413      	add	r3, r2
   84466:	3304      	adds	r3, #4
   84468:	2201      	movs	r2, #1
   8446a:	601a      	str	r2, [r3, #0]

	// To avoid conflict during reorganization of the DPRAM
	// the superior endpoint must be unallocated and reallocated
	ep_allocated = 0;
   8446c:	2300      	movs	r3, #0
   8446e:	82fb      	strh	r3, [r7, #22]

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   84470:	2302      	movs	r3, #2
   84472:	74bb      	strb	r3, [r7, #18]
   84474:	e039      	b.n	844ea <udd_ep_alloc+0x22a>
		if (Is_udd_endpoint_enabled(i)) {
   84476:	4a52      	ldr	r2, [pc, #328]	; (845c0 <udd_ep_alloc+0x300>)
   84478:	7cbb      	ldrb	r3, [r7, #18]
   8447a:	015b      	lsls	r3, r3, #5
   8447c:	4413      	add	r3, r2
   8447e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   84482:	681b      	ldr	r3, [r3, #0]
   84484:	f003 0301 	and.w	r3, r3, #1
   84488:	2b00      	cmp	r3, #0
   8448a:	d02b      	beq.n	844e4 <udd_ep_alloc+0x224>
			// Save number of bank value
			bank = udd_get_endpoint_bank(i);
   8448c:	4a4c      	ldr	r2, [pc, #304]	; (845c0 <udd_ep_alloc+0x300>)
   8448e:	7cbb      	ldrb	r3, [r7, #18]
   84490:	3308      	adds	r3, #8
   84492:	015b      	lsls	r3, r3, #5
   84494:	4413      	add	r3, r2
   84496:	681b      	ldr	r3, [r3, #0]
   84498:	099b      	lsrs	r3, r3, #6
   8449a:	b2db      	uxtb	r3, r3
   8449c:	f003 0303 	and.w	r3, r3, #3
   844a0:	753b      	strb	r3, [r7, #20]
			ep_allocated |=  bank << (i * 2);
   844a2:	7d3a      	ldrb	r2, [r7, #20]
   844a4:	7cbb      	ldrb	r3, [r7, #18]
   844a6:	005b      	lsls	r3, r3, #1
   844a8:	fa02 f303 	lsl.w	r3, r2, r3
   844ac:	b21a      	sxth	r2, r3
   844ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   844b2:	4313      	orrs	r3, r2
   844b4:	b21b      	sxth	r3, r3
   844b6:	82fb      	strh	r3, [r7, #22]
			// Disable and unallocate endpoint
			udd_disable_endpoint(i);
   844b8:	4a41      	ldr	r2, [pc, #260]	; (845c0 <udd_ep_alloc+0x300>)
   844ba:	7cbb      	ldrb	r3, [r7, #18]
   844bc:	015b      	lsls	r3, r3, #5
   844be:	4413      	add	r3, r2
   844c0:	f503 7384 	add.w	r3, r3, #264	; 0x108
   844c4:	2201      	movs	r2, #1
   844c6:	601a      	str	r2, [r3, #0]
			udd_configure_endpoint_bank(i, 0);
   844c8:	4a3d      	ldr	r2, [pc, #244]	; (845c0 <udd_ep_alloc+0x300>)
   844ca:	7cbb      	ldrb	r3, [r7, #18]
   844cc:	3308      	adds	r3, #8
   844ce:	015b      	lsls	r3, r3, #5
   844d0:	4413      	add	r3, r2
   844d2:	681a      	ldr	r2, [r3, #0]
   844d4:	493a      	ldr	r1, [pc, #232]	; (845c0 <udd_ep_alloc+0x300>)
   844d6:	7cbb      	ldrb	r3, [r7, #18]
   844d8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   844dc:	3308      	adds	r3, #8
   844de:	015b      	lsls	r3, r3, #5
   844e0:	440b      	add	r3, r1
   844e2:	601a      	str	r2, [r3, #0]
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   844e4:	7cbb      	ldrb	r3, [r7, #18]
   844e6:	3b01      	subs	r3, #1
   844e8:	74bb      	strb	r3, [r7, #18]
   844ea:	7cba      	ldrb	r2, [r7, #18]
   844ec:	79fb      	ldrb	r3, [r7, #7]
   844ee:	429a      	cmp	r2, r3
   844f0:	d2c1      	bcs.n	84476 <udd_ep_alloc+0x1b6>

		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   844f2:	79fb      	ldrb	r3, [r7, #7]
   844f4:	74bb      	strb	r3, [r7, #18]
   844f6:	e0ab      	b.n	84650 <udd_ep_alloc+0x390>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   844f8:	7cbb      	ldrb	r3, [r7, #18]
   844fa:	1e5a      	subs	r2, r3, #1
   844fc:	4613      	mov	r3, r2
   844fe:	005b      	lsls	r3, r3, #1
   84500:	4413      	add	r3, r2
   84502:	00db      	lsls	r3, r3, #3
   84504:	4a2f      	ldr	r2, [pc, #188]	; (845c4 <udd_ep_alloc+0x304>)
   84506:	4413      	add	r3, r2
   84508:	60fb      	str	r3, [r7, #12]
		bool b_restart = ptr_job->busy;
   8450a:	68fb      	ldr	r3, [r7, #12]
   8450c:	7d1b      	ldrb	r3, [r3, #20]
   8450e:	f3c3 0300 	ubfx	r3, r3, #0, #1
   84512:	b2db      	uxtb	r3, r3
   84514:	2b00      	cmp	r3, #0
   84516:	bf14      	ite	ne
   84518:	2301      	movne	r3, #1
   8451a:	2300      	moveq	r3, #0
   8451c:	72fb      	strb	r3, [r7, #11]
		// Unallocated banks?
		bank = (ep_allocated >> (i * 2)) & 0x03;
   8451e:	8afa      	ldrh	r2, [r7, #22]
   84520:	7cbb      	ldrb	r3, [r7, #18]
   84522:	005b      	lsls	r3, r3, #1
   84524:	fa42 f303 	asr.w	r3, r2, r3
   84528:	b2db      	uxtb	r3, r3
   8452a:	f003 0303 	and.w	r3, r3, #3
   8452e:	753b      	strb	r3, [r7, #20]
		if (bank == 0) {
   84530:	7d3b      	ldrb	r3, [r7, #20]
   84532:	2b00      	cmp	r3, #0
   84534:	f000 8088 	beq.w	84648 <udd_ep_alloc+0x388>
			continue;
		}
		// Restart running job because
		// memory window slides up and its data is lost
		ptr_job->busy = false;
   84538:	68fa      	ldr	r2, [r7, #12]
   8453a:	7d13      	ldrb	r3, [r2, #20]
   8453c:	f36f 0300 	bfc	r3, #0, #1
   84540:	7513      	strb	r3, [r2, #20]
		// Re-allocate memory
		udd_configure_endpoint_bank(i, bank);
   84542:	4a1f      	ldr	r2, [pc, #124]	; (845c0 <udd_ep_alloc+0x300>)
   84544:	7cbb      	ldrb	r3, [r7, #18]
   84546:	3308      	adds	r3, #8
   84548:	015b      	lsls	r3, r3, #5
   8454a:	4413      	add	r3, r2
   8454c:	681b      	ldr	r3, [r3, #0]
   8454e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
   84552:	7d3b      	ldrb	r3, [r7, #20]
   84554:	019b      	lsls	r3, r3, #6
   84556:	b2da      	uxtb	r2, r3
   84558:	4819      	ldr	r0, [pc, #100]	; (845c0 <udd_ep_alloc+0x300>)
   8455a:	7cbb      	ldrb	r3, [r7, #18]
   8455c:	430a      	orrs	r2, r1
   8455e:	3308      	adds	r3, #8
   84560:	015b      	lsls	r3, r3, #5
   84562:	4403      	add	r3, r0
   84564:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint(i);
   84566:	4a16      	ldr	r2, [pc, #88]	; (845c0 <udd_ep_alloc+0x300>)
   84568:	7cbb      	ldrb	r3, [r7, #18]
   8456a:	3308      	adds	r3, #8
   8456c:	015b      	lsls	r3, r3, #5
   8456e:	4413      	add	r3, r2
   84570:	3304      	adds	r3, #4
   84572:	2201      	movs	r2, #1
   84574:	601a      	str	r2, [r3, #0]
		if (!Is_udd_endpoint_mapped(i)) {
   84576:	4a12      	ldr	r2, [pc, #72]	; (845c0 <udd_ep_alloc+0x300>)
   84578:	7cbb      	ldrb	r3, [r7, #18]
   8457a:	3308      	adds	r3, #8
   8457c:	015b      	lsls	r3, r3, #5
   8457e:	4413      	add	r3, r2
   84580:	681b      	ldr	r3, [r3, #0]
   84582:	2b00      	cmp	r3, #0
   84584:	db20      	blt.n	845c8 <udd_ep_alloc+0x308>
			dbg_print("ErrRealloc%d-JobE ", i);
			if (NULL == ptr_job->call_trans) {
   84586:	68fb      	ldr	r3, [r7, #12]
   84588:	681b      	ldr	r3, [r3, #0]
   8458a:	2b00      	cmp	r3, #0
   8458c:	d101      	bne.n	84592 <udd_ep_alloc+0x2d2>
				return false;
   8458e:	2300      	movs	r3, #0
   84590:	e063      	b.n	8465a <udd_ep_alloc+0x39a>
			}
			if (Is_udd_endpoint_in(i)) {
   84592:	4a0b      	ldr	r2, [pc, #44]	; (845c0 <udd_ep_alloc+0x300>)
   84594:	7cbb      	ldrb	r3, [r7, #18]
   84596:	3308      	adds	r3, #8
   84598:	015b      	lsls	r3, r3, #5
   8459a:	4413      	add	r3, r2
   8459c:	681b      	ldr	r3, [r3, #0]
   8459e:	f003 0308 	and.w	r3, r3, #8
   845a2:	2b00      	cmp	r3, #0
   845a4:	d003      	beq.n	845ae <udd_ep_alloc+0x2ee>
				i |= USB_EP_DIR_IN;
   845a6:	7cbb      	ldrb	r3, [r7, #18]
   845a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   845ac:	74bb      	strb	r3, [r7, #18]
			}
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   845ae:	68fb      	ldr	r3, [r7, #12]
   845b0:	681b      	ldr	r3, [r3, #0]
   845b2:	68fa      	ldr	r2, [r7, #12]
   845b4:	68d1      	ldr	r1, [r2, #12]
   845b6:	7cba      	ldrb	r2, [r7, #18]
   845b8:	2001      	movs	r0, #1
   845ba:	4798      	blx	r3
					ptr_job->buf_cnt, i);
			return false;
   845bc:	2300      	movs	r3, #0
   845be:	e04c      	b.n	8465a <udd_ep_alloc+0x39a>
   845c0:	400a4000 	.word	0x400a4000
   845c4:	200012ac 	.word	0x200012ac
		}
		udd_enable_endpoint_bank_autoswitch(i);
   845c8:	4a26      	ldr	r2, [pc, #152]	; (84664 <udd_ep_alloc+0x3a4>)
   845ca:	7cbb      	ldrb	r3, [r7, #18]
   845cc:	3308      	adds	r3, #8
   845ce:	015b      	lsls	r3, r3, #5
   845d0:	4413      	add	r3, r2
   845d2:	3304      	adds	r3, #4
   845d4:	681a      	ldr	r2, [r3, #0]
   845d6:	4923      	ldr	r1, [pc, #140]	; (84664 <udd_ep_alloc+0x3a4>)
   845d8:	7cbb      	ldrb	r3, [r7, #18]
   845da:	f042 0202 	orr.w	r2, r2, #2
   845de:	3308      	adds	r3, #8
   845e0:	015b      	lsls	r3, r3, #5
   845e2:	440b      	add	r3, r1
   845e4:	3304      	adds	r3, #4
   845e6:	601a      	str	r2, [r3, #0]
		if (b_restart) {
   845e8:	7afb      	ldrb	r3, [r7, #11]
   845ea:	2b00      	cmp	r3, #0
   845ec:	d02d      	beq.n	8464a <udd_ep_alloc+0x38a>
			// Re-run the job remaining part
			ptr_job->buf_cnt -= ptr_job->buf_load;
   845ee:	68fb      	ldr	r3, [r7, #12]
   845f0:	68da      	ldr	r2, [r3, #12]
   845f2:	68fb      	ldr	r3, [r7, #12]
   845f4:	691b      	ldr	r3, [r3, #16]
   845f6:	1ad2      	subs	r2, r2, r3
   845f8:	68fb      	ldr	r3, [r7, #12]
   845fa:	60da      	str	r2, [r3, #12]
			b_restart = udd_ep_run(i,
					ptr_job->b_shortpacket,
   845fc:	68fb      	ldr	r3, [r7, #12]
   845fe:	7d1b      	ldrb	r3, [r3, #20]
   84600:	f3c3 0340 	ubfx	r3, r3, #1, #1
   84604:	b2db      	uxtb	r3, r3
			b_restart = udd_ep_run(i,
   84606:	2b00      	cmp	r3, #0
   84608:	bf14      	ite	ne
   8460a:	2301      	movne	r3, #1
   8460c:	2300      	moveq	r3, #0
   8460e:	b2d9      	uxtb	r1, r3
					&ptr_job->buf[ptr_job->buf_cnt],
   84610:	68fb      	ldr	r3, [r7, #12]
   84612:	685a      	ldr	r2, [r3, #4]
   84614:	68fb      	ldr	r3, [r7, #12]
   84616:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   84618:	18d4      	adds	r4, r2, r3
					ptr_job->buf_size
   8461a:	68fb      	ldr	r3, [r7, #12]
   8461c:	689a      	ldr	r2, [r3, #8]
						- ptr_job->buf_cnt,
   8461e:	68fb      	ldr	r3, [r7, #12]
   84620:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   84622:	1ad2      	subs	r2, r2, r3
   84624:	68fb      	ldr	r3, [r7, #12]
   84626:	681b      	ldr	r3, [r3, #0]
   84628:	7cb8      	ldrb	r0, [r7, #18]
   8462a:	9300      	str	r3, [sp, #0]
   8462c:	4613      	mov	r3, r2
   8462e:	4622      	mov	r2, r4
   84630:	4c0d      	ldr	r4, [pc, #52]	; (84668 <udd_ep_alloc+0x3a8>)
   84632:	47a0      	blx	r4
   84634:	4603      	mov	r3, r0
   84636:	72fb      	strb	r3, [r7, #11]
					ptr_job->call_trans);
			if (!b_restart) {
   84638:	7afb      	ldrb	r3, [r7, #11]
   8463a:	f083 0301 	eor.w	r3, r3, #1
   8463e:	b2db      	uxtb	r3, r3
   84640:	2b00      	cmp	r3, #0
   84642:	d002      	beq.n	8464a <udd_ep_alloc+0x38a>
				dbg_print("ErrReRun%d ", i);
				return false;
   84644:	2300      	movs	r3, #0
   84646:	e008      	b.n	8465a <udd_ep_alloc+0x39a>
			continue;
   84648:	bf00      	nop
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   8464a:	7cbb      	ldrb	r3, [r7, #18]
   8464c:	3301      	adds	r3, #1
   8464e:	74bb      	strb	r3, [r7, #18]
   84650:	7cbb      	ldrb	r3, [r7, #18]
   84652:	2b02      	cmp	r3, #2
   84654:	f67f af50 	bls.w	844f8 <udd_ep_alloc+0x238>
			}
		}
	}
	dbg_print("ep_alloc(%d:%08x) ", ep, UDPHS->UDPHS_EPT[ep].UDPHS_EPTCFG);
	return true;
   84658:	2301      	movs	r3, #1
}
   8465a:	4618      	mov	r0, r3
   8465c:	371c      	adds	r7, #28
   8465e:	46bd      	mov	sp, r7
   84660:	bd90      	pop	{r4, r7, pc}
   84662:	bf00      	nop
   84664:	400a4000 	.word	0x400a4000
   84668:	00084999 	.word	0x00084999

0008466c <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
   8466c:	b580      	push	{r7, lr}
   8466e:	b084      	sub	sp, #16
   84670:	af00      	add	r7, sp, #0
   84672:	4603      	mov	r3, r0
   84674:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84676:	79fb      	ldrb	r3, [r7, #7]
   84678:	f003 030f 	and.w	r3, r3, #15
   8467c:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   8467e:	7bfb      	ldrb	r3, [r7, #15]
   84680:	2b02      	cmp	r3, #2
   84682:	d828      	bhi.n	846d6 <udd_ep_free+0x6a>
		return;
	}
	udd_disable_endpoint(ep_index);
   84684:	4a16      	ldr	r2, [pc, #88]	; (846e0 <udd_ep_free+0x74>)
   84686:	7bfb      	ldrb	r3, [r7, #15]
   84688:	015b      	lsls	r3, r3, #5
   8468a:	4413      	add	r3, r2
   8468c:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84690:	2201      	movs	r2, #1
   84692:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint_bank(ep_index, 0);
   84694:	4a12      	ldr	r2, [pc, #72]	; (846e0 <udd_ep_free+0x74>)
   84696:	7bfb      	ldrb	r3, [r7, #15]
   84698:	3308      	adds	r3, #8
   8469a:	015b      	lsls	r3, r3, #5
   8469c:	4413      	add	r3, r2
   8469e:	681a      	ldr	r2, [r3, #0]
   846a0:	490f      	ldr	r1, [pc, #60]	; (846e0 <udd_ep_free+0x74>)
   846a2:	7bfb      	ldrb	r3, [r7, #15]
   846a4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   846a8:	3308      	adds	r3, #8
   846aa:	015b      	lsls	r3, r3, #5
   846ac:	440b      	add	r3, r1
   846ae:	601a      	str	r2, [r3, #0]
	udd_ep_abort_job(ep);
   846b0:	79fb      	ldrb	r3, [r7, #7]
   846b2:	4618      	mov	r0, r3
   846b4:	4b0b      	ldr	r3, [pc, #44]	; (846e4 <udd_ep_free+0x78>)
   846b6:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   846b8:	7bfb      	ldrb	r3, [r7, #15]
   846ba:	1e5a      	subs	r2, r3, #1
   846bc:	490a      	ldr	r1, [pc, #40]	; (846e8 <udd_ep_free+0x7c>)
   846be:	4613      	mov	r3, r2
   846c0:	005b      	lsls	r3, r3, #1
   846c2:	4413      	add	r3, r2
   846c4:	00db      	lsls	r3, r3, #3
   846c6:	440b      	add	r3, r1
   846c8:	f103 0210 	add.w	r2, r3, #16
   846cc:	7913      	ldrb	r3, [r2, #4]
   846ce:	f36f 0382 	bfc	r3, #2, #1
   846d2:	7113      	strb	r3, [r2, #4]
   846d4:	e000      	b.n	846d8 <udd_ep_free+0x6c>
		return;
   846d6:	bf00      	nop
}
   846d8:	3710      	adds	r7, #16
   846da:	46bd      	mov	sp, r7
   846dc:	bd80      	pop	{r7, pc}
   846de:	bf00      	nop
   846e0:	400a4000 	.word	0x400a4000
   846e4:	000854a5 	.word	0x000854a5
   846e8:	200012ac 	.word	0x200012ac

000846ec <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
   846ec:	b480      	push	{r7}
   846ee:	b085      	sub	sp, #20
   846f0:	af00      	add	r7, sp, #0
   846f2:	4603      	mov	r3, r0
   846f4:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   846f6:	79fb      	ldrb	r3, [r7, #7]
   846f8:	f003 030f 	and.w	r3, r3, #15
   846fc:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   846fe:	7bfb      	ldrb	r3, [r7, #15]
   84700:	1e5a      	subs	r2, r3, #1
   84702:	4613      	mov	r3, r2
   84704:	005b      	lsls	r3, r3, #1
   84706:	4413      	add	r3, r2
   84708:	00db      	lsls	r3, r3, #3
   8470a:	4a10      	ldr	r2, [pc, #64]	; (8474c <udd_ep_is_halted+0x60>)
   8470c:	4413      	add	r3, r2
   8470e:	60bb      	str	r3, [r7, #8]
	return (Is_udd_endpoint_stall_requested(ep_index)
   84710:	4a0f      	ldr	r2, [pc, #60]	; (84750 <udd_ep_is_halted+0x64>)
   84712:	7bfb      	ldrb	r3, [r7, #15]
   84714:	015b      	lsls	r3, r3, #5
   84716:	4413      	add	r3, r2
   84718:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8471c:	681b      	ldr	r3, [r3, #0]
   8471e:	f003 0320 	and.w	r3, r3, #32
			|| ptr_job->stall_requested);
   84722:	2b00      	cmp	r3, #0
   84724:	d106      	bne.n	84734 <udd_ep_is_halted+0x48>
   84726:	68bb      	ldr	r3, [r7, #8]
   84728:	7d1b      	ldrb	r3, [r3, #20]
   8472a:	f003 0304 	and.w	r3, r3, #4
   8472e:	b2db      	uxtb	r3, r3
   84730:	2b00      	cmp	r3, #0
   84732:	d001      	beq.n	84738 <udd_ep_is_halted+0x4c>
   84734:	2301      	movs	r3, #1
   84736:	e000      	b.n	8473a <udd_ep_is_halted+0x4e>
   84738:	2300      	movs	r3, #0
   8473a:	f003 0301 	and.w	r3, r3, #1
   8473e:	b2db      	uxtb	r3, r3
}
   84740:	4618      	mov	r0, r3
   84742:	3714      	adds	r7, #20
   84744:	46bd      	mov	sp, r7
   84746:	bc80      	pop	{r7}
   84748:	4770      	bx	lr
   8474a:	bf00      	nop
   8474c:	200012ac 	.word	0x200012ac
   84750:	400a4000 	.word	0x400a4000

00084754 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   84754:	b480      	push	{r7}
   84756:	b085      	sub	sp, #20
   84758:	af00      	add	r7, sp, #0
   8475a:	4603      	mov	r3, r0
   8475c:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8475e:	79fb      	ldrb	r3, [r7, #7]
   84760:	f003 030f 	and.w	r3, r3, #15
   84764:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   84766:	7bfb      	ldrb	r3, [r7, #15]
   84768:	2b02      	cmp	r3, #2
   8476a:	d901      	bls.n	84770 <udd_ep_set_halt+0x1c>
		return false;
   8476c:	2300      	movs	r3, #0
   8476e:	e071      	b.n	84854 <udd_ep_set_halt+0x100>
	}

	ptr_job = &udd_ep_job[ep_index - 1];
   84770:	7bfb      	ldrb	r3, [r7, #15]
   84772:	1e5a      	subs	r2, r3, #1
   84774:	4613      	mov	r3, r2
   84776:	005b      	lsls	r3, r3, #1
   84778:	4413      	add	r3, r2
   8477a:	00db      	lsls	r3, r3, #3
   8477c:	4a38      	ldr	r2, [pc, #224]	; (84860 <udd_ep_set_halt+0x10c>)
   8477e:	4413      	add	r3, r2
   84780:	60bb      	str	r3, [r7, #8]

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   84782:	4a38      	ldr	r2, [pc, #224]	; (84864 <udd_ep_set_halt+0x110>)
   84784:	7bfb      	ldrb	r3, [r7, #15]
   84786:	015b      	lsls	r3, r3, #5
   84788:	4413      	add	r3, r2
   8478a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8478e:	681b      	ldr	r3, [r3, #0]
   84790:	f003 0320 	and.w	r3, r3, #32
   84794:	2b00      	cmp	r3, #0
   84796:	d106      	bne.n	847a6 <udd_ep_set_halt+0x52>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   84798:	68bb      	ldr	r3, [r7, #8]
   8479a:	7d1b      	ldrb	r3, [r3, #20]
   8479c:	f003 0304 	and.w	r3, r3, #4
   847a0:	b2db      	uxtb	r3, r3
   847a2:	2b00      	cmp	r3, #0
   847a4:	d001      	beq.n	847aa <udd_ep_set_halt+0x56>
		return true; // Already STALL
   847a6:	2301      	movs	r3, #1
   847a8:	e054      	b.n	84854 <udd_ep_set_halt+0x100>
	}

	if (ptr_job->busy == true) {
   847aa:	68bb      	ldr	r3, [r7, #8]
   847ac:	7d1b      	ldrb	r3, [r3, #20]
   847ae:	f003 0301 	and.w	r3, r3, #1
   847b2:	b2db      	uxtb	r3, r3
   847b4:	2b00      	cmp	r3, #0
   847b6:	d001      	beq.n	847bc <udd_ep_set_halt+0x68>
		return false; // Job on going, stall impossible
   847b8:	2300      	movs	r3, #0
   847ba:	e04b      	b.n	84854 <udd_ep_set_halt+0x100>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   847bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   847c0:	2b00      	cmp	r3, #0
   847c2:	da25      	bge.n	84810 <udd_ep_set_halt+0xbc>
   847c4:	4a27      	ldr	r2, [pc, #156]	; (84864 <udd_ep_set_halt+0x110>)
   847c6:	7bfb      	ldrb	r3, [r7, #15]
   847c8:	015b      	lsls	r3, r3, #5
   847ca:	4413      	add	r3, r2
   847cc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   847d0:	681b      	ldr	r3, [r3, #0]
   847d2:	0c9b      	lsrs	r3, r3, #18
   847d4:	f003 0303 	and.w	r3, r3, #3
   847d8:	2b00      	cmp	r3, #0
   847da:	d019      	beq.n	84810 <udd_ep_set_halt+0xbc>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
   847dc:	68ba      	ldr	r2, [r7, #8]
   847de:	7d13      	ldrb	r3, [r2, #20]
   847e0:	f043 0304 	orr.w	r3, r3, #4
   847e4:	7513      	strb	r3, [r2, #20]
			udd_enable_bank_interrupt(ep_index);
   847e6:	4a1f      	ldr	r2, [pc, #124]	; (84864 <udd_ep_set_halt+0x110>)
   847e8:	7bfb      	ldrb	r3, [r7, #15]
   847ea:	3308      	adds	r3, #8
   847ec:	015b      	lsls	r3, r3, #5
   847ee:	4413      	add	r3, r2
   847f0:	3304      	adds	r3, #4
   847f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   847f6:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep_index);
   847f8:	4b1a      	ldr	r3, [pc, #104]	; (84864 <udd_ep_set_halt+0x110>)
   847fa:	691a      	ldr	r2, [r3, #16]
   847fc:	7bfb      	ldrb	r3, [r7, #15]
   847fe:	f44f 7180 	mov.w	r1, #256	; 0x100
   84802:	fa01 f303 	lsl.w	r3, r1, r3
   84806:	4917      	ldr	r1, [pc, #92]	; (84864 <udd_ep_set_halt+0x110>)
   84808:	4313      	orrs	r3, r2
   8480a:	610b      	str	r3, [r1, #16]
			dbg_print("<reqHalt%x> ", ep);
			return true;
   8480c:	2301      	movs	r3, #1
   8480e:	e021      	b.n	84854 <udd_ep_set_halt+0x100>
	}

	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   84810:	4a14      	ldr	r2, [pc, #80]	; (84864 <udd_ep_set_halt+0x110>)
   84812:	7bfb      	ldrb	r3, [r7, #15]
   84814:	015b      	lsls	r3, r3, #5
   84816:	4413      	add	r3, r2
   84818:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8481c:	681a      	ldr	r2, [r3, #0]
   8481e:	4911      	ldr	r1, [pc, #68]	; (84864 <udd_ep_set_halt+0x110>)
   84820:	7bfb      	ldrb	r3, [r7, #15]
   84822:	f022 0202 	bic.w	r2, r2, #2
   84826:	015b      	lsls	r3, r3, #5
   84828:	440b      	add	r3, r1
   8482a:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8482e:	601a      	str	r2, [r3, #0]
	udd_ack_stall(ep_index);
   84830:	4a0c      	ldr	r2, [pc, #48]	; (84864 <udd_ep_set_halt+0x110>)
   84832:	7bfb      	ldrb	r3, [r7, #15]
   84834:	015b      	lsls	r3, r3, #5
   84836:	4413      	add	r3, r2
   84838:	f503 738c 	add.w	r3, r3, #280	; 0x118
   8483c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   84840:	601a      	str	r2, [r3, #0]
	udd_enable_stall_handshake(ep_index);
   84842:	4a08      	ldr	r2, [pc, #32]	; (84864 <udd_ep_set_halt+0x110>)
   84844:	7bfb      	ldrb	r3, [r7, #15]
   84846:	015b      	lsls	r3, r3, #5
   84848:	4413      	add	r3, r2
   8484a:	f503 738a 	add.w	r3, r3, #276	; 0x114
   8484e:	2220      	movs	r2, #32
   84850:	601a      	str	r2, [r3, #0]
	dbg_print("<Halt%x> ", ep);
	return true;
   84852:	2301      	movs	r3, #1
}
   84854:	4618      	mov	r0, r3
   84856:	3714      	adds	r7, #20
   84858:	46bd      	mov	sp, r7
   8485a:	bc80      	pop	{r7}
   8485c:	4770      	bx	lr
   8485e:	bf00      	nop
   84860:	200012ac 	.word	0x200012ac
   84864:	400a4000 	.word	0x400a4000

00084868 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   84868:	b580      	push	{r7, lr}
   8486a:	b084      	sub	sp, #16
   8486c:	af00      	add	r7, sp, #0
   8486e:	4603      	mov	r3, r0
   84870:	71fb      	strb	r3, [r7, #7]
	bool b_stall_cleared = false;
   84872:	2300      	movs	r3, #0
   84874:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   84876:	79fb      	ldrb	r3, [r7, #7]
   84878:	f003 030f 	and.w	r3, r3, #15
   8487c:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
   8487e:	79fb      	ldrb	r3, [r7, #7]
   84880:	2b02      	cmp	r3, #2
   84882:	d901      	bls.n	84888 <udd_ep_clear_halt+0x20>
		return false;
   84884:	2300      	movs	r3, #0
   84886:	e07e      	b.n	84986 <udd_ep_clear_halt+0x11e>
	ptr_job = &udd_ep_job[ep - 1];
   84888:	79fb      	ldrb	r3, [r7, #7]
   8488a:	1e5a      	subs	r2, r3, #1
   8488c:	4613      	mov	r3, r2
   8488e:	005b      	lsls	r3, r3, #1
   84890:	4413      	add	r3, r2
   84892:	00db      	lsls	r3, r3, #3
   84894:	4a3e      	ldr	r2, [pc, #248]	; (84990 <udd_ep_clear_halt+0x128>)
   84896:	4413      	add	r3, r2
   84898:	60bb      	str	r3, [r7, #8]

	if (ptr_job->stall_requested) {
   8489a:	68bb      	ldr	r3, [r7, #8]
   8489c:	7d1b      	ldrb	r3, [r3, #20]
   8489e:	f003 0304 	and.w	r3, r3, #4
   848a2:	b2db      	uxtb	r3, r3
   848a4:	2b00      	cmp	r3, #0
   848a6:	d01a      	beq.n	848de <udd_ep_clear_halt+0x76>
		// Endpoint stall has been requested but not done
		// Remove stall request
		dbg_print("<unWHalt%x> ", ep);
		ptr_job->stall_requested = false;
   848a8:	68ba      	ldr	r2, [r7, #8]
   848aa:	7d13      	ldrb	r3, [r2, #20]
   848ac:	f36f 0382 	bfc	r3, #2, #1
   848b0:	7513      	strb	r3, [r2, #20]
		udd_disable_bank_interrupt(ep);
   848b2:	4a38      	ldr	r2, [pc, #224]	; (84994 <udd_ep_clear_halt+0x12c>)
   848b4:	79fb      	ldrb	r3, [r7, #7]
   848b6:	015b      	lsls	r3, r3, #5
   848b8:	4413      	add	r3, r2
   848ba:	f503 7384 	add.w	r3, r3, #264	; 0x108
   848be:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   848c2:	601a      	str	r2, [r3, #0]
		udd_disable_endpoint_interrupt(ep);
   848c4:	4b33      	ldr	r3, [pc, #204]	; (84994 <udd_ep_clear_halt+0x12c>)
   848c6:	691a      	ldr	r2, [r3, #16]
   848c8:	79fb      	ldrb	r3, [r7, #7]
   848ca:	f44f 7180 	mov.w	r1, #256	; 0x100
   848ce:	fa01 f303 	lsl.w	r3, r1, r3
   848d2:	43db      	mvns	r3, r3
   848d4:	492f      	ldr	r1, [pc, #188]	; (84994 <udd_ep_clear_halt+0x12c>)
   848d6:	4013      	ands	r3, r2
   848d8:	610b      	str	r3, [r1, #16]
		b_stall_cleared = true;
   848da:	2301      	movs	r3, #1
   848dc:	73fb      	strb	r3, [r7, #15]
	}
	if (Is_udd_endpoint_stall_requested(ep)) {
   848de:	4a2d      	ldr	r2, [pc, #180]	; (84994 <udd_ep_clear_halt+0x12c>)
   848e0:	79fb      	ldrb	r3, [r7, #7]
   848e2:	015b      	lsls	r3, r3, #5
   848e4:	4413      	add	r3, r2
   848e6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   848ea:	681b      	ldr	r3, [r3, #0]
   848ec:	f003 0320 	and.w	r3, r3, #32
   848f0:	2b00      	cmp	r3, #0
   848f2:	d035      	beq.n	84960 <udd_ep_clear_halt+0xf8>
		dbg_print("<unHalt%x> ", ep);
		if (Is_udd_stall(ep)) {
   848f4:	4a27      	ldr	r2, [pc, #156]	; (84994 <udd_ep_clear_halt+0x12c>)
   848f6:	79fb      	ldrb	r3, [r7, #7]
   848f8:	015b      	lsls	r3, r3, #5
   848fa:	4413      	add	r3, r2
   848fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   84900:	681b      	ldr	r3, [r3, #0]
   84902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   84906:	2b00      	cmp	r3, #0
   84908:	d010      	beq.n	8492c <udd_ep_clear_halt+0xc4>
			udd_ack_stall(ep);
   8490a:	4a22      	ldr	r2, [pc, #136]	; (84994 <udd_ep_clear_halt+0x12c>)
   8490c:	79fb      	ldrb	r3, [r7, #7]
   8490e:	015b      	lsls	r3, r3, #5
   84910:	4413      	add	r3, r2
   84912:	f503 738c 	add.w	r3, r3, #280	; 0x118
   84916:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8491a:	601a      	str	r2, [r3, #0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
   8491c:	4a1d      	ldr	r2, [pc, #116]	; (84994 <udd_ep_clear_halt+0x12c>)
   8491e:	79fb      	ldrb	r3, [r7, #7]
   84920:	015b      	lsls	r3, r3, #5
   84922:	4413      	add	r3, r2
   84924:	f503 738c 	add.w	r3, r3, #280	; 0x118
   84928:	2240      	movs	r2, #64	; 0x40
   8492a:	601a      	str	r2, [r3, #0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
   8492c:	4a19      	ldr	r2, [pc, #100]	; (84994 <udd_ep_clear_halt+0x12c>)
   8492e:	79fb      	ldrb	r3, [r7, #7]
   84930:	015b      	lsls	r3, r3, #5
   84932:	4413      	add	r3, r2
   84934:	f503 738c 	add.w	r3, r3, #280	; 0x118
   84938:	2220      	movs	r2, #32
   8493a:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_bank_autoswitch(ep);
   8493c:	4a15      	ldr	r2, [pc, #84]	; (84994 <udd_ep_clear_halt+0x12c>)
   8493e:	79fb      	ldrb	r3, [r7, #7]
   84940:	3308      	adds	r3, #8
   84942:	015b      	lsls	r3, r3, #5
   84944:	4413      	add	r3, r2
   84946:	3304      	adds	r3, #4
   84948:	681a      	ldr	r2, [r3, #0]
   8494a:	4912      	ldr	r1, [pc, #72]	; (84994 <udd_ep_clear_halt+0x12c>)
   8494c:	79fb      	ldrb	r3, [r7, #7]
   8494e:	f042 0202 	orr.w	r2, r2, #2
   84952:	3308      	adds	r3, #8
   84954:	015b      	lsls	r3, r3, #5
   84956:	440b      	add	r3, r1
   84958:	3304      	adds	r3, #4
   8495a:	601a      	str	r2, [r3, #0]
		b_stall_cleared = true;
   8495c:	2301      	movs	r3, #1
   8495e:	73fb      	strb	r3, [r7, #15]
	}
	if (b_stall_cleared) {
   84960:	7bfb      	ldrb	r3, [r7, #15]
   84962:	2b00      	cmp	r3, #0
   84964:	d00e      	beq.n	84984 <udd_ep_clear_halt+0x11c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   84966:	68bb      	ldr	r3, [r7, #8]
   84968:	7d1b      	ldrb	r3, [r3, #20]
   8496a:	f003 0301 	and.w	r3, r3, #1
   8496e:	b2db      	uxtb	r3, r3
   84970:	2b00      	cmp	r3, #0
   84972:	d007      	beq.n	84984 <udd_ep_clear_halt+0x11c>
			ptr_job->busy = false;
   84974:	68ba      	ldr	r2, [r7, #8]
   84976:	7d13      	ldrb	r3, [r2, #20]
   84978:	f36f 0300 	bfc	r3, #0, #1
   8497c:	7513      	strb	r3, [r2, #20]
			ptr_job->call_nohalt();
   8497e:	68bb      	ldr	r3, [r7, #8]
   84980:	681b      	ldr	r3, [r3, #0]
   84982:	4798      	blx	r3
		}
	}
	return true;
   84984:	2301      	movs	r3, #1
}
   84986:	4618      	mov	r0, r3
   84988:	3710      	adds	r7, #16
   8498a:	46bd      	mov	sp, r7
   8498c:	bd80      	pop	{r7, pc}
   8498e:	bf00      	nop
   84990:	200012ac 	.word	0x200012ac
   84994:	400a4000 	.word	0x400a4000

00084998 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84998:	b580      	push	{r7, lr}
   8499a:	b086      	sub	sp, #24
   8499c:	af00      	add	r7, sp, #0
   8499e:	60ba      	str	r2, [r7, #8]
   849a0:	607b      	str	r3, [r7, #4]
   849a2:	4603      	mov	r3, r0
   849a4:	73fb      	strb	r3, [r7, #15]
   849a6:	460b      	mov	r3, r1
   849a8:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   849aa:	7bfb      	ldrb	r3, [r7, #15]
   849ac:	f003 030f 	and.w	r3, r3, #15
   849b0:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
   849b2:	7bfb      	ldrb	r3, [r7, #15]
   849b4:	2b02      	cmp	r3, #2
   849b6:	d901      	bls.n	849bc <udd_ep_run+0x24>
		return false;
   849b8:	2300      	movs	r3, #0
   849ba:	e063      	b.n	84a84 <udd_ep_run+0xec>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   849bc:	7bfb      	ldrb	r3, [r7, #15]
   849be:	1e5a      	subs	r2, r3, #1
   849c0:	4613      	mov	r3, r2
   849c2:	005b      	lsls	r3, r3, #1
   849c4:	4413      	add	r3, r2
   849c6:	00db      	lsls	r3, r3, #3
   849c8:	4a30      	ldr	r2, [pc, #192]	; (84a8c <udd_ep_run+0xf4>)
   849ca:	4413      	add	r3, r2
   849cc:	617b      	str	r3, [r7, #20]

	if ((!Is_udd_endpoint_enabled(ep))
   849ce:	4a30      	ldr	r2, [pc, #192]	; (84a90 <udd_ep_run+0xf8>)
   849d0:	7bfb      	ldrb	r3, [r7, #15]
   849d2:	015b      	lsls	r3, r3, #5
   849d4:	4413      	add	r3, r2
   849d6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   849da:	681b      	ldr	r3, [r3, #0]
   849dc:	f003 0301 	and.w	r3, r3, #1
   849e0:	2b00      	cmp	r3, #0
   849e2:	d011      	beq.n	84a08 <udd_ep_run+0x70>
			|| Is_udd_endpoint_stall_requested(ep)
   849e4:	4a2a      	ldr	r2, [pc, #168]	; (84a90 <udd_ep_run+0xf8>)
   849e6:	7bfb      	ldrb	r3, [r7, #15]
   849e8:	015b      	lsls	r3, r3, #5
   849ea:	4413      	add	r3, r2
   849ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   849f0:	681b      	ldr	r3, [r3, #0]
   849f2:	f003 0320 	and.w	r3, r3, #32
   849f6:	2b00      	cmp	r3, #0
   849f8:	d106      	bne.n	84a08 <udd_ep_run+0x70>
			|| ptr_job->stall_requested) {
   849fa:	697b      	ldr	r3, [r7, #20]
   849fc:	7d1b      	ldrb	r3, [r3, #20]
   849fe:	f003 0304 	and.w	r3, r3, #4
   84a02:	b2db      	uxtb	r3, r3
   84a04:	2b00      	cmp	r3, #0
   84a06:	d001      	beq.n	84a0c <udd_ep_run+0x74>
		return false; // Endpoint is halted
   84a08:	2300      	movs	r3, #0
   84a0a:	e03b      	b.n	84a84 <udd_ep_run+0xec>
	}

	flags = cpu_irq_save();
   84a0c:	4b21      	ldr	r3, [pc, #132]	; (84a94 <udd_ep_run+0xfc>)
   84a0e:	4798      	blx	r3
   84a10:	6138      	str	r0, [r7, #16]
	if (ptr_job->busy == true) {
   84a12:	697b      	ldr	r3, [r7, #20]
   84a14:	7d1b      	ldrb	r3, [r3, #20]
   84a16:	f003 0301 	and.w	r3, r3, #1
   84a1a:	b2db      	uxtb	r3, r3
   84a1c:	2b00      	cmp	r3, #0
   84a1e:	d004      	beq.n	84a2a <udd_ep_run+0x92>
		cpu_irq_restore(flags);
   84a20:	6938      	ldr	r0, [r7, #16]
   84a22:	4b1d      	ldr	r3, [pc, #116]	; (84a98 <udd_ep_run+0x100>)
   84a24:	4798      	blx	r3
		return false; // Job already on going
   84a26:	2300      	movs	r3, #0
   84a28:	e02c      	b.n	84a84 <udd_ep_run+0xec>
	}
	ptr_job->busy = true;
   84a2a:	697a      	ldr	r2, [r7, #20]
   84a2c:	7d13      	ldrb	r3, [r2, #20]
   84a2e:	f043 0301 	orr.w	r3, r3, #1
   84a32:	7513      	strb	r3, [r2, #20]
	cpu_irq_restore(flags);
   84a34:	6938      	ldr	r0, [r7, #16]
   84a36:	4b18      	ldr	r3, [pc, #96]	; (84a98 <udd_ep_run+0x100>)
   84a38:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   84a3a:	697b      	ldr	r3, [r7, #20]
   84a3c:	68ba      	ldr	r2, [r7, #8]
   84a3e:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
   84a40:	697b      	ldr	r3, [r7, #20]
   84a42:	687a      	ldr	r2, [r7, #4]
   84a44:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
   84a46:	697b      	ldr	r3, [r7, #20]
   84a48:	2200      	movs	r2, #0
   84a4a:	60da      	str	r2, [r3, #12]
	ptr_job->buf_load = 0;
   84a4c:	697b      	ldr	r3, [r7, #20]
   84a4e:	2200      	movs	r2, #0
   84a50:	611a      	str	r2, [r3, #16]
	ptr_job->call_trans = callback;
   84a52:	697b      	ldr	r3, [r7, #20]
   84a54:	6a3a      	ldr	r2, [r7, #32]
   84a56:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   84a58:	7bbb      	ldrb	r3, [r7, #14]
   84a5a:	2b00      	cmp	r3, #0
   84a5c:	d102      	bne.n	84a64 <udd_ep_run+0xcc>
   84a5e:	687b      	ldr	r3, [r7, #4]
   84a60:	2b00      	cmp	r3, #0
   84a62:	d101      	bne.n	84a68 <udd_ep_run+0xd0>
   84a64:	2301      	movs	r3, #1
   84a66:	e000      	b.n	84a6a <udd_ep_run+0xd2>
   84a68:	2300      	movs	r3, #0
   84a6a:	f003 0301 	and.w	r3, r3, #1
   84a6e:	b2d9      	uxtb	r1, r3
   84a70:	697a      	ldr	r2, [r7, #20]
   84a72:	7d13      	ldrb	r3, [r2, #20]
   84a74:	f361 0341 	bfi	r3, r1, #1, #1
   84a78:	7513      	strb	r3, [r2, #20]

	// Request first DMA transfer
	//dbg_print("runDMA%d\n\r", ep);
	udd_ep_trans_done(ep);
   84a7a:	7bfb      	ldrb	r3, [r7, #15]
   84a7c:	4618      	mov	r0, r3
   84a7e:	4b07      	ldr	r3, [pc, #28]	; (84a9c <udd_ep_run+0x104>)
   84a80:	4798      	blx	r3
	return true;
   84a82:	2301      	movs	r3, #1
}
   84a84:	4618      	mov	r0, r3
   84a86:	3718      	adds	r7, #24
   84a88:	46bd      	mov	sp, r7
   84a8a:	bd80      	pop	{r7, pc}
   84a8c:	200012ac 	.word	0x200012ac
   84a90:	400a4000 	.word	0x400a4000
   84a94:	00083d69 	.word	0x00083d69
   84a98:	00083dc1 	.word	0x00083dc1
   84a9c:	00085551 	.word	0x00085551

00084aa0 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
   84aa0:	b580      	push	{r7, lr}
   84aa2:	b084      	sub	sp, #16
   84aa4:	af00      	add	r7, sp, #0
   84aa6:	4603      	mov	r3, r0
   84aa8:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84aaa:	79fb      	ldrb	r3, [r7, #7]
   84aac:	f003 030f 	and.w	r3, r3, #15
   84ab0:	73fb      	strb	r3, [r7, #15]
	// Stop DMA transfer
	udd_endpoint_dma_set_control(ep_index, 0);
   84ab2:	7bfb      	ldrb	r3, [r7, #15]
   84ab4:	011a      	lsls	r2, r3, #4
   84ab6:	4b19      	ldr	r3, [pc, #100]	; (84b1c <udd_ep_abort+0x7c>)
   84ab8:	4413      	add	r3, r2
   84aba:	2200      	movs	r2, #0
   84abc:	609a      	str	r2, [r3, #8]
	// Kill banks for IN
	if (ep & USB_EP_DIR_IN) {
   84abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
   84ac2:	2b00      	cmp	r3, #0
   84ac4:	da21      	bge.n	84b0a <udd_ep_abort+0x6a>
		for(;udd_nb_busy_bank(ep_index);) {
   84ac6:	e014      	b.n	84af2 <udd_ep_abort+0x52>
			udd_kill_last_in_bank(ep_index);
   84ac8:	4a15      	ldr	r2, [pc, #84]	; (84b20 <udd_ep_abort+0x80>)
   84aca:	7bfb      	ldrb	r3, [r7, #15]
   84acc:	015b      	lsls	r3, r3, #5
   84ace:	4413      	add	r3, r2
   84ad0:	f503 738a 	add.w	r3, r3, #276	; 0x114
   84ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
   84ad8:	601a      	str	r2, [r3, #0]
			while(Is_udd_kill_last(ep_index));
   84ada:	bf00      	nop
   84adc:	4a10      	ldr	r2, [pc, #64]	; (84b20 <udd_ep_abort+0x80>)
   84ade:	7bfb      	ldrb	r3, [r7, #15]
   84ae0:	015b      	lsls	r3, r3, #5
   84ae2:	4413      	add	r3, r2
   84ae4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   84ae8:	681b      	ldr	r3, [r3, #0]
   84aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
   84aee:	2b00      	cmp	r3, #0
   84af0:	d1f4      	bne.n	84adc <udd_ep_abort+0x3c>
		for(;udd_nb_busy_bank(ep_index);) {
   84af2:	4a0b      	ldr	r2, [pc, #44]	; (84b20 <udd_ep_abort+0x80>)
   84af4:	7bfb      	ldrb	r3, [r7, #15]
   84af6:	015b      	lsls	r3, r3, #5
   84af8:	4413      	add	r3, r2
   84afa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   84afe:	681b      	ldr	r3, [r3, #0]
   84b00:	0c9b      	lsrs	r3, r3, #18
   84b02:	f003 0303 	and.w	r3, r3, #3
   84b06:	2b00      	cmp	r3, #0
   84b08:	d1de      	bne.n	84ac8 <udd_ep_abort+0x28>
		}
	}
	udd_ep_abort_job(ep);
   84b0a:	79fb      	ldrb	r3, [r7, #7]
   84b0c:	4618      	mov	r0, r3
   84b0e:	4b05      	ldr	r3, [pc, #20]	; (84b24 <udd_ep_abort+0x84>)
   84b10:	4798      	blx	r3
}
   84b12:	bf00      	nop
   84b14:	3710      	adds	r7, #16
   84b16:	46bd      	mov	sp, r7
   84b18:	bd80      	pop	{r7, pc}
   84b1a:	bf00      	nop
   84b1c:	400a4300 	.word	0x400a4300
   84b20:	400a4000 	.word	0x400a4000
   84b24:	000854a5 	.word	0x000854a5

00084b28 <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
   84b28:	b480      	push	{r7}
   84b2a:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   84b2c:	4b0a      	ldr	r3, [pc, #40]	; (84b58 <udd_test_mode_j+0x30>)
   84b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   84b32:	f023 0303 	bic.w	r3, r3, #3
   84b36:	4a08      	ldr	r2, [pc, #32]	; (84b58 <udd_test_mode_j+0x30>)
   84b38:	f043 0302 	orr.w	r3, r3, #2
   84b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   84b40:	4b05      	ldr	r3, [pc, #20]	; (84b58 <udd_test_mode_j+0x30>)
   84b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   84b46:	4a04      	ldr	r2, [pc, #16]	; (84b58 <udd_test_mode_j+0x30>)
   84b48:	f043 0304 	orr.w	r3, r3, #4
   84b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   84b50:	bf00      	nop
   84b52:	46bd      	mov	sp, r7
   84b54:	bc80      	pop	{r7}
   84b56:	4770      	bx	lr
   84b58:	400a4000 	.word	0x400a4000

00084b5c <udd_test_mode_k>:


void udd_test_mode_k(void)
{
   84b5c:	b480      	push	{r7}
   84b5e:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   84b60:	4b0a      	ldr	r3, [pc, #40]	; (84b8c <udd_test_mode_k+0x30>)
   84b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   84b66:	f023 0303 	bic.w	r3, r3, #3
   84b6a:	4a08      	ldr	r2, [pc, #32]	; (84b8c <udd_test_mode_k+0x30>)
   84b6c:	f043 0302 	orr.w	r3, r3, #2
   84b70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   84b74:	4b05      	ldr	r3, [pc, #20]	; (84b8c <udd_test_mode_k+0x30>)
   84b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   84b7a:	4a04      	ldr	r2, [pc, #16]	; (84b8c <udd_test_mode_k+0x30>)
   84b7c:	f043 0308 	orr.w	r3, r3, #8
   84b80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   84b84:	bf00      	nop
   84b86:	46bd      	mov	sp, r7
   84b88:	bc80      	pop	{r7}
   84b8a:	4770      	bx	lr
   84b8c:	400a4000 	.word	0x400a4000

00084b90 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
   84b90:	b480      	push	{r7}
   84b92:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   84b94:	4b06      	ldr	r3, [pc, #24]	; (84bb0 <udd_test_mode_se0_nak+0x20>)
   84b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   84b9a:	f023 0303 	bic.w	r3, r3, #3
   84b9e:	4a04      	ldr	r2, [pc, #16]	; (84bb0 <udd_test_mode_se0_nak+0x20>)
   84ba0:	f043 0302 	orr.w	r3, r3, #2
   84ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   84ba8:	bf00      	nop
   84baa:	46bd      	mov	sp, r7
   84bac:	bc80      	pop	{r7}
   84bae:	4770      	bx	lr
   84bb0:	400a4000 	.word	0x400a4000

00084bb4 <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
   84bb4:	b4b0      	push	{r4, r5, r7}
   84bb6:	b093      	sub	sp, #76	; 0x4c
   84bb8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   84bba:	4b2e      	ldr	r3, [pc, #184]	; (84c74 <udd_test_mode_packet+0xc0>)
   84bbc:	1d3c      	adds	r4, r7, #4
   84bbe:	461d      	mov	r5, r3
   84bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   84bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   84bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   84bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   84bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   84bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   84bcc:	e895 0003 	ldmia.w	r5, {r0, r1}
   84bd0:	6020      	str	r0, [r4, #0]
   84bd2:	3404      	adds	r4, #4
   84bd4:	7021      	strb	r1, [r4, #0]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   84bd6:	4b28      	ldr	r3, [pc, #160]	; (84c78 <udd_test_mode_packet+0xc4>)
   84bd8:	2201      	movs	r2, #1
   84bda:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   84bde:	4b26      	ldr	r3, [pc, #152]	; (84c78 <udd_test_mode_packet+0xc4>)
   84be0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   84be4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   84be8:	f023 0303 	bic.w	r3, r3, #3
   84bec:	4a22      	ldr	r2, [pc, #136]	; (84c78 <udd_test_mode_packet+0xc4>)
   84bee:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
   84bf2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_EP_TYPE_BULK, // Type: bulk
			1, // dir: IN
			64, //Size
			1, // Bank Number
			0); // NB Trans (not used for bulk ept)
	udd_enable_endpoint(0);
   84bf6:	4b20      	ldr	r3, [pc, #128]	; (84c78 <udd_test_mode_packet+0xc4>)
   84bf8:	2201      	movs	r2, #1
   84bfa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	udd_enable_hs_test_mode();
   84bfe:	4b1e      	ldr	r3, [pc, #120]	; (84c78 <udd_test_mode_packet+0xc4>)
   84c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   84c04:	f023 0303 	bic.w	r3, r3, #3
   84c08:	4a1b      	ldr	r2, [pc, #108]	; (84c78 <udd_test_mode_packet+0xc4>)
   84c0a:	f043 0302 	orr.w	r3, r3, #2
   84c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   84c12:	4b19      	ldr	r3, [pc, #100]	; (84c78 <udd_test_mode_packet+0xc4>)
   84c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   84c18:	4a17      	ldr	r2, [pc, #92]	; (84c78 <udd_test_mode_packet+0xc4>)
   84c1a:	f043 0310 	orr.w	r3, r3, #16
   84c1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   84c22:	4b16      	ldr	r3, [pc, #88]	; (84c7c <udd_test_mode_packet+0xc8>)
   84c24:	643b      	str	r3, [r7, #64]	; 0x40
	ptr_src = test_packet;
   84c26:	1d3b      	adds	r3, r7, #4
   84c28:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (i = 0; i < sizeof(test_packet); i++) {
   84c2a:	2300      	movs	r3, #0
   84c2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   84c30:	e00c      	b.n	84c4c <udd_test_mode_packet+0x98>
		*ptr_dest++ = *ptr_src++;
   84c32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   84c34:	1c53      	adds	r3, r2, #1
   84c36:	63fb      	str	r3, [r7, #60]	; 0x3c
   84c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84c3a:	1c59      	adds	r1, r3, #1
   84c3c:	6439      	str	r1, [r7, #64]	; 0x40
   84c3e:	7812      	ldrb	r2, [r2, #0]
   84c40:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   84c42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   84c46:	3301      	adds	r3, #1
   84c48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   84c4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   84c50:	2b34      	cmp	r3, #52	; 0x34
   84c52:	d9ee      	bls.n	84c32 <udd_test_mode_packet+0x7e>
	}
	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   84c54:	4b08      	ldr	r3, [pc, #32]	; (84c78 <udd_test_mode_packet+0xc4>)
   84c56:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84c5a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   84c5e:	4b06      	ldr	r3, [pc, #24]	; (84c78 <udd_test_mode_packet+0xc4>)
   84c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
   84c64:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   84c68:	bf00      	nop
   84c6a:	374c      	adds	r7, #76	; 0x4c
   84c6c:	46bd      	mov	sp, r7
   84c6e:	bcb0      	pop	{r4, r5, r7}
   84c70:	4770      	bx	lr
   84c72:	bf00      	nop
   84c74:	0008aa28 	.word	0x0008aa28
   84c78:	400a4000 	.word	0x400a4000
   84c7c:	20180000 	.word	0x20180000

00084c80 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
   84c80:	b580      	push	{r7, lr}
   84c82:	b082      	sub	sp, #8
   84c84:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   84c86:	4b1b      	ldr	r3, [pc, #108]	; (84cf4 <udd_reset_ep_ctrl+0x74>)
   84c88:	681b      	ldr	r3, [r3, #0]
   84c8a:	4a1a      	ldr	r2, [pc, #104]	; (84cf4 <udd_reset_ep_ctrl+0x74>)
   84c8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   84c90:	6013      	str	r3, [r2, #0]
	udd_enable_address();
   84c92:	4b18      	ldr	r3, [pc, #96]	; (84cf4 <udd_reset_ep_ctrl+0x74>)
   84c94:	681b      	ldr	r3, [r3, #0]
   84c96:	4a17      	ldr	r2, [pc, #92]	; (84cf4 <udd_reset_ep_ctrl+0x74>)
   84c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84c9c:	6013      	str	r3, [r2, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   84c9e:	4b15      	ldr	r3, [pc, #84]	; (84cf4 <udd_reset_ep_ctrl+0x74>)
   84ca0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   84ca4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   84ca8:	f023 0303 	bic.w	r3, r3, #3
   84cac:	4a11      	ldr	r2, [pc, #68]	; (84cf4 <udd_reset_ep_ctrl+0x74>)
   84cae:	f043 0343 	orr.w	r3, r3, #67	; 0x43
   84cb2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_DEVICE_EP_CTRL_SIZE,
			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
			0);

	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
	udd_enable_endpoint(0);
   84cb6:	4b0f      	ldr	r3, [pc, #60]	; (84cf4 <udd_reset_ep_ctrl+0x74>)
   84cb8:	2201      	movs	r2, #1
   84cba:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	flags = cpu_irq_save();
   84cbe:	4b0e      	ldr	r3, [pc, #56]	; (84cf8 <udd_reset_ep_ctrl+0x78>)
   84cc0:	4798      	blx	r3
   84cc2:	6078      	str	r0, [r7, #4]
	udd_enable_setup_received_interrupt(0);
   84cc4:	4b0b      	ldr	r3, [pc, #44]	; (84cf4 <udd_reset_ep_ctrl+0x74>)
   84cc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84cca:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   84cce:	4b09      	ldr	r3, [pc, #36]	; (84cf4 <udd_reset_ep_ctrl+0x74>)
   84cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
   84cd4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   84cd8:	4b06      	ldr	r3, [pc, #24]	; (84cf4 <udd_reset_ep_ctrl+0x74>)
   84cda:	691b      	ldr	r3, [r3, #16]
   84cdc:	4a05      	ldr	r2, [pc, #20]	; (84cf4 <udd_reset_ep_ctrl+0x74>)
   84cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   84ce2:	6113      	str	r3, [r2, #16]
	cpu_irq_restore(flags);
   84ce4:	6878      	ldr	r0, [r7, #4]
   84ce6:	4b05      	ldr	r3, [pc, #20]	; (84cfc <udd_reset_ep_ctrl+0x7c>)
   84ce8:	4798      	blx	r3
}
   84cea:	bf00      	nop
   84cec:	3708      	adds	r7, #8
   84cee:	46bd      	mov	sp, r7
   84cf0:	bd80      	pop	{r7, pc}
   84cf2:	bf00      	nop
   84cf4:	400a4000 	.word	0x400a4000
   84cf8:	00083d69 	.word	0x00083d69
   84cfc:	00083dc1 	.word	0x00083dc1

00084d00 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
   84d00:	b580      	push	{r7, lr}
   84d02:	b082      	sub	sp, #8
   84d04:	af00      	add	r7, sp, #0
	irqflags_t flags;

	dbg_print("ctlInit ");

	flags = cpu_irq_save();
   84d06:	4b10      	ldr	r3, [pc, #64]	; (84d48 <udd_ctrl_init+0x48>)
   84d08:	4798      	blx	r3
   84d0a:	6078      	str	r0, [r7, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   84d0c:	4b0f      	ldr	r3, [pc, #60]	; (84d4c <udd_ctrl_init+0x4c>)
   84d0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84d12:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   84d16:	6878      	ldr	r0, [r7, #4]
   84d18:	4b0d      	ldr	r3, [pc, #52]	; (84d50 <udd_ctrl_init+0x50>)
   84d1a:	4798      	blx	r3

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   84d1c:	4b0b      	ldr	r3, [pc, #44]	; (84d4c <udd_ctrl_init+0x4c>)
   84d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
   84d22:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   84d26:	4b0b      	ldr	r3, [pc, #44]	; (84d54 <udd_ctrl_init+0x54>)
   84d28:	2200      	movs	r2, #0
   84d2a:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   84d2c:	4b09      	ldr	r3, [pc, #36]	; (84d54 <udd_ctrl_init+0x54>)
   84d2e:	2200      	movs	r2, #0
   84d30:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
   84d32:	4b08      	ldr	r3, [pc, #32]	; (84d54 <udd_ctrl_init+0x54>)
   84d34:	2200      	movs	r2, #0
   84d36:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84d38:	4b07      	ldr	r3, [pc, #28]	; (84d58 <udd_ctrl_init+0x58>)
   84d3a:	2200      	movs	r2, #0
   84d3c:	701a      	strb	r2, [r3, #0]
}
   84d3e:	bf00      	nop
   84d40:	3708      	adds	r7, #8
   84d42:	46bd      	mov	sp, r7
   84d44:	bd80      	pop	{r7, pc}
   84d46:	bf00      	nop
   84d48:	00083d69 	.word	0x00083d69
   84d4c:	400a4000 	.word	0x400a4000
   84d50:	00083dc1 	.word	0x00083dc1
   84d54:	20001320 	.word	0x20001320
   84d58:	200012a5 	.word	0x200012a5

00084d5c <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
   84d5c:	b580      	push	{r7, lr}
   84d5e:	b084      	sub	sp, #16
   84d60:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   84d62:	4b40      	ldr	r3, [pc, #256]	; (84e64 <udd_ctrl_setup_received+0x108>)
   84d64:	781b      	ldrb	r3, [r3, #0]
   84d66:	2b00      	cmp	r3, #0
   84d68:	d003      	beq.n	84d72 <udd_ctrl_setup_received+0x16>
		dbg_print("sErr ");
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
   84d6a:	4b3f      	ldr	r3, [pc, #252]	; (84e68 <udd_ctrl_setup_received+0x10c>)
   84d6c:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   84d6e:	4b3f      	ldr	r3, [pc, #252]	; (84e6c <udd_ctrl_setup_received+0x110>)
   84d70:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   84d72:	4b3f      	ldr	r3, [pc, #252]	; (84e70 <udd_ctrl_setup_received+0x114>)
   84d74:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84d78:	0d1b      	lsrs	r3, r3, #20
   84d7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
   84d7e:	2b08      	cmp	r3, #8
   84d80:	d007      	beq.n	84d92 <udd_ctrl_setup_received+0x36>
		dbg_print("cntErr ");
		udd_ctrl_stall_data();
   84d82:	4b3c      	ldr	r3, [pc, #240]	; (84e74 <udd_ctrl_setup_received+0x118>)
   84d84:	4798      	blx	r3
		udd_ack_setup_received(0);
   84d86:	4b3a      	ldr	r3, [pc, #232]	; (84e70 <udd_ctrl_setup_received+0x114>)
   84d88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84d8c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   84d90:	e064      	b.n	84e5c <udd_ctrl_setup_received+0x100>
	}

	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   84d92:	4b39      	ldr	r3, [pc, #228]	; (84e78 <udd_ctrl_setup_received+0x11c>)
   84d94:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
   84d96:	2300      	movs	r3, #0
   84d98:	73fb      	strb	r3, [r7, #15]
   84d9a:	e00a      	b.n	84db2 <udd_ctrl_setup_received+0x56>
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   84d9c:	68bb      	ldr	r3, [r7, #8]
   84d9e:	1c5a      	adds	r2, r3, #1
   84da0:	60ba      	str	r2, [r7, #8]
   84da2:	7bfa      	ldrb	r2, [r7, #15]
   84da4:	4935      	ldr	r1, [pc, #212]	; (84e7c <udd_ctrl_setup_received+0x120>)
   84da6:	440a      	add	r2, r1
   84da8:	781b      	ldrb	r3, [r3, #0]
   84daa:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < 8; i++) {
   84dac:	7bfb      	ldrb	r3, [r7, #15]
   84dae:	3301      	adds	r3, #1
   84db0:	73fb      	strb	r3, [r7, #15]
   84db2:	7bfb      	ldrb	r3, [r7, #15]
   84db4:	2b07      	cmp	r3, #7
   84db6:	d9f1      	bls.n	84d9c <udd_ctrl_setup_received+0x40>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
   84db8:	4b30      	ldr	r3, [pc, #192]	; (84e7c <udd_ctrl_setup_received+0x120>)
   84dba:	885a      	ldrh	r2, [r3, #2]
   84dbc:	4b2f      	ldr	r3, [pc, #188]	; (84e7c <udd_ctrl_setup_received+0x120>)
   84dbe:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
   84dc0:	4b2e      	ldr	r3, [pc, #184]	; (84e7c <udd_ctrl_setup_received+0x120>)
   84dc2:	889a      	ldrh	r2, [r3, #4]
   84dc4:	4b2d      	ldr	r3, [pc, #180]	; (84e7c <udd_ctrl_setup_received+0x120>)
   84dc6:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
   84dc8:	4b2c      	ldr	r3, [pc, #176]	; (84e7c <udd_ctrl_setup_received+0x120>)
   84dca:	88da      	ldrh	r2, [r3, #6]
   84dcc:	4b2b      	ldr	r3, [pc, #172]	; (84e7c <udd_ctrl_setup_received+0x120>)
   84dce:	80da      	strh	r2, [r3, #6]
			udd_g_ctrlreq.req.bRequest, udd_g_ctrlreq.req.bmRequestType,
			udd_g_ctrlreq.req.wValue, udd_g_ctrlreq.req.wIndex,
			udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   84dd0:	4b2b      	ldr	r3, [pc, #172]	; (84e80 <udd_ctrl_setup_received+0x124>)
   84dd2:	4798      	blx	r3
   84dd4:	4603      	mov	r3, r0
   84dd6:	f083 0301 	eor.w	r3, r3, #1
   84dda:	b2db      	uxtb	r3, r3
   84ddc:	2b00      	cmp	r3, #0
   84dde:	d007      	beq.n	84df0 <udd_ctrl_setup_received+0x94>
		// Setup request unknown then stall it
		dbg_print("ProcErr ");
		udd_ctrl_stall_data();
   84de0:	4b24      	ldr	r3, [pc, #144]	; (84e74 <udd_ctrl_setup_received+0x118>)
   84de2:	4798      	blx	r3
		udd_ack_setup_received(0);
   84de4:	4b22      	ldr	r3, [pc, #136]	; (84e70 <udd_ctrl_setup_received+0x114>)
   84de6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84dea:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   84dee:	e035      	b.n	84e5c <udd_ctrl_setup_received+0x100>
	}
	udd_ack_setup_received(0);
   84df0:	4b1f      	ldr	r3, [pc, #124]	; (84e70 <udd_ctrl_setup_received+0x114>)
   84df2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84df6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	if (Udd_setup_is_in()) {
   84dfa:	4b20      	ldr	r3, [pc, #128]	; (84e7c <udd_ctrl_setup_received+0x120>)
   84dfc:	781b      	ldrb	r3, [r3, #0]
   84dfe:	b25b      	sxtb	r3, r3
   84e00:	2b00      	cmp	r3, #0
   84e02:	da0b      	bge.n	84e1c <udd_ctrl_setup_received+0xc0>
		dbg_print("_I ");
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   84e04:	4b1f      	ldr	r3, [pc, #124]	; (84e84 <udd_ctrl_setup_received+0x128>)
   84e06:	2200      	movs	r2, #0
   84e08:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   84e0a:	4b1f      	ldr	r3, [pc, #124]	; (84e88 <udd_ctrl_setup_received+0x12c>)
   84e0c:	2200      	movs	r2, #0
   84e0e:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   84e10:	4b14      	ldr	r3, [pc, #80]	; (84e64 <udd_ctrl_setup_received+0x108>)
   84e12:	2202      	movs	r2, #2
   84e14:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   84e16:	4b1d      	ldr	r3, [pc, #116]	; (84e8c <udd_ctrl_setup_received+0x130>)
   84e18:	4798      	blx	r3
   84e1a:	e01f      	b.n	84e5c <udd_ctrl_setup_received+0x100>
	} else {
		dbg_print("_O ");
		if (0 == udd_g_ctrlreq.req.wLength) {
   84e1c:	4b17      	ldr	r3, [pc, #92]	; (84e7c <udd_ctrl_setup_received+0x120>)
   84e1e:	88db      	ldrh	r3, [r3, #6]
   84e20:	2b00      	cmp	r3, #0
   84e22:	d102      	bne.n	84e2a <udd_ctrl_setup_received+0xce>
			// No data phase requested
			dbg_print("Zl ");
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   84e24:	4b1a      	ldr	r3, [pc, #104]	; (84e90 <udd_ctrl_setup_received+0x134>)
   84e26:	4798      	blx	r3
			return;
   84e28:	e018      	b.n	84e5c <udd_ctrl_setup_received+0x100>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   84e2a:	4b16      	ldr	r3, [pc, #88]	; (84e84 <udd_ctrl_setup_received+0x128>)
   84e2c:	2200      	movs	r2, #0
   84e2e:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   84e30:	4b15      	ldr	r3, [pc, #84]	; (84e88 <udd_ctrl_setup_received+0x12c>)
   84e32:	2200      	movs	r2, #0
   84e34:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   84e36:	4b0b      	ldr	r3, [pc, #44]	; (84e64 <udd_ctrl_setup_received+0x108>)
   84e38:	2201      	movs	r2, #1
   84e3a:	701a      	strb	r2, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   84e3c:	4b0c      	ldr	r3, [pc, #48]	; (84e70 <udd_ctrl_setup_received+0x114>)
   84e3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   84e42:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		flags = cpu_irq_save();
   84e46:	4b13      	ldr	r3, [pc, #76]	; (84e94 <udd_ctrl_setup_received+0x138>)
   84e48:	4798      	blx	r3
   84e4a:	6078      	str	r0, [r7, #4]
		udd_enable_nak_in_interrupt(0);
   84e4c:	4b08      	ldr	r3, [pc, #32]	; (84e70 <udd_ctrl_setup_received+0x114>)
   84e4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   84e52:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		cpu_irq_restore(flags);
   84e56:	6878      	ldr	r0, [r7, #4]
   84e58:	4b0f      	ldr	r3, [pc, #60]	; (84e98 <udd_ctrl_setup_received+0x13c>)
   84e5a:	4798      	blx	r3
	}
}
   84e5c:	3710      	adds	r7, #16
   84e5e:	46bd      	mov	sp, r7
   84e60:	bd80      	pop	{r7, pc}
   84e62:	bf00      	nop
   84e64:	200012a5 	.word	0x200012a5
   84e68:	00085305 	.word	0x00085305
   84e6c:	00084d01 	.word	0x00084d01
   84e70:	400a4000 	.word	0x400a4000
   84e74:	00085239 	.word	0x00085239
   84e78:	20180000 	.word	0x20180000
   84e7c:	20001320 	.word	0x20001320
   84e80:	00083b39 	.word	0x00083b39
   84e84:	200012a6 	.word	0x200012a6
   84e88:	200012a8 	.word	0x200012a8
   84e8c:	00084e9d 	.word	0x00084e9d
   84e90:	0008525d 	.word	0x0008525d
   84e94:	00083d69 	.word	0x00083d69
   84e98:	00083dc1 	.word	0x00083dc1

00084e9c <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
   84e9c:	b580      	push	{r7, lr}
   84e9e:	b084      	sub	sp, #16
   84ea0:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
   84ea2:	4b4c      	ldr	r3, [pc, #304]	; (84fd4 <udd_ctrl_in_sent+0x138>)
   84ea4:	4798      	blx	r3
   84ea6:	6038      	str	r0, [r7, #0]
	udd_disable_in_send_interrupt(0);
   84ea8:	4b4b      	ldr	r3, [pc, #300]	; (84fd8 <udd_ctrl_in_sent+0x13c>)
   84eaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84eae:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   84eb2:	6838      	ldr	r0, [r7, #0]
   84eb4:	4b49      	ldr	r3, [pc, #292]	; (84fdc <udd_ctrl_in_sent+0x140>)
   84eb6:	4798      	blx	r3

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   84eb8:	4b49      	ldr	r3, [pc, #292]	; (84fe0 <udd_ctrl_in_sent+0x144>)
   84eba:	781b      	ldrb	r3, [r3, #0]
   84ebc:	2b03      	cmp	r3, #3
   84ebe:	d104      	bne.n	84eca <udd_ctrl_in_sent+0x2e>
		dbg_print("ZlpE\n\r");
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   84ec0:	4b48      	ldr	r3, [pc, #288]	; (84fe4 <udd_ctrl_in_sent+0x148>)
   84ec2:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   84ec4:	4b48      	ldr	r3, [pc, #288]	; (84fe8 <udd_ctrl_in_sent+0x14c>)
   84ec6:	4798      	blx	r3
		return;
   84ec8:	e081      	b.n	84fce <udd_ctrl_in_sent+0x132>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   84eca:	4b48      	ldr	r3, [pc, #288]	; (84fec <udd_ctrl_in_sent+0x150>)
   84ecc:	899a      	ldrh	r2, [r3, #12]
   84ece:	4b48      	ldr	r3, [pc, #288]	; (84ff0 <udd_ctrl_in_sent+0x154>)
   84ed0:	881b      	ldrh	r3, [r3, #0]
   84ed2:	1ad3      	subs	r3, r2, r3
   84ed4:	81fb      	strh	r3, [r7, #14]
	if (0 == nb_remain) {
   84ed6:	89fb      	ldrh	r3, [r7, #14]
   84ed8:	2b00      	cmp	r3, #0
   84eda:	d127      	bne.n	84f2c <udd_ctrl_in_sent+0x90>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   84edc:	4b45      	ldr	r3, [pc, #276]	; (84ff4 <udd_ctrl_in_sent+0x158>)
   84ede:	881a      	ldrh	r2, [r3, #0]
   84ee0:	4b43      	ldr	r3, [pc, #268]	; (84ff0 <udd_ctrl_in_sent+0x154>)
   84ee2:	881b      	ldrh	r3, [r3, #0]
   84ee4:	4413      	add	r3, r2
   84ee6:	b29a      	uxth	r2, r3
   84ee8:	4b42      	ldr	r3, [pc, #264]	; (84ff4 <udd_ctrl_in_sent+0x158>)
   84eea:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   84eec:	4b3f      	ldr	r3, [pc, #252]	; (84fec <udd_ctrl_in_sent+0x150>)
   84eee:	88da      	ldrh	r2, [r3, #6]
   84ef0:	4b40      	ldr	r3, [pc, #256]	; (84ff4 <udd_ctrl_in_sent+0x158>)
   84ef2:	881b      	ldrh	r3, [r3, #0]
   84ef4:	429a      	cmp	r2, r3
   84ef6:	d003      	beq.n	84f00 <udd_ctrl_in_sent+0x64>
				|| b_shortpacket) {
   84ef8:	4b3f      	ldr	r3, [pc, #252]	; (84ff8 <udd_ctrl_in_sent+0x15c>)
   84efa:	781b      	ldrb	r3, [r3, #0]
   84efc:	2b00      	cmp	r3, #0
   84efe:	d002      	beq.n	84f06 <udd_ctrl_in_sent+0x6a>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			dbg_print("_zO ");
			udd_ctrl_send_zlp_out();
   84f00:	4b3e      	ldr	r3, [pc, #248]	; (84ffc <udd_ctrl_in_sent+0x160>)
   84f02:	4798      	blx	r3
			return;
   84f04:	e063      	b.n	84fce <udd_ctrl_in_sent+0x132>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   84f06:	4b39      	ldr	r3, [pc, #228]	; (84fec <udd_ctrl_in_sent+0x150>)
   84f08:	695b      	ldr	r3, [r3, #20]
   84f0a:	2b00      	cmp	r3, #0
   84f0c:	d00e      	beq.n	84f2c <udd_ctrl_in_sent+0x90>
				|| (!udd_g_ctrlreq.over_under_run())) {
   84f0e:	4b37      	ldr	r3, [pc, #220]	; (84fec <udd_ctrl_in_sent+0x150>)
   84f10:	695b      	ldr	r3, [r3, #20]
   84f12:	4798      	blx	r3
   84f14:	4603      	mov	r3, r0
   84f16:	f083 0301 	eor.w	r3, r3, #1
   84f1a:	b2db      	uxtb	r3, r3
   84f1c:	2b00      	cmp	r3, #0
   84f1e:	d105      	bne.n	84f2c <udd_ctrl_in_sent+0x90>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   84f20:	4b33      	ldr	r3, [pc, #204]	; (84ff0 <udd_ctrl_in_sent+0x154>)
   84f22:	2200      	movs	r2, #0
   84f24:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   84f26:	4b31      	ldr	r3, [pc, #196]	; (84fec <udd_ctrl_in_sent+0x150>)
   84f28:	899b      	ldrh	r3, [r3, #12]
   84f2a:	81fb      	strh	r3, [r7, #14]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   84f2c:	89fb      	ldrh	r3, [r7, #14]
   84f2e:	2b3f      	cmp	r3, #63	; 0x3f
   84f30:	d905      	bls.n	84f3e <udd_ctrl_in_sent+0xa2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   84f32:	2340      	movs	r3, #64	; 0x40
   84f34:	81fb      	strh	r3, [r7, #14]
		b_shortpacket = false;
   84f36:	4b30      	ldr	r3, [pc, #192]	; (84ff8 <udd_ctrl_in_sent+0x15c>)
   84f38:	2200      	movs	r2, #0
   84f3a:	701a      	strb	r2, [r3, #0]
   84f3c:	e002      	b.n	84f44 <udd_ctrl_in_sent+0xa8>
	} else {
		b_shortpacket = true;
   84f3e:	4b2e      	ldr	r3, [pc, #184]	; (84ff8 <udd_ctrl_in_sent+0x15c>)
   84f40:	2201      	movs	r2, #1
   84f42:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   84f44:	4b2e      	ldr	r3, [pc, #184]	; (85000 <udd_ctrl_in_sent+0x164>)
   84f46:	60bb      	str	r3, [r7, #8]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84f48:	4b28      	ldr	r3, [pc, #160]	; (84fec <udd_ctrl_in_sent+0x150>)
   84f4a:	689b      	ldr	r3, [r3, #8]
   84f4c:	4a28      	ldr	r2, [pc, #160]	; (84ff0 <udd_ctrl_in_sent+0x154>)
   84f4e:	8812      	ldrh	r2, [r2, #0]
   84f50:	4413      	add	r3, r2
   84f52:	607b      	str	r3, [r7, #4]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
   84f54:	4b1f      	ldr	r3, [pc, #124]	; (84fd4 <udd_ctrl_in_sent+0x138>)
   84f56:	4798      	blx	r3
   84f58:	6038      	str	r0, [r7, #0]
	if (Is_udd_out_received(0)) {
   84f5a:	4b1f      	ldr	r3, [pc, #124]	; (84fd8 <udd_ctrl_in_sent+0x13c>)
   84f5c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
   84f64:	2b00      	cmp	r3, #0
   84f66:	d006      	beq.n	84f76 <udd_ctrl_in_sent+0xda>
		dbg_print("Abort ");
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
   84f68:	6838      	ldr	r0, [r7, #0]
   84f6a:	4b1c      	ldr	r3, [pc, #112]	; (84fdc <udd_ctrl_in_sent+0x140>)
   84f6c:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   84f6e:	4b1c      	ldr	r3, [pc, #112]	; (84fe0 <udd_ctrl_in_sent+0x144>)
   84f70:	2204      	movs	r2, #4
   84f72:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   84f74:	e02b      	b.n	84fce <udd_ctrl_in_sent+0x132>
	}
	// dbg_print("t%d ", nb_remain);
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   84f76:	2300      	movs	r3, #0
   84f78:	737b      	strb	r3, [r7, #13]
   84f7a:	e00a      	b.n	84f92 <udd_ctrl_in_sent+0xf6>
		*ptr_dest++ = *ptr_src++;
   84f7c:	687a      	ldr	r2, [r7, #4]
   84f7e:	1c53      	adds	r3, r2, #1
   84f80:	607b      	str	r3, [r7, #4]
   84f82:	68bb      	ldr	r3, [r7, #8]
   84f84:	1c59      	adds	r1, r3, #1
   84f86:	60b9      	str	r1, [r7, #8]
   84f88:	7812      	ldrb	r2, [r2, #0]
   84f8a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_remain; i++) {
   84f8c:	7b7b      	ldrb	r3, [r7, #13]
   84f8e:	3301      	adds	r3, #1
   84f90:	737b      	strb	r3, [r7, #13]
   84f92:	7b7b      	ldrb	r3, [r7, #13]
   84f94:	b29b      	uxth	r3, r3
   84f96:	89fa      	ldrh	r2, [r7, #14]
   84f98:	429a      	cmp	r2, r3
   84f9a:	d8ef      	bhi.n	84f7c <udd_ctrl_in_sent+0xe0>
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   84f9c:	4b14      	ldr	r3, [pc, #80]	; (84ff0 <udd_ctrl_in_sent+0x154>)
   84f9e:	881a      	ldrh	r2, [r3, #0]
   84fa0:	89fb      	ldrh	r3, [r7, #14]
   84fa2:	4413      	add	r3, r2
   84fa4:	b29a      	uxth	r2, r3
   84fa6:	4b12      	ldr	r3, [pc, #72]	; (84ff0 <udd_ctrl_in_sent+0x154>)
   84fa8:	801a      	strh	r2, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   84faa:	4b0b      	ldr	r3, [pc, #44]	; (84fd8 <udd_ctrl_in_sent+0x13c>)
   84fac:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84fb0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   84fb4:	4b08      	ldr	r3, [pc, #32]	; (84fd8 <udd_ctrl_in_sent+0x13c>)
   84fb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   84fba:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   84fbe:	4b06      	ldr	r3, [pc, #24]	; (84fd8 <udd_ctrl_in_sent+0x13c>)
   84fc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84fc4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
   84fc8:	6838      	ldr	r0, [r7, #0]
   84fca:	4b04      	ldr	r3, [pc, #16]	; (84fdc <udd_ctrl_in_sent+0x140>)
   84fcc:	4798      	blx	r3
}
   84fce:	3710      	adds	r7, #16
   84fd0:	46bd      	mov	sp, r7
   84fd2:	bd80      	pop	{r7, pc}
   84fd4:	00083d69 	.word	0x00083d69
   84fd8:	400a4000 	.word	0x400a4000
   84fdc:	00083dc1 	.word	0x00083dc1
   84fe0:	200012a5 	.word	0x200012a5
   84fe4:	00085305 	.word	0x00085305
   84fe8:	00084d01 	.word	0x00084d01
   84fec:	20001320 	.word	0x20001320
   84ff0:	200012a8 	.word	0x200012a8
   84ff4:	200012a6 	.word	0x200012a6
   84ff8:	200012dc 	.word	0x200012dc
   84ffc:	000852c1 	.word	0x000852c1
   85000:	20180000 	.word	0x20180000

00085004 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
   85004:	b580      	push	{r7, lr}
   85006:	b084      	sub	sp, #16
   85008:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   8500a:	4b61      	ldr	r3, [pc, #388]	; (85190 <udd_ctrl_out_received+0x18c>)
   8500c:	781b      	ldrb	r3, [r3, #0]
   8500e:	2b01      	cmp	r3, #1
   85010:	d00f      	beq.n	85032 <udd_ctrl_out_received+0x2e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   85012:	4b5f      	ldr	r3, [pc, #380]	; (85190 <udd_ctrl_out_received+0x18c>)
   85014:	781b      	ldrb	r3, [r3, #0]
   85016:	2b02      	cmp	r3, #2
   85018:	d003      	beq.n	85022 <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   8501a:	4b5d      	ldr	r3, [pc, #372]	; (85190 <udd_ctrl_out_received+0x18c>)
   8501c:	781b      	ldrb	r3, [r3, #0]
   8501e:	2b04      	cmp	r3, #4
   85020:	d102      	bne.n	85028 <udd_ctrl_out_received+0x24>
			dbg_print("EoStp\n\r");
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
   85022:	4b5c      	ldr	r3, [pc, #368]	; (85194 <udd_ctrl_out_received+0x190>)
   85024:	4798      	blx	r3
   85026:	e001      	b.n	8502c <udd_ctrl_out_received+0x28>
		} else {
			dbg_print("ErrStp\n\r");
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   85028:	4b5b      	ldr	r3, [pc, #364]	; (85198 <udd_ctrl_out_received+0x194>)
   8502a:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   8502c:	4b5b      	ldr	r3, [pc, #364]	; (8519c <udd_ctrl_out_received+0x198>)
   8502e:	4798      	blx	r3
		return;
   85030:	e0ab      	b.n	8518a <udd_ctrl_out_received+0x186>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   85032:	4b5b      	ldr	r3, [pc, #364]	; (851a0 <udd_ctrl_out_received+0x19c>)
   85034:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85038:	0d1b      	lsrs	r3, r3, #20
   8503a:	b29b      	uxth	r3, r3
   8503c:	f3c3 030a 	ubfx	r3, r3, #0, #11
   85040:	81bb      	strh	r3, [r7, #12]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   85042:	4b58      	ldr	r3, [pc, #352]	; (851a4 <udd_ctrl_out_received+0x1a0>)
   85044:	899b      	ldrh	r3, [r3, #12]
   85046:	461a      	mov	r2, r3
   85048:	4b57      	ldr	r3, [pc, #348]	; (851a8 <udd_ctrl_out_received+0x1a4>)
   8504a:	881b      	ldrh	r3, [r3, #0]
   8504c:	4619      	mov	r1, r3
   8504e:	89bb      	ldrh	r3, [r7, #12]
   85050:	440b      	add	r3, r1
   85052:	429a      	cmp	r2, r3
   85054:	da05      	bge.n	85062 <udd_ctrl_out_received+0x5e>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   85056:	4b53      	ldr	r3, [pc, #332]	; (851a4 <udd_ctrl_out_received+0x1a0>)
   85058:	899a      	ldrh	r2, [r3, #12]
   8505a:	4b53      	ldr	r3, [pc, #332]	; (851a8 <udd_ctrl_out_received+0x1a4>)
   8505c:	881b      	ldrh	r3, [r3, #0]
   8505e:	1ad3      	subs	r3, r2, r3
   85060:	81bb      	strh	r3, [r7, #12]
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85062:	4b52      	ldr	r3, [pc, #328]	; (851ac <udd_ctrl_out_received+0x1a8>)
   85064:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85066:	4b4f      	ldr	r3, [pc, #316]	; (851a4 <udd_ctrl_out_received+0x1a0>)
   85068:	689b      	ldr	r3, [r3, #8]
   8506a:	4a4f      	ldr	r2, [pc, #316]	; (851a8 <udd_ctrl_out_received+0x1a4>)
   8506c:	8812      	ldrh	r2, [r2, #0]
   8506e:	4413      	add	r3, r2
   85070:	607b      	str	r3, [r7, #4]
	for (i = 0; i < nb_data; i++) {
   85072:	2300      	movs	r3, #0
   85074:	73fb      	strb	r3, [r7, #15]
   85076:	e00a      	b.n	8508e <udd_ctrl_out_received+0x8a>
		*ptr_dest++ = *ptr_src++;
   85078:	68ba      	ldr	r2, [r7, #8]
   8507a:	1c53      	adds	r3, r2, #1
   8507c:	60bb      	str	r3, [r7, #8]
   8507e:	687b      	ldr	r3, [r7, #4]
   85080:	1c59      	adds	r1, r3, #1
   85082:	6079      	str	r1, [r7, #4]
   85084:	7812      	ldrb	r2, [r2, #0]
   85086:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
   85088:	7bfb      	ldrb	r3, [r7, #15]
   8508a:	3301      	adds	r3, #1
   8508c:	73fb      	strb	r3, [r7, #15]
   8508e:	7bfb      	ldrb	r3, [r7, #15]
   85090:	b29b      	uxth	r3, r3
   85092:	89ba      	ldrh	r2, [r7, #12]
   85094:	429a      	cmp	r2, r3
   85096:	d8ef      	bhi.n	85078 <udd_ctrl_out_received+0x74>
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   85098:	4b43      	ldr	r3, [pc, #268]	; (851a8 <udd_ctrl_out_received+0x1a4>)
   8509a:	881a      	ldrh	r2, [r3, #0]
   8509c:	89bb      	ldrh	r3, [r7, #12]
   8509e:	4413      	add	r3, r2
   850a0:	b29a      	uxth	r2, r3
   850a2:	4b41      	ldr	r3, [pc, #260]	; (851a8 <udd_ctrl_out_received+0x1a4>)
   850a4:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   850a6:	89bb      	ldrh	r3, [r7, #12]
   850a8:	2b40      	cmp	r3, #64	; 0x40
   850aa:	d10a      	bne.n	850c2 <udd_ctrl_out_received+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   850ac:	4b3d      	ldr	r3, [pc, #244]	; (851a4 <udd_ctrl_out_received+0x1a0>)
   850ae:	88db      	ldrh	r3, [r3, #6]
   850b0:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_buf_cnt +
   850b2:	4b3f      	ldr	r3, [pc, #252]	; (851b0 <udd_ctrl_out_received+0x1ac>)
   850b4:	881b      	ldrh	r3, [r3, #0]
   850b6:	4619      	mov	r1, r3
   850b8:	4b3b      	ldr	r3, [pc, #236]	; (851a8 <udd_ctrl_out_received+0x1a4>)
   850ba:	881b      	ldrh	r3, [r3, #0]
   850bc:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
   850be:	429a      	cmp	r2, r3
   850c0:	dc20      	bgt.n	85104 <udd_ctrl_out_received+0x100>
			udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   850c2:	4b39      	ldr	r3, [pc, #228]	; (851a8 <udd_ctrl_out_received+0x1a4>)
   850c4:	881a      	ldrh	r2, [r3, #0]
   850c6:	4b37      	ldr	r3, [pc, #220]	; (851a4 <udd_ctrl_out_received+0x1a0>)
   850c8:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   850ca:	4b36      	ldr	r3, [pc, #216]	; (851a4 <udd_ctrl_out_received+0x1a0>)
   850cc:	695b      	ldr	r3, [r3, #20]
   850ce:	2b00      	cmp	r3, #0
   850d0:	d010      	beq.n	850f4 <udd_ctrl_out_received+0xf0>
			if (!udd_g_ctrlreq.over_under_run()) {
   850d2:	4b34      	ldr	r3, [pc, #208]	; (851a4 <udd_ctrl_out_received+0x1a0>)
   850d4:	695b      	ldr	r3, [r3, #20]
   850d6:	4798      	blx	r3
   850d8:	4603      	mov	r3, r0
   850da:	f083 0301 	eor.w	r3, r3, #1
   850de:	b2db      	uxtb	r3, r3
   850e0:	2b00      	cmp	r3, #0
   850e2:	d007      	beq.n	850f4 <udd_ctrl_out_received+0xf0>
				// Stall ZLP
				udd_ctrl_stall_data();
   850e4:	4b2c      	ldr	r3, [pc, #176]	; (85198 <udd_ctrl_out_received+0x194>)
   850e6:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   850e8:	4b2d      	ldr	r3, [pc, #180]	; (851a0 <udd_ctrl_out_received+0x19c>)
   850ea:	f44f 7200 	mov.w	r2, #512	; 0x200
   850ee:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   850f2:	e04a      	b.n	8518a <udd_ctrl_out_received+0x186>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   850f4:	4b2a      	ldr	r3, [pc, #168]	; (851a0 <udd_ctrl_out_received+0x19c>)
   850f6:	f44f 7200 	mov.w	r2, #512	; 0x200
   850fa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   850fe:	4b2d      	ldr	r3, [pc, #180]	; (851b4 <udd_ctrl_out_received+0x1b0>)
   85100:	4798      	blx	r3
		return;
   85102:	e042      	b.n	8518a <udd_ctrl_out_received+0x186>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   85104:	4b27      	ldr	r3, [pc, #156]	; (851a4 <udd_ctrl_out_received+0x1a0>)
   85106:	899a      	ldrh	r2, [r3, #12]
   85108:	4b27      	ldr	r3, [pc, #156]	; (851a8 <udd_ctrl_out_received+0x1a4>)
   8510a:	881b      	ldrh	r3, [r3, #0]
   8510c:	429a      	cmp	r2, r3
   8510e:	d127      	bne.n	85160 <udd_ctrl_out_received+0x15c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   85110:	4b24      	ldr	r3, [pc, #144]	; (851a4 <udd_ctrl_out_received+0x1a0>)
   85112:	695b      	ldr	r3, [r3, #20]
   85114:	2b00      	cmp	r3, #0
   85116:	d107      	bne.n	85128 <udd_ctrl_out_received+0x124>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
   85118:	4b1f      	ldr	r3, [pc, #124]	; (85198 <udd_ctrl_out_received+0x194>)
   8511a:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   8511c:	4b20      	ldr	r3, [pc, #128]	; (851a0 <udd_ctrl_out_received+0x19c>)
   8511e:	f44f 7200 	mov.w	r2, #512	; 0x200
   85122:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   85126:	e030      	b.n	8518a <udd_ctrl_out_received+0x186>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   85128:	4b1e      	ldr	r3, [pc, #120]	; (851a4 <udd_ctrl_out_received+0x1a0>)
   8512a:	695b      	ldr	r3, [r3, #20]
   8512c:	4798      	blx	r3
   8512e:	4603      	mov	r3, r0
   85130:	f083 0301 	eor.w	r3, r3, #1
   85134:	b2db      	uxtb	r3, r3
   85136:	2b00      	cmp	r3, #0
   85138:	d007      	beq.n	8514a <udd_ctrl_out_received+0x146>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   8513a:	4b17      	ldr	r3, [pc, #92]	; (85198 <udd_ctrl_out_received+0x194>)
   8513c:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   8513e:	4b18      	ldr	r3, [pc, #96]	; (851a0 <udd_ctrl_out_received+0x19c>)
   85140:	f44f 7200 	mov.w	r2, #512	; 0x200
   85144:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   85148:	e01f      	b.n	8518a <udd_ctrl_out_received+0x186>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   8514a:	4b19      	ldr	r3, [pc, #100]	; (851b0 <udd_ctrl_out_received+0x1ac>)
   8514c:	881a      	ldrh	r2, [r3, #0]
   8514e:	4b16      	ldr	r3, [pc, #88]	; (851a8 <udd_ctrl_out_received+0x1a4>)
   85150:	881b      	ldrh	r3, [r3, #0]
   85152:	4413      	add	r3, r2
   85154:	b29a      	uxth	r2, r3
   85156:	4b16      	ldr	r3, [pc, #88]	; (851b0 <udd_ctrl_out_received+0x1ac>)
   85158:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   8515a:	4b13      	ldr	r3, [pc, #76]	; (851a8 <udd_ctrl_out_received+0x1a4>)
   8515c:	2200      	movs	r2, #0
   8515e:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   85160:	4b0f      	ldr	r3, [pc, #60]	; (851a0 <udd_ctrl_out_received+0x19c>)
   85162:	f44f 7200 	mov.w	r2, #512	; 0x200
   85166:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   8516a:	4b0d      	ldr	r3, [pc, #52]	; (851a0 <udd_ctrl_out_received+0x19c>)
   8516c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85170:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	flags = cpu_irq_save();
   85174:	4b10      	ldr	r3, [pc, #64]	; (851b8 <udd_ctrl_out_received+0x1b4>)
   85176:	4798      	blx	r3
   85178:	6038      	str	r0, [r7, #0]
	udd_enable_nak_in_interrupt(0);
   8517a:	4b09      	ldr	r3, [pc, #36]	; (851a0 <udd_ctrl_out_received+0x19c>)
   8517c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85180:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   85184:	6838      	ldr	r0, [r7, #0]
   85186:	4b0d      	ldr	r3, [pc, #52]	; (851bc <udd_ctrl_out_received+0x1b8>)
   85188:	4798      	blx	r3
}
   8518a:	3710      	adds	r7, #16
   8518c:	46bd      	mov	sp, r7
   8518e:	bd80      	pop	{r7, pc}
   85190:	200012a5 	.word	0x200012a5
   85194:	00085305 	.word	0x00085305
   85198:	00085239 	.word	0x00085239
   8519c:	00084d01 	.word	0x00084d01
   851a0:	400a4000 	.word	0x400a4000
   851a4:	20001320 	.word	0x20001320
   851a8:	200012a8 	.word	0x200012a8
   851ac:	20180000 	.word	0x20180000
   851b0:	200012a6 	.word	0x200012a6
   851b4:	0008525d 	.word	0x0008525d
   851b8:	00083d69 	.word	0x00083d69
   851bc:	00083dc1 	.word	0x00083dc1

000851c0 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
   851c0:	b580      	push	{r7, lr}
   851c2:	af00      	add	r7, sp, #0
	if (Is_udd_out_received(0))
   851c4:	4b0c      	ldr	r3, [pc, #48]	; (851f8 <udd_ctrl_underflow+0x38>)
   851c6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   851ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
   851ce:	2b00      	cmp	r3, #0
   851d0:	d10f      	bne.n	851f2 <udd_ctrl_underflow+0x32>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   851d2:	4b0a      	ldr	r3, [pc, #40]	; (851fc <udd_ctrl_underflow+0x3c>)
   851d4:	781b      	ldrb	r3, [r3, #0]
   851d6:	2b01      	cmp	r3, #1
   851d8:	d102      	bne.n	851e0 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   851da:	4b09      	ldr	r3, [pc, #36]	; (85200 <udd_ctrl_underflow+0x40>)
   851dc:	4798      	blx	r3
   851de:	e009      	b.n	851f4 <udd_ctrl_underflow+0x34>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   851e0:	4b06      	ldr	r3, [pc, #24]	; (851fc <udd_ctrl_underflow+0x3c>)
   851e2:	781b      	ldrb	r3, [r3, #0]
   851e4:	2b04      	cmp	r3, #4
   851e6:	d105      	bne.n	851f4 <udd_ctrl_underflow+0x34>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   851e8:	4b03      	ldr	r3, [pc, #12]	; (851f8 <udd_ctrl_underflow+0x38>)
   851ea:	2220      	movs	r2, #32
   851ec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   851f0:	e000      	b.n	851f4 <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received
   851f2:	bf00      	nop
	}
}
   851f4:	bd80      	pop	{r7, pc}
   851f6:	bf00      	nop
   851f8:	400a4000 	.word	0x400a4000
   851fc:	200012a5 	.word	0x200012a5
   85200:	0008525d 	.word	0x0008525d

00085204 <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
   85204:	b480      	push	{r7}
   85206:	af00      	add	r7, sp, #0
	if (Is_udd_in_send(0))
   85208:	4b09      	ldr	r3, [pc, #36]	; (85230 <udd_ctrl_overflow+0x2c>)
   8520a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8520e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   85212:	2b00      	cmp	r3, #0
   85214:	d108      	bne.n	85228 <udd_ctrl_overflow+0x24>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   85216:	4b07      	ldr	r3, [pc, #28]	; (85234 <udd_ctrl_overflow+0x30>)
   85218:	781b      	ldrb	r3, [r3, #0]
   8521a:	2b03      	cmp	r3, #3
   8521c:	d105      	bne.n	8522a <udd_ctrl_overflow+0x26>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   8521e:	4b04      	ldr	r3, [pc, #16]	; (85230 <udd_ctrl_overflow+0x2c>)
   85220:	2220      	movs	r2, #32
   85222:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   85226:	e000      	b.n	8522a <udd_ctrl_overflow+0x26>
		return; // overflow ignored if IN data is received
   85228:	bf00      	nop
	}
}
   8522a:	46bd      	mov	sp, r7
   8522c:	bc80      	pop	{r7}
   8522e:	4770      	bx	lr
   85230:	400a4000 	.word	0x400a4000
   85234:	200012a5 	.word	0x200012a5

00085238 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
   85238:	b480      	push	{r7}
   8523a:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   8523c:	4b05      	ldr	r3, [pc, #20]	; (85254 <udd_ctrl_stall_data+0x1c>)
   8523e:	2205      	movs	r2, #5
   85240:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   85242:	4b05      	ldr	r3, [pc, #20]	; (85258 <udd_ctrl_stall_data+0x20>)
   85244:	2220      	movs	r2, #32
   85246:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   8524a:	bf00      	nop
   8524c:	46bd      	mov	sp, r7
   8524e:	bc80      	pop	{r7}
   85250:	4770      	bx	lr
   85252:	bf00      	nop
   85254:	200012a5 	.word	0x200012a5
   85258:	400a4000 	.word	0x400a4000

0008525c <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
   8525c:	b580      	push	{r7, lr}
   8525e:	b082      	sub	sp, #8
   85260:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   85262:	4b13      	ldr	r3, [pc, #76]	; (852b0 <udd_ctrl_send_zlp_in+0x54>)
   85264:	2203      	movs	r2, #3
   85266:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
   85268:	4b12      	ldr	r3, [pc, #72]	; (852b4 <udd_ctrl_send_zlp_in+0x58>)
   8526a:	4798      	blx	r3
   8526c:	6078      	str	r0, [r7, #4]
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   8526e:	4b12      	ldr	r3, [pc, #72]	; (852b8 <udd_ctrl_send_zlp_in+0x5c>)
   85270:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85274:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   85278:	4b0f      	ldr	r3, [pc, #60]	; (852b8 <udd_ctrl_send_zlp_in+0x5c>)
   8527a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8527e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   85282:	4b0d      	ldr	r3, [pc, #52]	; (852b8 <udd_ctrl_send_zlp_in+0x5c>)
   85284:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85288:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   8528c:	4b0a      	ldr	r3, [pc, #40]	; (852b8 <udd_ctrl_send_zlp_in+0x5c>)
   8528e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85292:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   85296:	4b08      	ldr	r3, [pc, #32]	; (852b8 <udd_ctrl_send_zlp_in+0x5c>)
   85298:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8529c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   852a0:	6878      	ldr	r0, [r7, #4]
   852a2:	4b06      	ldr	r3, [pc, #24]	; (852bc <udd_ctrl_send_zlp_in+0x60>)
   852a4:	4798      	blx	r3
}
   852a6:	bf00      	nop
   852a8:	3708      	adds	r7, #8
   852aa:	46bd      	mov	sp, r7
   852ac:	bd80      	pop	{r7, pc}
   852ae:	bf00      	nop
   852b0:	200012a5 	.word	0x200012a5
   852b4:	00083d69 	.word	0x00083d69
   852b8:	400a4000 	.word	0x400a4000
   852bc:	00083dc1 	.word	0x00083dc1

000852c0 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
   852c0:	b580      	push	{r7, lr}
   852c2:	b082      	sub	sp, #8
   852c4:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   852c6:	4b0b      	ldr	r3, [pc, #44]	; (852f4 <udd_ctrl_send_zlp_out+0x34>)
   852c8:	2204      	movs	r2, #4
   852ca:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
   852cc:	4b0a      	ldr	r3, [pc, #40]	; (852f8 <udd_ctrl_send_zlp_out+0x38>)
   852ce:	4798      	blx	r3
   852d0:	6078      	str	r0, [r7, #4]
	udd_ack_nak_in(0);
   852d2:	4b0a      	ldr	r3, [pc, #40]	; (852fc <udd_ctrl_send_zlp_out+0x3c>)
   852d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   852d8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   852dc:	4b07      	ldr	r3, [pc, #28]	; (852fc <udd_ctrl_send_zlp_out+0x3c>)
   852de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   852e2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   852e6:	6878      	ldr	r0, [r7, #4]
   852e8:	4b05      	ldr	r3, [pc, #20]	; (85300 <udd_ctrl_send_zlp_out+0x40>)
   852ea:	4798      	blx	r3
}
   852ec:	bf00      	nop
   852ee:	3708      	adds	r7, #8
   852f0:	46bd      	mov	sp, r7
   852f2:	bd80      	pop	{r7, pc}
   852f4:	200012a5 	.word	0x200012a5
   852f8:	00083d69 	.word	0x00083d69
   852fc:	400a4000 	.word	0x400a4000
   85300:	00083dc1 	.word	0x00083dc1

00085304 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   85304:	b580      	push	{r7, lr}
   85306:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   85308:	4b04      	ldr	r3, [pc, #16]	; (8531c <udd_ctrl_endofrequest+0x18>)
   8530a:	691b      	ldr	r3, [r3, #16]
   8530c:	2b00      	cmp	r3, #0
   8530e:	d002      	beq.n	85316 <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
   85310:	4b02      	ldr	r3, [pc, #8]	; (8531c <udd_ctrl_endofrequest+0x18>)
   85312:	691b      	ldr	r3, [r3, #16]
   85314:	4798      	blx	r3
	}
}
   85316:	bf00      	nop
   85318:	bd80      	pop	{r7, pc}
   8531a:	bf00      	nop
   8531c:	20001320 	.word	0x20001320

00085320 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
   85320:	b580      	push	{r7, lr}
   85322:	b082      	sub	sp, #8
   85324:	af00      	add	r7, sp, #0
	uint32_t status = udd_get_endpoint_status(0);
   85326:	4b31      	ldr	r3, [pc, #196]	; (853ec <udd_ctrl_interrupt+0xcc>)
   85328:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8532c:	607b      	str	r3, [r7, #4]

	if (!Is_udd_endpoint_interrupt(0)) {
   8532e:	4b2f      	ldr	r3, [pc, #188]	; (853ec <udd_ctrl_interrupt+0xcc>)
   85330:	695b      	ldr	r3, [r3, #20]
   85332:	f403 7380 	and.w	r3, r3, #256	; 0x100
   85336:	2b00      	cmp	r3, #0
   85338:	d101      	bne.n	8533e <udd_ctrl_interrupt+0x1e>
		return false; // No interrupt events on control endpoint
   8533a:	2300      	movs	r3, #0
   8533c:	e052      	b.n	853e4 <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   8533e:	4b2b      	ldr	r3, [pc, #172]	; (853ec <udd_ctrl_interrupt+0xcc>)
   85340:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85344:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   85348:	4b28      	ldr	r3, [pc, #160]	; (853ec <udd_ctrl_interrupt+0xcc>)
   8534a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8534e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	// Search event on control endpoint
	if (Is_udd_endpoint_status_setup_received(status)) {
   85352:	687b      	ldr	r3, [r7, #4]
   85354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   85358:	2b00      	cmp	r3, #0
   8535a:	d003      	beq.n	85364 <udd_ctrl_interrupt+0x44>
		// SETUP packet received
		dbg_print("Stp ");
		udd_ctrl_setup_received();
   8535c:	4b24      	ldr	r3, [pc, #144]	; (853f0 <udd_ctrl_interrupt+0xd0>)
   8535e:	4798      	blx	r3
		return true;
   85360:	2301      	movs	r3, #1
   85362:	e03f      	b.n	853e4 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_in_sent(status)
   85364:	687b      	ldr	r3, [r7, #4]
   85366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   8536a:	2b00      	cmp	r3, #0
   8536c:	d00a      	beq.n	85384 <udd_ctrl_interrupt+0x64>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   8536e:	4b1f      	ldr	r3, [pc, #124]	; (853ec <udd_ctrl_interrupt+0xcc>)
   85370:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   85374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   85378:	2b00      	cmp	r3, #0
   8537a:	d003      	beq.n	85384 <udd_ctrl_interrupt+0x64>
		// IN packet sent
		dbg_print("In ");
		udd_ctrl_in_sent();
   8537c:	4b1d      	ldr	r3, [pc, #116]	; (853f4 <udd_ctrl_interrupt+0xd4>)
   8537e:	4798      	blx	r3
		return true;
   85380:	2301      	movs	r3, #1
   85382:	e02f      	b.n	853e4 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_out_received(status)) {
   85384:	687b      	ldr	r3, [r7, #4]
   85386:	f403 7300 	and.w	r3, r3, #512	; 0x200
   8538a:	2b00      	cmp	r3, #0
   8538c:	d003      	beq.n	85396 <udd_ctrl_interrupt+0x76>
		// OUT packet received
		dbg_print("Out ");
		udd_ctrl_out_received();
   8538e:	4b1a      	ldr	r3, [pc, #104]	; (853f8 <udd_ctrl_interrupt+0xd8>)
   85390:	4798      	blx	r3
		return true;
   85392:	2301      	movs	r3, #1
   85394:	e026      	b.n	853e4 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_stall(status)) {
   85396:	687b      	ldr	r3, [r7, #4]
   85398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   8539c:	2b00      	cmp	r3, #0
   8539e:	d004      	beq.n	853aa <udd_ctrl_interrupt+0x8a>
		dbg_print("Stall\n\r");
		// STALLed
		udd_ack_stall(0);
   853a0:	4b12      	ldr	r3, [pc, #72]	; (853ec <udd_ctrl_interrupt+0xcc>)
   853a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   853a6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	if (Is_udd_endpoint_status_nak_out(status)) {
   853aa:	687b      	ldr	r3, [r7, #4]
   853ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   853b0:	2b00      	cmp	r3, #0
   853b2:	d008      	beq.n	853c6 <udd_ctrl_interrupt+0xa6>
		// Overflow on OUT packet
		dbg_print("NakO ");
		udd_ack_nak_out(0);
   853b4:	4b0d      	ldr	r3, [pc, #52]	; (853ec <udd_ctrl_interrupt+0xcc>)
   853b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   853ba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_overflow();
   853be:	4b0f      	ldr	r3, [pc, #60]	; (853fc <udd_ctrl_interrupt+0xdc>)
   853c0:	4798      	blx	r3
		return true;
   853c2:	2301      	movs	r3, #1
   853c4:	e00e      	b.n	853e4 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_nak_in(status)) {
   853c6:	687b      	ldr	r3, [r7, #4]
   853c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   853cc:	2b00      	cmp	r3, #0
   853ce:	d008      	beq.n	853e2 <udd_ctrl_interrupt+0xc2>
		// Underflow on IN packet
		dbg_print("NakI ");
		udd_ack_nak_in(0);
   853d0:	4b06      	ldr	r3, [pc, #24]	; (853ec <udd_ctrl_interrupt+0xcc>)
   853d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   853d6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_underflow();
   853da:	4b09      	ldr	r3, [pc, #36]	; (85400 <udd_ctrl_interrupt+0xe0>)
   853dc:	4798      	blx	r3
		return true;
   853de:	2301      	movs	r3, #1
   853e0:	e000      	b.n	853e4 <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("UnH ");
	return false;
   853e2:	2300      	movs	r3, #0
}
   853e4:	4618      	mov	r0, r3
   853e6:	3708      	adds	r7, #8
   853e8:	46bd      	mov	sp, r7
   853ea:	bd80      	pop	{r7, pc}
   853ec:	400a4000 	.word	0x400a4000
   853f0:	00084d5d 	.word	0x00084d5d
   853f4:	00084e9d 	.word	0x00084e9d
   853f8:	00085005 	.word	0x00085005
   853fc:	00085205 	.word	0x00085205
   85400:	000851c1 	.word	0x000851c1

00085404 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
   85404:	b480      	push	{r7}
   85406:	b083      	sub	sp, #12
   85408:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8540a:	2300      	movs	r3, #0
   8540c:	71fb      	strb	r3, [r7, #7]
   8540e:	e01c      	b.n	8544a <udd_ep_job_table_reset+0x46>
		udd_ep_job[i].busy = false;
   85410:	79fa      	ldrb	r2, [r7, #7]
   85412:	4912      	ldr	r1, [pc, #72]	; (8545c <udd_ep_job_table_reset+0x58>)
   85414:	4613      	mov	r3, r2
   85416:	005b      	lsls	r3, r3, #1
   85418:	4413      	add	r3, r2
   8541a:	00db      	lsls	r3, r3, #3
   8541c:	440b      	add	r3, r1
   8541e:	f103 0210 	add.w	r2, r3, #16
   85422:	7913      	ldrb	r3, [r2, #4]
   85424:	f36f 0300 	bfc	r3, #0, #1
   85428:	7113      	strb	r3, [r2, #4]
		udd_ep_job[i].stall_requested = false;
   8542a:	79fa      	ldrb	r2, [r7, #7]
   8542c:	490b      	ldr	r1, [pc, #44]	; (8545c <udd_ep_job_table_reset+0x58>)
   8542e:	4613      	mov	r3, r2
   85430:	005b      	lsls	r3, r3, #1
   85432:	4413      	add	r3, r2
   85434:	00db      	lsls	r3, r3, #3
   85436:	440b      	add	r3, r1
   85438:	f103 0210 	add.w	r2, r3, #16
   8543c:	7913      	ldrb	r3, [r2, #4]
   8543e:	f36f 0382 	bfc	r3, #2, #1
   85442:	7113      	strb	r3, [r2, #4]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85444:	79fb      	ldrb	r3, [r7, #7]
   85446:	3301      	adds	r3, #1
   85448:	71fb      	strb	r3, [r7, #7]
   8544a:	79fb      	ldrb	r3, [r7, #7]
   8544c:	2b01      	cmp	r3, #1
   8544e:	d9df      	bls.n	85410 <udd_ep_job_table_reset+0xc>
	}
}
   85450:	bf00      	nop
   85452:	370c      	adds	r7, #12
   85454:	46bd      	mov	sp, r7
   85456:	bc80      	pop	{r7}
   85458:	4770      	bx	lr
   8545a:	bf00      	nop
   8545c:	200012ac 	.word	0x200012ac

00085460 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
   85460:	b580      	push	{r7, lr}
   85462:	b082      	sub	sp, #8
   85464:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85466:	2300      	movs	r3, #0
   85468:	71fb      	strb	r3, [r7, #7]
   8546a:	e010      	b.n	8548e <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   8546c:	79fa      	ldrb	r2, [r7, #7]
   8546e:	4613      	mov	r3, r2
   85470:	005b      	lsls	r3, r3, #1
   85472:	4413      	add	r3, r2
   85474:	00db      	lsls	r3, r3, #3
   85476:	4a09      	ldr	r2, [pc, #36]	; (8549c <udd_ep_job_table_kill+0x3c>)
   85478:	1898      	adds	r0, r3, r2
   8547a:	79fb      	ldrb	r3, [r7, #7]
   8547c:	3301      	adds	r3, #1
   8547e:	b2db      	uxtb	r3, r3
   85480:	461a      	mov	r2, r3
   85482:	2101      	movs	r1, #1
   85484:	4b06      	ldr	r3, [pc, #24]	; (854a0 <udd_ep_job_table_kill+0x40>)
   85486:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85488:	79fb      	ldrb	r3, [r7, #7]
   8548a:	3301      	adds	r3, #1
   8548c:	71fb      	strb	r3, [r7, #7]
   8548e:	79fb      	ldrb	r3, [r7, #7]
   85490:	2b01      	cmp	r3, #1
   85492:	d9eb      	bls.n	8546c <udd_ep_job_table_kill+0xc>
	}
}
   85494:	bf00      	nop
   85496:	3708      	adds	r7, #8
   85498:	46bd      	mov	sp, r7
   8549a:	bd80      	pop	{r7, pc}
   8549c:	200012ac 	.word	0x200012ac
   854a0:	000854e1 	.word	0x000854e1

000854a4 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   854a4:	b580      	push	{r7, lr}
   854a6:	b082      	sub	sp, #8
   854a8:	af00      	add	r7, sp, #0
   854aa:	4603      	mov	r3, r0
   854ac:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
   854ae:	79fb      	ldrb	r3, [r7, #7]
   854b0:	f003 030f 	and.w	r3, r3, #15
   854b4:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   854b6:	79fb      	ldrb	r3, [r7, #7]
   854b8:	1e5a      	subs	r2, r3, #1
   854ba:	4613      	mov	r3, r2
   854bc:	005b      	lsls	r3, r3, #1
   854be:	4413      	add	r3, r2
   854c0:	00db      	lsls	r3, r3, #3
   854c2:	4a05      	ldr	r2, [pc, #20]	; (854d8 <udd_ep_abort_job+0x34>)
   854c4:	4413      	add	r3, r2
   854c6:	79fa      	ldrb	r2, [r7, #7]
   854c8:	2101      	movs	r1, #1
   854ca:	4618      	mov	r0, r3
   854cc:	4b03      	ldr	r3, [pc, #12]	; (854dc <udd_ep_abort_job+0x38>)
   854ce:	4798      	blx	r3
}
   854d0:	bf00      	nop
   854d2:	3708      	adds	r7, #8
   854d4:	46bd      	mov	sp, r7
   854d6:	bd80      	pop	{r7, pc}
   854d8:	200012ac 	.word	0x200012ac
   854dc:	000854e1 	.word	0x000854e1

000854e0 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   854e0:	b580      	push	{r7, lr}
   854e2:	b082      	sub	sp, #8
   854e4:	af00      	add	r7, sp, #0
   854e6:	6078      	str	r0, [r7, #4]
   854e8:	460b      	mov	r3, r1
   854ea:	70fb      	strb	r3, [r7, #3]
   854ec:	4613      	mov	r3, r2
   854ee:	70bb      	strb	r3, [r7, #2]
	if (ptr_job->busy == false) {
   854f0:	687b      	ldr	r3, [r7, #4]
   854f2:	7d1b      	ldrb	r3, [r3, #20]
   854f4:	f003 0301 	and.w	r3, r3, #1
   854f8:	b2db      	uxtb	r3, r3
   854fa:	2b00      	cmp	r3, #0
   854fc:	d01f      	beq.n	8553e <udd_ep_finish_job+0x5e>
		return; // No on-going job
	}
	ptr_job->busy = false;
   854fe:	687a      	ldr	r2, [r7, #4]
   85500:	7d13      	ldrb	r3, [r2, #20]
   85502:	f36f 0300 	bfc	r3, #0, #1
   85506:	7513      	strb	r3, [r2, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   85508:	687b      	ldr	r3, [r7, #4]
   8550a:	681b      	ldr	r3, [r3, #0]
   8550c:	2b00      	cmp	r3, #0
   8550e:	d018      	beq.n	85542 <udd_ep_finish_job+0x62>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   85510:	4a0e      	ldr	r2, [pc, #56]	; (8554c <udd_ep_finish_job+0x6c>)
   85512:	78bb      	ldrb	r3, [r7, #2]
   85514:	3308      	adds	r3, #8
   85516:	015b      	lsls	r3, r3, #5
   85518:	4413      	add	r3, r2
   8551a:	681b      	ldr	r3, [r3, #0]
   8551c:	f003 0308 	and.w	r3, r3, #8
   85520:	2b00      	cmp	r3, #0
   85522:	d003      	beq.n	8552c <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
   85524:	78bb      	ldrb	r3, [r7, #2]
   85526:	f063 037f 	orn	r3, r3, #127	; 0x7f
   8552a:	70bb      	strb	r3, [r7, #2]
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   8552c:	687b      	ldr	r3, [r7, #4]
   8552e:	681b      	ldr	r3, [r3, #0]
   85530:	78fa      	ldrb	r2, [r7, #3]
   85532:	4610      	mov	r0, r2
   85534:	687a      	ldr	r2, [r7, #4]
   85536:	6891      	ldr	r1, [r2, #8]
   85538:	78ba      	ldrb	r2, [r7, #2]
   8553a:	4798      	blx	r3
   8553c:	e002      	b.n	85544 <udd_ep_finish_job+0x64>
		return; // No on-going job
   8553e:	bf00      	nop
   85540:	e000      	b.n	85544 <udd_ep_finish_job+0x64>
		return; // No callback linked to job
   85542:	bf00      	nop
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   85544:	3708      	adds	r7, #8
   85546:	46bd      	mov	sp, r7
   85548:	bd80      	pop	{r7, pc}
   8554a:	bf00      	nop
   8554c:	400a4000 	.word	0x400a4000

00085550 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   85550:	b580      	push	{r7, lr}
   85552:	b086      	sub	sp, #24
   85554:	af00      	add	r7, sp, #0
   85556:	4603      	mov	r3, r0
   85558:	71fb      	strb	r3, [r7, #7]
	uint32_t udd_dma_ctrl = 0;
   8555a:	2300      	movs	r3, #0
   8555c:	617b      	str	r3, [r7, #20]
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   8555e:	79fb      	ldrb	r3, [r7, #7]
   85560:	1e5a      	subs	r2, r3, #1
   85562:	4613      	mov	r3, r2
   85564:	005b      	lsls	r3, r3, #1
   85566:	4413      	add	r3, r2
   85568:	00db      	lsls	r3, r3, #3
   8556a:	4a6d      	ldr	r2, [pc, #436]	; (85720 <udd_ep_trans_done+0x1d0>)
   8556c:	4413      	add	r3, r2
   8556e:	60fb      	str	r3, [r7, #12]

	if (!ptr_job->busy) {
   85570:	68fb      	ldr	r3, [r7, #12]
   85572:	7d1b      	ldrb	r3, [r3, #20]
   85574:	f003 0301 	and.w	r3, r3, #1
   85578:	b2db      	uxtb	r3, r3
   8557a:	2b00      	cmp	r3, #0
   8557c:	f000 80cc 	beq.w	85718 <udd_ep_trans_done+0x1c8>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   85580:	68fb      	ldr	r3, [r7, #12]
   85582:	68da      	ldr	r2, [r3, #12]
   85584:	68fb      	ldr	r3, [r7, #12]
   85586:	689b      	ldr	r3, [r3, #8]
   85588:	429a      	cmp	r2, r3
   8558a:	f000 8099 	beq.w	856c0 <udd_ep_trans_done+0x170>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   8558e:	68fb      	ldr	r3, [r7, #12]
   85590:	689a      	ldr	r2, [r3, #8]
   85592:	68fb      	ldr	r3, [r7, #12]
   85594:	68db      	ldr	r3, [r3, #12]
   85596:	1ad3      	subs	r3, r2, r3
   85598:	613b      	str	r3, [r7, #16]

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   8559a:	693b      	ldr	r3, [r7, #16]
   8559c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   855a0:	d905      	bls.n	855ae <udd_ep_trans_done+0x5e>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   855a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   855a6:	613b      	str	r3, [r7, #16]

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   855a8:	2300      	movs	r3, #0
   855aa:	617b      	str	r3, [r7, #20]
   855ac:	e002      	b.n	855b4 <udd_ep_trans_done+0x64>
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   855ae:	693b      	ldr	r3, [r7, #16]
   855b0:	041b      	lsls	r3, r3, #16
   855b2:	617b      	str	r3, [r7, #20]
		}
		if (Is_udd_endpoint_in(ep)) {
   855b4:	4a5b      	ldr	r2, [pc, #364]	; (85724 <udd_ep_trans_done+0x1d4>)
   855b6:	79fb      	ldrb	r3, [r7, #7]
   855b8:	3308      	adds	r3, #8
   855ba:	015b      	lsls	r3, r3, #5
   855bc:	4413      	add	r3, r2
   855be:	681b      	ldr	r3, [r3, #0]
   855c0:	f003 0308 	and.w	r3, r3, #8
   855c4:	2b00      	cmp	r3, #0
   855c6:	d01d      	beq.n	85604 <udd_ep_trans_done+0xb4>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   855c8:	4a56      	ldr	r2, [pc, #344]	; (85724 <udd_ep_trans_done+0x1d4>)
   855ca:	79fb      	ldrb	r3, [r7, #7]
   855cc:	3308      	adds	r3, #8
   855ce:	015b      	lsls	r3, r3, #5
   855d0:	4413      	add	r3, r2
   855d2:	681b      	ldr	r3, [r3, #0]
   855d4:	f003 0307 	and.w	r3, r3, #7
   855d8:	2208      	movs	r2, #8
   855da:	fa02 f303 	lsl.w	r3, r2, r3
   855de:	461a      	mov	r2, r3
   855e0:	693b      	ldr	r3, [r7, #16]
   855e2:	fbb3 f1f2 	udiv	r1, r3, r2
   855e6:	fb02 f201 	mul.w	r2, r2, r1
   855ea:	1a9b      	subs	r3, r3, r2
   855ec:	2b00      	cmp	r3, #0
   855ee:	d027      	beq.n	85640 <udd_ep_trans_done+0xf0>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   855f0:	697b      	ldr	r3, [r7, #20]
   855f2:	f043 0308 	orr.w	r3, r3, #8
   855f6:	617b      	str	r3, [r7, #20]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   855f8:	68fa      	ldr	r2, [r7, #12]
   855fa:	7d13      	ldrb	r3, [r2, #20]
   855fc:	f36f 0341 	bfc	r3, #1, #1
   85600:	7513      	strb	r3, [r2, #20]
   85602:	e01d      	b.n	85640 <udd_ep_trans_done+0xf0>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   85604:	4a47      	ldr	r2, [pc, #284]	; (85724 <udd_ep_trans_done+0x1d4>)
   85606:	79fb      	ldrb	r3, [r7, #7]
   85608:	3308      	adds	r3, #8
   8560a:	015b      	lsls	r3, r3, #5
   8560c:	4413      	add	r3, r2
   8560e:	681b      	ldr	r3, [r3, #0]
   85610:	091b      	lsrs	r3, r3, #4
   85612:	f003 0303 	and.w	r3, r3, #3
   85616:	2b01      	cmp	r3, #1
   85618:	d10e      	bne.n	85638 <udd_ep_trans_done+0xe8>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   8561a:	4a42      	ldr	r2, [pc, #264]	; (85724 <udd_ep_trans_done+0x1d4>)
   8561c:	79fb      	ldrb	r3, [r7, #7]
   8561e:	3308      	adds	r3, #8
   85620:	015b      	lsls	r3, r3, #5
   85622:	4413      	add	r3, r2
   85624:	681b      	ldr	r3, [r3, #0]
   85626:	f003 0307 	and.w	r3, r3, #7
   8562a:	2208      	movs	r2, #8
   8562c:	fa02 f303 	lsl.w	r3, r2, r3
   85630:	461a      	mov	r2, r3
   85632:	693b      	ldr	r3, [r7, #16]
   85634:	4293      	cmp	r3, r2
   85636:	d803      	bhi.n	85640 <udd_ep_trans_done+0xf0>

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   85638:	697b      	ldr	r3, [r7, #20]
   8563a:	f043 0314 	orr.w	r3, r3, #20
   8563e:	617b      	str	r3, [r7, #20]
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   85640:	68fb      	ldr	r3, [r7, #12]
   85642:	685a      	ldr	r2, [r3, #4]
   85644:	68fb      	ldr	r3, [r7, #12]
   85646:	68db      	ldr	r3, [r3, #12]
   85648:	18d1      	adds	r1, r2, r3
   8564a:	79fb      	ldrb	r3, [r7, #7]
   8564c:	011a      	lsls	r2, r3, #4
   8564e:	4b36      	ldr	r3, [pc, #216]	; (85728 <udd_ep_trans_done+0x1d8>)
   85650:	4413      	add	r3, r2
   85652:	460a      	mov	r2, r1
   85654:	605a      	str	r2, [r3, #4]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   85656:	697b      	ldr	r3, [r7, #20]
   85658:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   8565c:	617b      	str	r3, [r7, #20]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
   8565e:	4b33      	ldr	r3, [pc, #204]	; (8572c <udd_ep_trans_done+0x1dc>)
   85660:	4798      	blx	r3
   85662:	60b8      	str	r0, [r7, #8]
		if (!(udd_endpoint_dma_get_status(ep)
   85664:	79fb      	ldrb	r3, [r7, #7]
   85666:	011a      	lsls	r2, r3, #4
   85668:	4b2f      	ldr	r3, [pc, #188]	; (85728 <udd_ep_trans_done+0x1d8>)
   8566a:	4413      	add	r3, r2
   8566c:	68db      	ldr	r3, [r3, #12]
				& UDPHS_DMASTATUS_END_TR_ST)) {
   8566e:	f003 0310 	and.w	r3, r3, #16
		if (!(udd_endpoint_dma_get_status(ep)
   85672:	2b00      	cmp	r3, #0
   85674:	d11d      	bne.n	856b2 <udd_ep_trans_done+0x162>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   85676:	79fb      	ldrb	r3, [r7, #7]
   85678:	011a      	lsls	r2, r3, #4
   8567a:	4b2b      	ldr	r3, [pc, #172]	; (85728 <udd_ep_trans_done+0x1d8>)
   8567c:	4413      	add	r3, r2
   8567e:	697a      	ldr	r2, [r7, #20]
   85680:	609a      	str	r2, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   85682:	68fb      	ldr	r3, [r7, #12]
   85684:	68da      	ldr	r2, [r3, #12]
   85686:	693b      	ldr	r3, [r7, #16]
   85688:	441a      	add	r2, r3
   8568a:	68fb      	ldr	r3, [r7, #12]
   8568c:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   8568e:	68fb      	ldr	r3, [r7, #12]
   85690:	693a      	ldr	r2, [r7, #16]
   85692:	611a      	str	r2, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   85694:	4b23      	ldr	r3, [pc, #140]	; (85724 <udd_ep_trans_done+0x1d4>)
   85696:	691a      	ldr	r2, [r3, #16]
   85698:	79fb      	ldrb	r3, [r7, #7]
   8569a:	3b01      	subs	r3, #1
   8569c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   856a0:	fa01 f303 	lsl.w	r3, r1, r3
   856a4:	491f      	ldr	r1, [pc, #124]	; (85724 <udd_ep_trans_done+0x1d4>)
   856a6:	4313      	orrs	r3, r2
   856a8:	610b      	str	r3, [r1, #16]
			cpu_irq_restore(flags);
   856aa:	68b8      	ldr	r0, [r7, #8]
   856ac:	4b20      	ldr	r3, [pc, #128]	; (85730 <udd_ep_trans_done+0x1e0>)
   856ae:	4798      	blx	r3
			return;
   856b0:	e033      	b.n	8571a <udd_ep_trans_done+0x1ca>
		}
		cpu_irq_restore(flags);
   856b2:	68b8      	ldr	r0, [r7, #8]
   856b4:	4b1e      	ldr	r3, [pc, #120]	; (85730 <udd_ep_trans_done+0x1e0>)
   856b6:	4798      	blx	r3

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   856b8:	68fb      	ldr	r3, [r7, #12]
   856ba:	68da      	ldr	r2, [r3, #12]
   856bc:	68fb      	ldr	r3, [r7, #12]
   856be:	609a      	str	r2, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   856c0:	4a18      	ldr	r2, [pc, #96]	; (85724 <udd_ep_trans_done+0x1d4>)
   856c2:	79fb      	ldrb	r3, [r7, #7]
   856c4:	3308      	adds	r3, #8
   856c6:	015b      	lsls	r3, r3, #5
   856c8:	4413      	add	r3, r2
   856ca:	681b      	ldr	r3, [r3, #0]
   856cc:	f003 0308 	and.w	r3, r3, #8
   856d0:	2b00      	cmp	r3, #0
   856d2:	d01a      	beq.n	8570a <udd_ep_trans_done+0x1ba>
		if (ptr_job->b_shortpacket) {
   856d4:	68fb      	ldr	r3, [r7, #12]
   856d6:	7d1b      	ldrb	r3, [r3, #20]
   856d8:	f003 0302 	and.w	r3, r3, #2
   856dc:	b2db      	uxtb	r3, r3
   856de:	2b00      	cmp	r3, #0
   856e0:	d013      	beq.n	8570a <udd_ep_trans_done+0x1ba>
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   856e2:	4a10      	ldr	r2, [pc, #64]	; (85724 <udd_ep_trans_done+0x1d4>)
   856e4:	79fb      	ldrb	r3, [r7, #7]
   856e6:	3308      	adds	r3, #8
   856e8:	015b      	lsls	r3, r3, #5
   856ea:	4413      	add	r3, r2
   856ec:	3304      	adds	r3, #4
   856ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
   856f2:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep);
   856f4:	4b0b      	ldr	r3, [pc, #44]	; (85724 <udd_ep_trans_done+0x1d4>)
   856f6:	691a      	ldr	r2, [r3, #16]
   856f8:	79fb      	ldrb	r3, [r7, #7]
   856fa:	f44f 7180 	mov.w	r1, #256	; 0x100
   856fe:	fa01 f303 	lsl.w	r3, r1, r3
   85702:	4908      	ldr	r1, [pc, #32]	; (85724 <udd_ep_trans_done+0x1d4>)
   85704:	4313      	orrs	r3, r2
   85706:	610b      	str	r3, [r1, #16]
			return;
   85708:	e007      	b.n	8571a <udd_ep_trans_done+0x1ca>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   8570a:	79fb      	ldrb	r3, [r7, #7]
   8570c:	461a      	mov	r2, r3
   8570e:	2100      	movs	r1, #0
   85710:	68f8      	ldr	r0, [r7, #12]
   85712:	4b08      	ldr	r3, [pc, #32]	; (85734 <udd_ep_trans_done+0x1e4>)
   85714:	4798      	blx	r3
   85716:	e000      	b.n	8571a <udd_ep_trans_done+0x1ca>
		return; // No job is running, then ignore it (system error)
   85718:	bf00      	nop
}
   8571a:	3718      	adds	r7, #24
   8571c:	46bd      	mov	sp, r7
   8571e:	bd80      	pop	{r7, pc}
   85720:	200012ac 	.word	0x200012ac
   85724:	400a4000 	.word	0x400a4000
   85728:	400a4300 	.word	0x400a4300
   8572c:	00083d69 	.word	0x00083d69
   85730:	00083dc1 	.word	0x00083dc1
   85734:	000854e1 	.word	0x000854e1

00085738 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
   85738:	b580      	push	{r7, lr}
   8573a:	b084      	sub	sp, #16
   8573c:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8573e:	2301      	movs	r3, #1
   85740:	73fb      	strb	r3, [r7, #15]
   85742:	e0e0      	b.n	85906 <udd_ep_interrupt+0x1ce>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   85744:	7bfb      	ldrb	r3, [r7, #15]
   85746:	1e5a      	subs	r2, r3, #1
   85748:	4613      	mov	r3, r2
   8574a:	005b      	lsls	r3, r3, #1
   8574c:	4413      	add	r3, r2
   8574e:	00db      	lsls	r3, r3, #3
   85750:	4a71      	ldr	r2, [pc, #452]	; (85918 <udd_ep_interrupt+0x1e0>)
   85752:	4413      	add	r3, r2
   85754:	60bb      	str	r3, [r7, #8]

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   85756:	4b71      	ldr	r3, [pc, #452]	; (8591c <udd_ep_interrupt+0x1e4>)
   85758:	691a      	ldr	r2, [r3, #16]
   8575a:	7bfb      	ldrb	r3, [r7, #15]
   8575c:	3b01      	subs	r3, #1
   8575e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   85762:	fa01 f303 	lsl.w	r3, r1, r3
   85766:	4013      	ands	r3, r2
   85768:	2b00      	cmp	r3, #0
   8576a:	d03c      	beq.n	857e6 <udd_ep_interrupt+0xae>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   8576c:	4b6b      	ldr	r3, [pc, #428]	; (8591c <udd_ep_interrupt+0x1e4>)
   8576e:	695a      	ldr	r2, [r3, #20]
   85770:	7bfb      	ldrb	r3, [r7, #15]
   85772:	3b01      	subs	r3, #1
   85774:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   85778:	fa01 f303 	lsl.w	r3, r1, r3
   8577c:	4013      	ands	r3, r2
   8577e:	2b00      	cmp	r3, #0
   85780:	d031      	beq.n	857e6 <udd_ep_interrupt+0xae>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   85782:	7bfb      	ldrb	r3, [r7, #15]
   85784:	011a      	lsls	r2, r3, #4
   85786:	4b66      	ldr	r3, [pc, #408]	; (85920 <udd_ep_interrupt+0x1e8>)
   85788:	4413      	add	r3, r2
   8578a:	68db      	ldr	r3, [r3, #12]
					& UDPHS_DMASTATUS_CHANN_ENB) {
   8578c:	f003 0301 	and.w	r3, r3, #1
			if (udd_endpoint_dma_get_status(ep)
   85790:	2b00      	cmp	r3, #0
   85792:	d001      	beq.n	85798 <udd_ep_interrupt+0x60>
				return true; // Ignore EOT_STA interrupt
   85794:	2301      	movs	r3, #1
   85796:	e0bb      	b.n	85910 <udd_ep_interrupt+0x1d8>
			}
			dbg_print("dma%d: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   85798:	4b60      	ldr	r3, [pc, #384]	; (8591c <udd_ep_interrupt+0x1e4>)
   8579a:	691a      	ldr	r2, [r3, #16]
   8579c:	7bfb      	ldrb	r3, [r7, #15]
   8579e:	3b01      	subs	r3, #1
   857a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   857a4:	fa01 f303 	lsl.w	r3, r1, r3
   857a8:	43db      	mvns	r3, r3
   857aa:	495c      	ldr	r1, [pc, #368]	; (8591c <udd_ep_interrupt+0x1e4>)
   857ac:	4013      	ands	r3, r2
   857ae:	610b      	str	r3, [r1, #16]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   857b0:	7bfb      	ldrb	r3, [r7, #15]
   857b2:	011a      	lsls	r2, r3, #4
   857b4:	4b5a      	ldr	r3, [pc, #360]	; (85920 <udd_ep_interrupt+0x1e8>)
   857b6:	4413      	add	r3, r2
   857b8:	68db      	ldr	r3, [r3, #12]
					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
   857ba:	0c1b      	lsrs	r3, r3, #16
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   857bc:	b29b      	uxth	r3, r3
   857be:	607b      	str	r3, [r7, #4]
			if (nb_remaining) {
   857c0:	687b      	ldr	r3, [r7, #4]
   857c2:	2b00      	cmp	r3, #0
   857c4:	d009      	beq.n	857da <udd_ep_interrupt+0xa2>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   857c6:	68bb      	ldr	r3, [r7, #8]
   857c8:	68da      	ldr	r2, [r3, #12]
   857ca:	687b      	ldr	r3, [r7, #4]
   857cc:	1ad2      	subs	r2, r2, r3
   857ce:	68bb      	ldr	r3, [r7, #8]
   857d0:	60da      	str	r2, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   857d2:	68bb      	ldr	r3, [r7, #8]
   857d4:	68da      	ldr	r2, [r3, #12]
   857d6:	68bb      	ldr	r3, [r7, #8]
   857d8:	609a      	str	r2, [r3, #8]
			}
			udd_ep_trans_done(ep);
   857da:	7bfb      	ldrb	r3, [r7, #15]
   857dc:	4618      	mov	r0, r3
   857de:	4b51      	ldr	r3, [pc, #324]	; (85924 <udd_ep_interrupt+0x1ec>)
   857e0:	4798      	blx	r3
			return true;
   857e2:	2301      	movs	r3, #1
   857e4:	e094      	b.n	85910 <udd_ep_interrupt+0x1d8>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   857e6:	4b4d      	ldr	r3, [pc, #308]	; (8591c <udd_ep_interrupt+0x1e4>)
   857e8:	691a      	ldr	r2, [r3, #16]
   857ea:	7bfb      	ldrb	r3, [r7, #15]
   857ec:	f44f 7180 	mov.w	r1, #256	; 0x100
   857f0:	fa01 f303 	lsl.w	r3, r1, r3
   857f4:	4013      	ands	r3, r2
   857f6:	2b00      	cmp	r3, #0
   857f8:	f000 8082 	beq.w	85900 <udd_ep_interrupt+0x1c8>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   857fc:	4a47      	ldr	r2, [pc, #284]	; (8591c <udd_ep_interrupt+0x1e4>)
   857fe:	7bfb      	ldrb	r3, [r7, #15]
   85800:	015b      	lsls	r3, r3, #5
   85802:	4413      	add	r3, r2
   85804:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   85808:	681b      	ldr	r3, [r3, #0]
   8580a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   8580e:	2b00      	cmp	r3, #0
   85810:	d024      	beq.n	8585c <udd_ep_interrupt+0x124>
					&& !Is_udd_tx_pkt_ready(ep)) {
   85812:	4a42      	ldr	r2, [pc, #264]	; (8591c <udd_ep_interrupt+0x1e4>)
   85814:	7bfb      	ldrb	r3, [r7, #15]
   85816:	015b      	lsls	r3, r3, #5
   85818:	4413      	add	r3, r2
   8581a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8581e:	681b      	ldr	r3, [r3, #0]
   85820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   85824:	2b00      	cmp	r3, #0
   85826:	d119      	bne.n	8585c <udd_ep_interrupt+0x124>
				udd_disable_tx_pkt_ready_interrupt(ep);
   85828:	4a3c      	ldr	r2, [pc, #240]	; (8591c <udd_ep_interrupt+0x1e4>)
   8582a:	7bfb      	ldrb	r3, [r7, #15]
   8582c:	015b      	lsls	r3, r3, #5
   8582e:	4413      	add	r3, r2
   85830:	f503 7384 	add.w	r3, r3, #264	; 0x108
   85834:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85838:	601a      	str	r2, [r3, #0]
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   8583a:	4a38      	ldr	r2, [pc, #224]	; (8591c <udd_ep_interrupt+0x1e4>)
   8583c:	7bfb      	ldrb	r3, [r7, #15]
   8583e:	015b      	lsls	r3, r3, #5
   85840:	4413      	add	r3, r2
   85842:	f503 738a 	add.w	r3, r3, #276	; 0x114
   85846:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8584a:	601a      	str	r2, [r3, #0]
				udd_ep_finish_job(ptr_job, false, ep);
   8584c:	7bfb      	ldrb	r3, [r7, #15]
   8584e:	461a      	mov	r2, r3
   85850:	2100      	movs	r1, #0
   85852:	68b8      	ldr	r0, [r7, #8]
   85854:	4b34      	ldr	r3, [pc, #208]	; (85928 <udd_ep_interrupt+0x1f0>)
   85856:	4798      	blx	r3
				return true;
   85858:	2301      	movs	r3, #1
   8585a:	e059      	b.n	85910 <udd_ep_interrupt+0x1d8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   8585c:	4a2f      	ldr	r2, [pc, #188]	; (8591c <udd_ep_interrupt+0x1e4>)
   8585e:	7bfb      	ldrb	r3, [r7, #15]
   85860:	015b      	lsls	r3, r3, #5
   85862:	4413      	add	r3, r2
   85864:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   85868:	681b      	ldr	r3, [r3, #0]
   8586a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   8586e:	2b00      	cmp	r3, #0
   85870:	d046      	beq.n	85900 <udd_ep_interrupt+0x1c8>
					&& (0 == udd_nb_busy_bank(ep))) {
   85872:	4a2a      	ldr	r2, [pc, #168]	; (8591c <udd_ep_interrupt+0x1e4>)
   85874:	7bfb      	ldrb	r3, [r7, #15]
   85876:	015b      	lsls	r3, r3, #5
   85878:	4413      	add	r3, r2
   8587a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8587e:	681b      	ldr	r3, [r3, #0]
   85880:	0c9b      	lsrs	r3, r3, #18
   85882:	f003 0303 	and.w	r3, r3, #3
   85886:	2b00      	cmp	r3, #0
   85888:	d13a      	bne.n	85900 <udd_ep_interrupt+0x1c8>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   8588a:	4a24      	ldr	r2, [pc, #144]	; (8591c <udd_ep_interrupt+0x1e4>)
   8588c:	7bfb      	ldrb	r3, [r7, #15]
   8588e:	015b      	lsls	r3, r3, #5
   85890:	4413      	add	r3, r2
   85892:	f503 7384 	add.w	r3, r3, #264	; 0x108
   85896:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   8589a:	601a      	str	r2, [r3, #0]
				udd_disable_endpoint_interrupt(ep);
   8589c:	4b1f      	ldr	r3, [pc, #124]	; (8591c <udd_ep_interrupt+0x1e4>)
   8589e:	691a      	ldr	r2, [r3, #16]
   858a0:	7bfb      	ldrb	r3, [r7, #15]
   858a2:	f44f 7180 	mov.w	r1, #256	; 0x100
   858a6:	fa01 f303 	lsl.w	r3, r1, r3
   858aa:	43db      	mvns	r3, r3
   858ac:	491b      	ldr	r1, [pc, #108]	; (8591c <udd_ep_interrupt+0x1e4>)
   858ae:	4013      	ands	r3, r2
   858b0:	610b      	str	r3, [r1, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   858b2:	68ba      	ldr	r2, [r7, #8]
   858b4:	7d13      	ldrb	r3, [r2, #20]
   858b6:	f36f 0382 	bfc	r3, #2, #1
   858ba:	7513      	strb	r3, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   858bc:	4a17      	ldr	r2, [pc, #92]	; (8591c <udd_ep_interrupt+0x1e4>)
   858be:	7bfb      	ldrb	r3, [r7, #15]
   858c0:	015b      	lsls	r3, r3, #5
   858c2:	4413      	add	r3, r2
   858c4:	f503 7384 	add.w	r3, r3, #264	; 0x108
   858c8:	681a      	ldr	r2, [r3, #0]
   858ca:	4914      	ldr	r1, [pc, #80]	; (8591c <udd_ep_interrupt+0x1e4>)
   858cc:	7bfb      	ldrb	r3, [r7, #15]
   858ce:	f022 0202 	bic.w	r2, r2, #2
   858d2:	015b      	lsls	r3, r3, #5
   858d4:	440b      	add	r3, r1
   858d6:	f503 7384 	add.w	r3, r3, #264	; 0x108
   858da:	601a      	str	r2, [r3, #0]
				udd_enable_stall_handshake(ep);
   858dc:	4a0f      	ldr	r2, [pc, #60]	; (8591c <udd_ep_interrupt+0x1e4>)
   858de:	7bfb      	ldrb	r3, [r7, #15]
   858e0:	015b      	lsls	r3, r3, #5
   858e2:	4413      	add	r3, r2
   858e4:	f503 738a 	add.w	r3, r3, #276	; 0x114
   858e8:	2220      	movs	r2, #32
   858ea:	601a      	str	r2, [r3, #0]
				udd_reset_data_toggle(ep);
   858ec:	4a0b      	ldr	r2, [pc, #44]	; (8591c <udd_ep_interrupt+0x1e4>)
   858ee:	7bfb      	ldrb	r3, [r7, #15]
   858f0:	015b      	lsls	r3, r3, #5
   858f2:	4413      	add	r3, r2
   858f4:	f503 738c 	add.w	r3, r3, #280	; 0x118
   858f8:	2240      	movs	r2, #64	; 0x40
   858fa:	601a      	str	r2, [r3, #0]
				//dbg_print("exHalt%x ", ep);
				return true;
   858fc:	2301      	movs	r3, #1
   858fe:	e007      	b.n	85910 <udd_ep_interrupt+0x1d8>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   85900:	7bfb      	ldrb	r3, [r7, #15]
   85902:	3301      	adds	r3, #1
   85904:	73fb      	strb	r3, [r7, #15]
   85906:	7bfb      	ldrb	r3, [r7, #15]
   85908:	2b02      	cmp	r3, #2
   8590a:	f67f af1b 	bls.w	85744 <udd_ep_interrupt+0xc>
			}
		}
	}
	return false;
   8590e:	2300      	movs	r3, #0
}
   85910:	4618      	mov	r0, r3
   85912:	3710      	adds	r7, #16
   85914:	46bd      	mov	sp, r7
   85916:	bd80      	pop	{r7, pc}
   85918:	200012ac 	.word	0x200012ac
   8591c:	400a4000 	.word	0x400a4000
   85920:	400a4300 	.word	0x400a4300
   85924:	00085551 	.word	0x00085551
   85928:	000854e1 	.word	0x000854e1

0008592c <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   8592c:	b480      	push	{r7}
   8592e:	b087      	sub	sp, #28
   85930:	af00      	add	r7, sp, #0
   85932:	60f8      	str	r0, [r7, #12]
   85934:	60b9      	str	r1, [r7, #8]
   85936:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   85938:	68bb      	ldr	r3, [r7, #8]
   8593a:	085a      	lsrs	r2, r3, #1
   8593c:	687b      	ldr	r3, [r7, #4]
   8593e:	441a      	add	r2, r3
   85940:	68bb      	ldr	r3, [r7, #8]
   85942:	fbb2 f3f3 	udiv	r3, r2, r3
   85946:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   85948:	697b      	ldr	r3, [r7, #20]
   8594a:	2b03      	cmp	r3, #3
   8594c:	d903      	bls.n	85956 <usart_set_spi_master_baudrate+0x2a>
   8594e:	697b      	ldr	r3, [r7, #20]
   85950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   85954:	d301      	bcc.n	8595a <usart_set_spi_master_baudrate+0x2e>
		return 1;
   85956:	2301      	movs	r3, #1
   85958:	e003      	b.n	85962 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   8595a:	68fb      	ldr	r3, [r7, #12]
   8595c:	697a      	ldr	r2, [r7, #20]
   8595e:	621a      	str	r2, [r3, #32]

	return 0;
   85960:	2300      	movs	r3, #0
}
   85962:	4618      	mov	r0, r3
   85964:	371c      	adds	r7, #28
   85966:	46bd      	mov	sp, r7
   85968:	bc80      	pop	{r7}
   8596a:	4770      	bx	lr

0008596c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   8596c:	b580      	push	{r7, lr}
   8596e:	b082      	sub	sp, #8
   85970:	af00      	add	r7, sp, #0
   85972:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   85974:	6878      	ldr	r0, [r7, #4]
   85976:	4b0f      	ldr	r3, [pc, #60]	; (859b4 <usart_reset+0x48>)
   85978:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8597a:	687b      	ldr	r3, [r7, #4]
   8597c:	2200      	movs	r2, #0
   8597e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   85980:	687b      	ldr	r3, [r7, #4]
   85982:	2200      	movs	r2, #0
   85984:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   85986:	687b      	ldr	r3, [r7, #4]
   85988:	2200      	movs	r2, #0
   8598a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   8598c:	6878      	ldr	r0, [r7, #4]
   8598e:	4b0a      	ldr	r3, [pc, #40]	; (859b8 <usart_reset+0x4c>)
   85990:	4798      	blx	r3
	usart_reset_rx(p_usart);
   85992:	6878      	ldr	r0, [r7, #4]
   85994:	4b09      	ldr	r3, [pc, #36]	; (859bc <usart_reset+0x50>)
   85996:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   85998:	6878      	ldr	r0, [r7, #4]
   8599a:	4b09      	ldr	r3, [pc, #36]	; (859c0 <usart_reset+0x54>)
   8599c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   8599e:	6878      	ldr	r0, [r7, #4]
   859a0:	4b08      	ldr	r3, [pc, #32]	; (859c4 <usart_reset+0x58>)
   859a2:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
   859a4:	6878      	ldr	r0, [r7, #4]
   859a6:	4b08      	ldr	r3, [pc, #32]	; (859c8 <usart_reset+0x5c>)
   859a8:	4798      	blx	r3
#endif
}
   859aa:	bf00      	nop
   859ac:	3708      	adds	r7, #8
   859ae:	46bd      	mov	sp, r7
   859b0:	bd80      	pop	{r7, pc}
   859b2:	bf00      	nop
   859b4:	00085ba1 	.word	0x00085ba1
   859b8:	00085af5 	.word	0x00085af5
   859bc:	00085b0d 	.word	0x00085b0d
   859c0:	00085b25 	.word	0x00085b25
   859c4:	00085b59 	.word	0x00085b59
   859c8:	00085b3f 	.word	0x00085b3f

000859cc <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   859cc:	b580      	push	{r7, lr}
   859ce:	b084      	sub	sp, #16
   859d0:	af00      	add	r7, sp, #0
   859d2:	60f8      	str	r0, [r7, #12]
   859d4:	60b9      	str	r1, [r7, #8]
   859d6:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   859d8:	68f8      	ldr	r0, [r7, #12]
   859da:	4b3d      	ldr	r3, [pc, #244]	; (85ad0 <usart_init_spi_master+0x104>)
   859dc:	4798      	blx	r3

	ul_reg_val = 0;
   859de:	4b3d      	ldr	r3, [pc, #244]	; (85ad4 <usart_init_spi_master+0x108>)
   859e0:	2200      	movs	r2, #0
   859e2:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   859e4:	68bb      	ldr	r3, [r7, #8]
   859e6:	2b00      	cmp	r3, #0
   859e8:	d00d      	beq.n	85a06 <usart_init_spi_master+0x3a>
   859ea:	68bb      	ldr	r3, [r7, #8]
   859ec:	689b      	ldr	r3, [r3, #8]
   859ee:	2b03      	cmp	r3, #3
   859f0:	d809      	bhi.n	85a06 <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   859f2:	68bb      	ldr	r3, [r7, #8]
   859f4:	681b      	ldr	r3, [r3, #0]
   859f6:	687a      	ldr	r2, [r7, #4]
   859f8:	4619      	mov	r1, r3
   859fa:	68f8      	ldr	r0, [r7, #12]
   859fc:	4b36      	ldr	r3, [pc, #216]	; (85ad8 <usart_init_spi_master+0x10c>)
   859fe:	4798      	blx	r3
   85a00:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   85a02:	2b00      	cmp	r3, #0
   85a04:	d001      	beq.n	85a0a <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   85a06:	2301      	movs	r3, #1
   85a08:	e05d      	b.n	85ac6 <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   85a0a:	68bb      	ldr	r3, [r7, #8]
   85a0c:	685a      	ldr	r2, [r3, #4]
   85a0e:	4b31      	ldr	r3, [pc, #196]	; (85ad4 <usart_init_spi_master+0x108>)
   85a10:	681b      	ldr	r3, [r3, #0]
   85a12:	4313      	orrs	r3, r2
   85a14:	4a2f      	ldr	r2, [pc, #188]	; (85ad4 <usart_init_spi_master+0x108>)
   85a16:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   85a18:	68bb      	ldr	r3, [r7, #8]
   85a1a:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   85a1c:	4b2d      	ldr	r3, [pc, #180]	; (85ad4 <usart_init_spi_master+0x108>)
   85a1e:	681b      	ldr	r3, [r3, #0]
   85a20:	4313      	orrs	r3, r2
   85a22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   85a26:	f043 030e 	orr.w	r3, r3, #14
   85a2a:	4a2a      	ldr	r2, [pc, #168]	; (85ad4 <usart_init_spi_master+0x108>)
   85a2c:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   85a2e:	68bb      	ldr	r3, [r7, #8]
   85a30:	689b      	ldr	r3, [r3, #8]
   85a32:	2b03      	cmp	r3, #3
   85a34:	d83e      	bhi.n	85ab4 <usart_init_spi_master+0xe8>
   85a36:	a201      	add	r2, pc, #4	; (adr r2, 85a3c <usart_init_spi_master+0x70>)
   85a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85a3c:	00085a4d 	.word	0x00085a4d
   85a40:	00085a67 	.word	0x00085a67
   85a44:	00085a81 	.word	0x00085a81
   85a48:	00085a9b 	.word	0x00085a9b
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   85a4c:	4b21      	ldr	r3, [pc, #132]	; (85ad4 <usart_init_spi_master+0x108>)
   85a4e:	681b      	ldr	r3, [r3, #0]
   85a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   85a54:	4a1f      	ldr	r2, [pc, #124]	; (85ad4 <usart_init_spi_master+0x108>)
   85a56:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   85a58:	4b1e      	ldr	r3, [pc, #120]	; (85ad4 <usart_init_spi_master+0x108>)
   85a5a:	681b      	ldr	r3, [r3, #0]
   85a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   85a60:	4a1c      	ldr	r2, [pc, #112]	; (85ad4 <usart_init_spi_master+0x108>)
   85a62:	6013      	str	r3, [r2, #0]
		break;
   85a64:	e027      	b.n	85ab6 <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   85a66:	4b1b      	ldr	r3, [pc, #108]	; (85ad4 <usart_init_spi_master+0x108>)
   85a68:	681b      	ldr	r3, [r3, #0]
   85a6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   85a6e:	4a19      	ldr	r2, [pc, #100]	; (85ad4 <usart_init_spi_master+0x108>)
   85a70:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   85a72:	4b18      	ldr	r3, [pc, #96]	; (85ad4 <usart_init_spi_master+0x108>)
   85a74:	681b      	ldr	r3, [r3, #0]
   85a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   85a7a:	4a16      	ldr	r2, [pc, #88]	; (85ad4 <usart_init_spi_master+0x108>)
   85a7c:	6013      	str	r3, [r2, #0]
		break;
   85a7e:	e01a      	b.n	85ab6 <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   85a80:	4b14      	ldr	r3, [pc, #80]	; (85ad4 <usart_init_spi_master+0x108>)
   85a82:	681b      	ldr	r3, [r3, #0]
   85a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   85a88:	4a12      	ldr	r2, [pc, #72]	; (85ad4 <usart_init_spi_master+0x108>)
   85a8a:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   85a8c:	4b11      	ldr	r3, [pc, #68]	; (85ad4 <usart_init_spi_master+0x108>)
   85a8e:	681b      	ldr	r3, [r3, #0]
   85a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   85a94:	4a0f      	ldr	r2, [pc, #60]	; (85ad4 <usart_init_spi_master+0x108>)
   85a96:	6013      	str	r3, [r2, #0]
		break;
   85a98:	e00d      	b.n	85ab6 <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   85a9a:	4b0e      	ldr	r3, [pc, #56]	; (85ad4 <usart_init_spi_master+0x108>)
   85a9c:	681b      	ldr	r3, [r3, #0]
   85a9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   85aa2:	4a0c      	ldr	r2, [pc, #48]	; (85ad4 <usart_init_spi_master+0x108>)
   85aa4:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   85aa6:	4b0b      	ldr	r3, [pc, #44]	; (85ad4 <usart_init_spi_master+0x108>)
   85aa8:	681b      	ldr	r3, [r3, #0]
   85aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   85aae:	4a09      	ldr	r2, [pc, #36]	; (85ad4 <usart_init_spi_master+0x108>)
   85ab0:	6013      	str	r3, [r2, #0]
		break;
   85ab2:	e000      	b.n	85ab6 <usart_init_spi_master+0xea>

	default:
		break;
   85ab4:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   85ab6:	68fb      	ldr	r3, [r7, #12]
   85ab8:	685a      	ldr	r2, [r3, #4]
   85aba:	4b06      	ldr	r3, [pc, #24]	; (85ad4 <usart_init_spi_master+0x108>)
   85abc:	681b      	ldr	r3, [r3, #0]
   85abe:	431a      	orrs	r2, r3
   85ac0:	68fb      	ldr	r3, [r7, #12]
   85ac2:	605a      	str	r2, [r3, #4]

	return 0;
   85ac4:	2300      	movs	r3, #0
}
   85ac6:	4618      	mov	r0, r3
   85ac8:	3710      	adds	r7, #16
   85aca:	46bd      	mov	sp, r7
   85acc:	bd80      	pop	{r7, pc}
   85ace:	bf00      	nop
   85ad0:	0008596d 	.word	0x0008596d
   85ad4:	200012e0 	.word	0x200012e0
   85ad8:	0008592d 	.word	0x0008592d

00085adc <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   85adc:	b480      	push	{r7}
   85ade:	b083      	sub	sp, #12
   85ae0:	af00      	add	r7, sp, #0
   85ae2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   85ae4:	687b      	ldr	r3, [r7, #4]
   85ae6:	2240      	movs	r2, #64	; 0x40
   85ae8:	601a      	str	r2, [r3, #0]
}
   85aea:	bf00      	nop
   85aec:	370c      	adds	r7, #12
   85aee:	46bd      	mov	sp, r7
   85af0:	bc80      	pop	{r7}
   85af2:	4770      	bx	lr

00085af4 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   85af4:	b480      	push	{r7}
   85af6:	b083      	sub	sp, #12
   85af8:	af00      	add	r7, sp, #0
   85afa:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   85afc:	687b      	ldr	r3, [r7, #4]
   85afe:	2288      	movs	r2, #136	; 0x88
   85b00:	601a      	str	r2, [r3, #0]
}
   85b02:	bf00      	nop
   85b04:	370c      	adds	r7, #12
   85b06:	46bd      	mov	sp, r7
   85b08:	bc80      	pop	{r7}
   85b0a:	4770      	bx	lr

00085b0c <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   85b0c:	b480      	push	{r7}
   85b0e:	b083      	sub	sp, #12
   85b10:	af00      	add	r7, sp, #0
   85b12:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   85b14:	687b      	ldr	r3, [r7, #4]
   85b16:	2224      	movs	r2, #36	; 0x24
   85b18:	601a      	str	r2, [r3, #0]
}
   85b1a:	bf00      	nop
   85b1c:	370c      	adds	r7, #12
   85b1e:	46bd      	mov	sp, r7
   85b20:	bc80      	pop	{r7}
   85b22:	4770      	bx	lr

00085b24 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   85b24:	b480      	push	{r7}
   85b26:	b083      	sub	sp, #12
   85b28:	af00      	add	r7, sp, #0
   85b2a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   85b2c:	687b      	ldr	r3, [r7, #4]
   85b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
   85b32:	601a      	str	r2, [r3, #0]
}
   85b34:	bf00      	nop
   85b36:	370c      	adds	r7, #12
   85b38:	46bd      	mov	sp, r7
   85b3a:	bc80      	pop	{r7}
   85b3c:	4770      	bx	lr

00085b3e <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
   85b3e:	b480      	push	{r7}
   85b40:	b083      	sub	sp, #12
   85b42:	af00      	add	r7, sp, #0
   85b44:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
   85b46:	687b      	ldr	r3, [r7, #4]
   85b48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   85b4c:	601a      	str	r2, [r3, #0]
}
   85b4e:	bf00      	nop
   85b50:	370c      	adds	r7, #12
   85b52:	46bd      	mov	sp, r7
   85b54:	bc80      	pop	{r7}
   85b56:	4770      	bx	lr

00085b58 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   85b58:	b480      	push	{r7}
   85b5a:	b083      	sub	sp, #12
   85b5c:	af00      	add	r7, sp, #0
   85b5e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   85b60:	687b      	ldr	r3, [r7, #4]
   85b62:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   85b66:	601a      	str	r2, [r3, #0]
}
   85b68:	bf00      	nop
   85b6a:	370c      	adds	r7, #12
   85b6c:	46bd      	mov	sp, r7
   85b6e:	bc80      	pop	{r7}
   85b70:	4770      	bx	lr

00085b72 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
   85b72:	b480      	push	{r7}
   85b74:	b083      	sub	sp, #12
   85b76:	af00      	add	r7, sp, #0
   85b78:	6078      	str	r0, [r7, #4]
   85b7a:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   85b7c:	bf00      	nop
   85b7e:	687b      	ldr	r3, [r7, #4]
   85b80:	695b      	ldr	r3, [r3, #20]
   85b82:	f003 0302 	and.w	r3, r3, #2
   85b86:	2b00      	cmp	r3, #0
   85b88:	d0f9      	beq.n	85b7e <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   85b8a:	683b      	ldr	r3, [r7, #0]
   85b8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   85b90:	687b      	ldr	r3, [r7, #4]
   85b92:	61da      	str	r2, [r3, #28]

	return 0;
   85b94:	2300      	movs	r3, #0
}
   85b96:	4618      	mov	r0, r3
   85b98:	370c      	adds	r7, #12
   85b9a:	46bd      	mov	sp, r7
   85b9c:	bc80      	pop	{r7}
   85b9e:	4770      	bx	lr

00085ba0 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   85ba0:	b480      	push	{r7}
   85ba2:	b083      	sub	sp, #12
   85ba4:	af00      	add	r7, sp, #0
   85ba6:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   85ba8:	687b      	ldr	r3, [r7, #4]
   85baa:	4a04      	ldr	r2, [pc, #16]	; (85bbc <usart_disable_writeprotect+0x1c>)
   85bac:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   85bb0:	bf00      	nop
   85bb2:	370c      	adds	r7, #12
   85bb4:	46bd      	mov	sp, r7
   85bb6:	bc80      	pop	{r7}
   85bb8:	4770      	bx	lr
   85bba:	bf00      	nop
   85bbc:	55534100 	.word	0x55534100

00085bc0 <__libc_init_array>:
   85bc0:	b570      	push	{r4, r5, r6, lr}
   85bc2:	4e0d      	ldr	r6, [pc, #52]	; (85bf8 <__libc_init_array+0x38>)
   85bc4:	4d0d      	ldr	r5, [pc, #52]	; (85bfc <__libc_init_array+0x3c>)
   85bc6:	1b76      	subs	r6, r6, r5
   85bc8:	10b6      	asrs	r6, r6, #2
   85bca:	d006      	beq.n	85bda <__libc_init_array+0x1a>
   85bcc:	2400      	movs	r4, #0
   85bce:	3401      	adds	r4, #1
   85bd0:	f855 3b04 	ldr.w	r3, [r5], #4
   85bd4:	4798      	blx	r3
   85bd6:	42a6      	cmp	r6, r4
   85bd8:	d1f9      	bne.n	85bce <__libc_init_array+0xe>
   85bda:	4e09      	ldr	r6, [pc, #36]	; (85c00 <__libc_init_array+0x40>)
   85bdc:	4d09      	ldr	r5, [pc, #36]	; (85c04 <__libc_init_array+0x44>)
   85bde:	f005 f883 	bl	8ace8 <_init>
   85be2:	1b76      	subs	r6, r6, r5
   85be4:	10b6      	asrs	r6, r6, #2
   85be6:	d006      	beq.n	85bf6 <__libc_init_array+0x36>
   85be8:	2400      	movs	r4, #0
   85bea:	3401      	adds	r4, #1
   85bec:	f855 3b04 	ldr.w	r3, [r5], #4
   85bf0:	4798      	blx	r3
   85bf2:	42a6      	cmp	r6, r4
   85bf4:	d1f9      	bne.n	85bea <__libc_init_array+0x2a>
   85bf6:	bd70      	pop	{r4, r5, r6, pc}
   85bf8:	0008acf4 	.word	0x0008acf4
   85bfc:	0008acf4 	.word	0x0008acf4
   85c00:	0008acfc 	.word	0x0008acfc
   85c04:	0008acf4 	.word	0x0008acf4

00085c08 <memcpy>:
   85c08:	4684      	mov	ip, r0
   85c0a:	ea41 0300 	orr.w	r3, r1, r0
   85c0e:	f013 0303 	ands.w	r3, r3, #3
   85c12:	d149      	bne.n	85ca8 <memcpy+0xa0>
   85c14:	3a40      	subs	r2, #64	; 0x40
   85c16:	d323      	bcc.n	85c60 <memcpy+0x58>
   85c18:	680b      	ldr	r3, [r1, #0]
   85c1a:	6003      	str	r3, [r0, #0]
   85c1c:	684b      	ldr	r3, [r1, #4]
   85c1e:	6043      	str	r3, [r0, #4]
   85c20:	688b      	ldr	r3, [r1, #8]
   85c22:	6083      	str	r3, [r0, #8]
   85c24:	68cb      	ldr	r3, [r1, #12]
   85c26:	60c3      	str	r3, [r0, #12]
   85c28:	690b      	ldr	r3, [r1, #16]
   85c2a:	6103      	str	r3, [r0, #16]
   85c2c:	694b      	ldr	r3, [r1, #20]
   85c2e:	6143      	str	r3, [r0, #20]
   85c30:	698b      	ldr	r3, [r1, #24]
   85c32:	6183      	str	r3, [r0, #24]
   85c34:	69cb      	ldr	r3, [r1, #28]
   85c36:	61c3      	str	r3, [r0, #28]
   85c38:	6a0b      	ldr	r3, [r1, #32]
   85c3a:	6203      	str	r3, [r0, #32]
   85c3c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   85c3e:	6243      	str	r3, [r0, #36]	; 0x24
   85c40:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   85c42:	6283      	str	r3, [r0, #40]	; 0x28
   85c44:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   85c46:	62c3      	str	r3, [r0, #44]	; 0x2c
   85c48:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85c4a:	6303      	str	r3, [r0, #48]	; 0x30
   85c4c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   85c4e:	6343      	str	r3, [r0, #52]	; 0x34
   85c50:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   85c52:	6383      	str	r3, [r0, #56]	; 0x38
   85c54:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   85c56:	63c3      	str	r3, [r0, #60]	; 0x3c
   85c58:	3040      	adds	r0, #64	; 0x40
   85c5a:	3140      	adds	r1, #64	; 0x40
   85c5c:	3a40      	subs	r2, #64	; 0x40
   85c5e:	d2db      	bcs.n	85c18 <memcpy+0x10>
   85c60:	3230      	adds	r2, #48	; 0x30
   85c62:	d30b      	bcc.n	85c7c <memcpy+0x74>
   85c64:	680b      	ldr	r3, [r1, #0]
   85c66:	6003      	str	r3, [r0, #0]
   85c68:	684b      	ldr	r3, [r1, #4]
   85c6a:	6043      	str	r3, [r0, #4]
   85c6c:	688b      	ldr	r3, [r1, #8]
   85c6e:	6083      	str	r3, [r0, #8]
   85c70:	68cb      	ldr	r3, [r1, #12]
   85c72:	60c3      	str	r3, [r0, #12]
   85c74:	3010      	adds	r0, #16
   85c76:	3110      	adds	r1, #16
   85c78:	3a10      	subs	r2, #16
   85c7a:	d2f3      	bcs.n	85c64 <memcpy+0x5c>
   85c7c:	320c      	adds	r2, #12
   85c7e:	d305      	bcc.n	85c8c <memcpy+0x84>
   85c80:	f851 3b04 	ldr.w	r3, [r1], #4
   85c84:	f840 3b04 	str.w	r3, [r0], #4
   85c88:	3a04      	subs	r2, #4
   85c8a:	d2f9      	bcs.n	85c80 <memcpy+0x78>
   85c8c:	3204      	adds	r2, #4
   85c8e:	d008      	beq.n	85ca2 <memcpy+0x9a>
   85c90:	07d2      	lsls	r2, r2, #31
   85c92:	bf1c      	itt	ne
   85c94:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85c98:	f800 3b01 	strbne.w	r3, [r0], #1
   85c9c:	d301      	bcc.n	85ca2 <memcpy+0x9a>
   85c9e:	880b      	ldrh	r3, [r1, #0]
   85ca0:	8003      	strh	r3, [r0, #0]
   85ca2:	4660      	mov	r0, ip
   85ca4:	4770      	bx	lr
   85ca6:	bf00      	nop
   85ca8:	2a08      	cmp	r2, #8
   85caa:	d313      	bcc.n	85cd4 <memcpy+0xcc>
   85cac:	078b      	lsls	r3, r1, #30
   85cae:	d0b1      	beq.n	85c14 <memcpy+0xc>
   85cb0:	f010 0303 	ands.w	r3, r0, #3
   85cb4:	d0ae      	beq.n	85c14 <memcpy+0xc>
   85cb6:	f1c3 0304 	rsb	r3, r3, #4
   85cba:	1ad2      	subs	r2, r2, r3
   85cbc:	07db      	lsls	r3, r3, #31
   85cbe:	bf1c      	itt	ne
   85cc0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85cc4:	f800 3b01 	strbne.w	r3, [r0], #1
   85cc8:	d3a4      	bcc.n	85c14 <memcpy+0xc>
   85cca:	f831 3b02 	ldrh.w	r3, [r1], #2
   85cce:	f820 3b02 	strh.w	r3, [r0], #2
   85cd2:	e79f      	b.n	85c14 <memcpy+0xc>
   85cd4:	3a04      	subs	r2, #4
   85cd6:	d3d9      	bcc.n	85c8c <memcpy+0x84>
   85cd8:	3a01      	subs	r2, #1
   85cda:	f811 3b01 	ldrb.w	r3, [r1], #1
   85cde:	f800 3b01 	strb.w	r3, [r0], #1
   85ce2:	d2f9      	bcs.n	85cd8 <memcpy+0xd0>
   85ce4:	780b      	ldrb	r3, [r1, #0]
   85ce6:	7003      	strb	r3, [r0, #0]
   85ce8:	784b      	ldrb	r3, [r1, #1]
   85cea:	7043      	strb	r3, [r0, #1]
   85cec:	788b      	ldrb	r3, [r1, #2]
   85cee:	7083      	strb	r3, [r0, #2]
   85cf0:	4660      	mov	r0, ip
   85cf2:	4770      	bx	lr

00085cf4 <memset>:
   85cf4:	b4f0      	push	{r4, r5, r6, r7}
   85cf6:	0786      	lsls	r6, r0, #30
   85cf8:	d043      	beq.n	85d82 <memset+0x8e>
   85cfa:	1e54      	subs	r4, r2, #1
   85cfc:	2a00      	cmp	r2, #0
   85cfe:	d03e      	beq.n	85d7e <memset+0x8a>
   85d00:	b2ca      	uxtb	r2, r1
   85d02:	4603      	mov	r3, r0
   85d04:	e002      	b.n	85d0c <memset+0x18>
   85d06:	f114 34ff 	adds.w	r4, r4, #4294967295
   85d0a:	d338      	bcc.n	85d7e <memset+0x8a>
   85d0c:	f803 2b01 	strb.w	r2, [r3], #1
   85d10:	079d      	lsls	r5, r3, #30
   85d12:	d1f8      	bne.n	85d06 <memset+0x12>
   85d14:	2c03      	cmp	r4, #3
   85d16:	d92b      	bls.n	85d70 <memset+0x7c>
   85d18:	b2cd      	uxtb	r5, r1
   85d1a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   85d1e:	2c0f      	cmp	r4, #15
   85d20:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   85d24:	d916      	bls.n	85d54 <memset+0x60>
   85d26:	f1a4 0710 	sub.w	r7, r4, #16
   85d2a:	093f      	lsrs	r7, r7, #4
   85d2c:	f103 0620 	add.w	r6, r3, #32
   85d30:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   85d34:	f103 0210 	add.w	r2, r3, #16
   85d38:	e942 5504 	strd	r5, r5, [r2, #-16]
   85d3c:	e942 5502 	strd	r5, r5, [r2, #-8]
   85d40:	3210      	adds	r2, #16
   85d42:	42b2      	cmp	r2, r6
   85d44:	d1f8      	bne.n	85d38 <memset+0x44>
   85d46:	f004 040f 	and.w	r4, r4, #15
   85d4a:	3701      	adds	r7, #1
   85d4c:	2c03      	cmp	r4, #3
   85d4e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   85d52:	d90d      	bls.n	85d70 <memset+0x7c>
   85d54:	461e      	mov	r6, r3
   85d56:	4622      	mov	r2, r4
   85d58:	3a04      	subs	r2, #4
   85d5a:	2a03      	cmp	r2, #3
   85d5c:	f846 5b04 	str.w	r5, [r6], #4
   85d60:	d8fa      	bhi.n	85d58 <memset+0x64>
   85d62:	1f22      	subs	r2, r4, #4
   85d64:	f022 0203 	bic.w	r2, r2, #3
   85d68:	3204      	adds	r2, #4
   85d6a:	4413      	add	r3, r2
   85d6c:	f004 0403 	and.w	r4, r4, #3
   85d70:	b12c      	cbz	r4, 85d7e <memset+0x8a>
   85d72:	b2c9      	uxtb	r1, r1
   85d74:	441c      	add	r4, r3
   85d76:	f803 1b01 	strb.w	r1, [r3], #1
   85d7a:	429c      	cmp	r4, r3
   85d7c:	d1fb      	bne.n	85d76 <memset+0x82>
   85d7e:	bcf0      	pop	{r4, r5, r6, r7}
   85d80:	4770      	bx	lr
   85d82:	4614      	mov	r4, r2
   85d84:	4603      	mov	r3, r0
   85d86:	e7c5      	b.n	85d14 <memset+0x20>

00085d88 <sprintf>:
   85d88:	b40e      	push	{r1, r2, r3}
   85d8a:	4603      	mov	r3, r0
   85d8c:	b530      	push	{r4, r5, lr}
   85d8e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   85d92:	b09c      	sub	sp, #112	; 0x70
   85d94:	a91f      	add	r1, sp, #124	; 0x7c
   85d96:	f851 2b04 	ldr.w	r2, [r1], #4
   85d9a:	480a      	ldr	r0, [pc, #40]	; (85dc4 <sprintf+0x3c>)
   85d9c:	4d0a      	ldr	r5, [pc, #40]	; (85dc8 <sprintf+0x40>)
   85d9e:	9302      	str	r3, [sp, #8]
   85da0:	9306      	str	r3, [sp, #24]
   85da2:	9101      	str	r1, [sp, #4]
   85da4:	460b      	mov	r3, r1
   85da6:	6800      	ldr	r0, [r0, #0]
   85da8:	a902      	add	r1, sp, #8
   85daa:	9407      	str	r4, [sp, #28]
   85dac:	e9cd 4504 	strd	r4, r5, [sp, #16]
   85db0:	f000 f80c 	bl	85dcc <_svfprintf_r>
   85db4:	2200      	movs	r2, #0
   85db6:	9b02      	ldr	r3, [sp, #8]
   85db8:	701a      	strb	r2, [r3, #0]
   85dba:	b01c      	add	sp, #112	; 0x70
   85dbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   85dc0:	b003      	add	sp, #12
   85dc2:	4770      	bx	lr
   85dc4:	200003b0 	.word	0x200003b0
   85dc8:	ffff0208 	.word	0xffff0208

00085dcc <_svfprintf_r>:
   85dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85dd0:	b0d9      	sub	sp, #356	; 0x164
   85dd2:	460c      	mov	r4, r1
   85dd4:	910a      	str	r1, [sp, #40]	; 0x28
   85dd6:	4693      	mov	fp, r2
   85dd8:	930d      	str	r3, [sp, #52]	; 0x34
   85dda:	9007      	str	r0, [sp, #28]
   85ddc:	f002 fe12 	bl	88a04 <_localeconv_r>
   85de0:	6803      	ldr	r3, [r0, #0]
   85de2:	4618      	mov	r0, r3
   85de4:	931d      	str	r3, [sp, #116]	; 0x74
   85de6:	f003 fe89 	bl	89afc <strlen>
   85dea:	89a3      	ldrh	r3, [r4, #12]
   85dec:	901c      	str	r0, [sp, #112]	; 0x70
   85dee:	061f      	lsls	r7, r3, #24
   85df0:	d503      	bpl.n	85dfa <_svfprintf_r+0x2e>
   85df2:	6923      	ldr	r3, [r4, #16]
   85df4:	2b00      	cmp	r3, #0
   85df6:	f000 8756 	beq.w	86ca6 <_svfprintf_r+0xeda>
   85dfa:	2300      	movs	r3, #0
   85dfc:	465e      	mov	r6, fp
   85dfe:	9318      	str	r3, [sp, #96]	; 0x60
   85e00:	9314      	str	r3, [sp, #80]	; 0x50
   85e02:	9317      	str	r3, [sp, #92]	; 0x5c
   85e04:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
   85e08:	931b      	str	r3, [sp, #108]	; 0x6c
   85e0a:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
   85e0e:	9321      	str	r3, [sp, #132]	; 0x84
   85e10:	931e      	str	r3, [sp, #120]	; 0x78
   85e12:	9309      	str	r3, [sp, #36]	; 0x24
   85e14:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   85e18:	ab2f      	add	r3, sp, #188	; 0xbc
   85e1a:	932c      	str	r3, [sp, #176]	; 0xb0
   85e1c:	4699      	mov	r9, r3
   85e1e:	7833      	ldrb	r3, [r6, #0]
   85e20:	2b00      	cmp	r3, #0
   85e22:	f000 8190 	beq.w	86146 <_svfprintf_r+0x37a>
   85e26:	2b25      	cmp	r3, #37	; 0x25
   85e28:	4634      	mov	r4, r6
   85e2a:	d102      	bne.n	85e32 <_svfprintf_r+0x66>
   85e2c:	e01a      	b.n	85e64 <_svfprintf_r+0x98>
   85e2e:	2b25      	cmp	r3, #37	; 0x25
   85e30:	d003      	beq.n	85e3a <_svfprintf_r+0x6e>
   85e32:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   85e36:	2b00      	cmp	r3, #0
   85e38:	d1f9      	bne.n	85e2e <_svfprintf_r+0x62>
   85e3a:	1ba5      	subs	r5, r4, r6
   85e3c:	b175      	cbz	r5, 85e5c <_svfprintf_r+0x90>
   85e3e:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   85e42:	3301      	adds	r3, #1
   85e44:	442a      	add	r2, r5
   85e46:	2b07      	cmp	r3, #7
   85e48:	e9c9 6500 	strd	r6, r5, [r9]
   85e4c:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
   85e50:	dc7c      	bgt.n	85f4c <_svfprintf_r+0x180>
   85e52:	f109 0908 	add.w	r9, r9, #8
   85e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85e58:	442b      	add	r3, r5
   85e5a:	9309      	str	r3, [sp, #36]	; 0x24
   85e5c:	7823      	ldrb	r3, [r4, #0]
   85e5e:	2b00      	cmp	r3, #0
   85e60:	f000 8171 	beq.w	86146 <_svfprintf_r+0x37a>
   85e64:	2300      	movs	r3, #0
   85e66:	f04f 3aff 	mov.w	sl, #4294967295
   85e6a:	4698      	mov	r8, r3
   85e6c:	252b      	movs	r5, #43	; 0x2b
   85e6e:	7867      	ldrb	r7, [r4, #1]
   85e70:	930b      	str	r3, [sp, #44]	; 0x2c
   85e72:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
   85e76:	f104 0b01 	add.w	fp, r4, #1
   85e7a:	f10b 0b01 	add.w	fp, fp, #1
   85e7e:	f1a7 0320 	sub.w	r3, r7, #32
   85e82:	2b5a      	cmp	r3, #90	; 0x5a
   85e84:	f200 83d0 	bhi.w	86628 <_svfprintf_r+0x85c>
   85e88:	e8df f013 	tbh	[pc, r3, lsl #1]
   85e8c:	03ce038c 	.word	0x03ce038c
   85e90:	038703ce 	.word	0x038703ce
   85e94:	03ce03ce 	.word	0x03ce03ce
   85e98:	036803ce 	.word	0x036803ce
   85e9c:	03ce03ce 	.word	0x03ce03ce
   85ea0:	0356035b 	.word	0x0356035b
   85ea4:	035103ce 	.word	0x035103ce
   85ea8:	03ce0337 	.word	0x03ce0337
   85eac:	00b50186 	.word	0x00b50186
   85eb0:	00b500b5 	.word	0x00b500b5
   85eb4:	00b500b5 	.word	0x00b500b5
   85eb8:	00b500b5 	.word	0x00b500b5
   85ebc:	00b500b5 	.word	0x00b500b5
   85ec0:	03ce03ce 	.word	0x03ce03ce
   85ec4:	03ce03ce 	.word	0x03ce03ce
   85ec8:	03ce03ce 	.word	0x03ce03ce
   85ecc:	02b003ce 	.word	0x02b003ce
   85ed0:	018b03ce 	.word	0x018b03ce
   85ed4:	02b00321 	.word	0x02b00321
   85ed8:	02b002b0 	.word	0x02b002b0
   85edc:	03ce03ce 	.word	0x03ce03ce
   85ee0:	03ce03ce 	.word	0x03ce03ce
   85ee4:	03ce031c 	.word	0x03ce031c
   85ee8:	008403ce 	.word	0x008403ce
   85eec:	03ce03ce 	.word	0x03ce03ce
   85ef0:	02f503ce 	.word	0x02f503ce
   85ef4:	03ad03ce 	.word	0x03ad03ce
   85ef8:	03ce03ce 	.word	0x03ce03ce
   85efc:	03ce0397 	.word	0x03ce0397
   85f00:	03ce03ce 	.word	0x03ce03ce
   85f04:	03ce03ce 	.word	0x03ce03ce
   85f08:	03ce03ce 	.word	0x03ce03ce
   85f0c:	02b003ce 	.word	0x02b003ce
   85f10:	018b03ce 	.word	0x018b03ce
   85f14:	02b000c4 	.word	0x02b000c4
   85f18:	02b002b0 	.word	0x02b002b0
   85f1c:	00c403c1 	.word	0x00c403c1
   85f20:	03ce005b 	.word	0x03ce005b
   85f24:	03ce0169 	.word	0x03ce0169
   85f28:	00860142 	.word	0x00860142
   85f2c:	005b0176 	.word	0x005b0176
   85f30:	02f503ce 	.word	0x02f503ce
   85f34:	0113005d 	.word	0x0113005d
   85f38:	03ce03ce 	.word	0x03ce03ce
   85f3c:	03ce0122 	.word	0x03ce0122
   85f40:	005d      	.short	0x005d
   85f42:	f048 0820 	orr.w	r8, r8, #32
   85f46:	f89b 7000 	ldrb.w	r7, [fp]
   85f4a:	e796      	b.n	85e7a <_svfprintf_r+0xae>
   85f4c:	aa2c      	add	r2, sp, #176	; 0xb0
   85f4e:	990a      	ldr	r1, [sp, #40]	; 0x28
   85f50:	9807      	ldr	r0, [sp, #28]
   85f52:	f003 fe33 	bl	89bbc <__ssprint_r>
   85f56:	b980      	cbnz	r0, 85f7a <_svfprintf_r+0x1ae>
   85f58:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   85f5c:	e77b      	b.n	85e56 <_svfprintf_r+0x8a>
   85f5e:	aa2c      	add	r2, sp, #176	; 0xb0
   85f60:	4659      	mov	r1, fp
   85f62:	4650      	mov	r0, sl
   85f64:	f003 fe2a 	bl	89bbc <__ssprint_r>
   85f68:	2800      	cmp	r0, #0
   85f6a:	f001 80c3 	beq.w	870f4 <_svfprintf_r+0x1328>
   85f6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85f70:	b11b      	cbz	r3, 85f7a <_svfprintf_r+0x1ae>
   85f72:	9910      	ldr	r1, [sp, #64]	; 0x40
   85f74:	9807      	ldr	r0, [sp, #28]
   85f76:	f002 fc51 	bl	8881c <_free_r>
   85f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85f7c:	899b      	ldrh	r3, [r3, #12]
   85f7e:	f013 0f40 	tst.w	r3, #64	; 0x40
   85f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85f84:	bf18      	it	ne
   85f86:	f04f 33ff 	movne.w	r3, #4294967295
   85f8a:	9309      	str	r3, [sp, #36]	; 0x24
   85f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
   85f8e:	b059      	add	sp, #356	; 0x164
   85f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85f94:	f048 0810 	orr.w	r8, r8, #16
   85f98:	f018 0f20 	tst.w	r8, #32
   85f9c:	f000 856e 	beq.w	86a7c <_svfprintf_r+0xcb0>
   85fa0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   85fa2:	3407      	adds	r4, #7
   85fa4:	f024 0307 	bic.w	r3, r4, #7
   85fa8:	f103 0208 	add.w	r2, r3, #8
   85fac:	920d      	str	r2, [sp, #52]	; 0x34
   85fae:	e9d3 4500 	ldrd	r4, r5, [r3]
   85fb2:	2200      	movs	r2, #0
   85fb4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   85fb8:	2100      	movs	r1, #0
   85fba:	f1ba 3fff 	cmp.w	sl, #4294967295
   85fbe:	f88d 1093 	strb.w	r1, [sp, #147]	; 0x93
   85fc2:	a958      	add	r1, sp, #352	; 0x160
   85fc4:	9108      	str	r1, [sp, #32]
   85fc6:	f000 846f 	beq.w	868a8 <_svfprintf_r+0xadc>
   85fca:	ea54 0105 	orrs.w	r1, r4, r5
   85fce:	f023 0880 	bic.w	r8, r3, #128	; 0x80
   85fd2:	d145      	bne.n	86060 <_svfprintf_r+0x294>
   85fd4:	f1ba 0f00 	cmp.w	sl, #0
   85fd8:	f040 8792 	bne.w	86f00 <_svfprintf_r+0x1134>
   85fdc:	2a00      	cmp	r2, #0
   85fde:	f040 851b 	bne.w	86a18 <_svfprintf_r+0xc4c>
   85fe2:	f013 0301 	ands.w	r3, r3, #1
   85fe6:	930c      	str	r3, [sp, #48]	; 0x30
   85fe8:	f000 857a 	beq.w	86ae0 <_svfprintf_r+0xd14>
   85fec:	2330      	movs	r3, #48	; 0x30
   85fee:	ae58      	add	r6, sp, #352	; 0x160
   85ff0:	f806 3d01 	strb.w	r3, [r6, #-1]!
   85ff4:	e349      	b.n	8668a <_svfprintf_r+0x8be>
   85ff6:	2200      	movs	r2, #0
   85ff8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
   85ffc:	f81b 7b01 	ldrb.w	r7, [fp], #1
   86000:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   86004:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   86008:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
   8600c:	2b09      	cmp	r3, #9
   8600e:	d9f5      	bls.n	85ffc <_svfprintf_r+0x230>
   86010:	920b      	str	r2, [sp, #44]	; 0x2c
   86012:	e734      	b.n	85e7e <_svfprintf_r+0xb2>
   86014:	4643      	mov	r3, r8
   86016:	069e      	lsls	r6, r3, #26
   86018:	f140 825e 	bpl.w	864d8 <_svfprintf_r+0x70c>
   8601c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   8601e:	3407      	adds	r4, #7
   86020:	f024 0407 	bic.w	r4, r4, #7
   86024:	e9d4 0100 	ldrd	r0, r1, [r4]
   86028:	f104 0208 	add.w	r2, r4, #8
   8602c:	460d      	mov	r5, r1
   8602e:	4604      	mov	r4, r0
   86030:	920d      	str	r2, [sp, #52]	; 0x34
   86032:	2800      	cmp	r0, #0
   86034:	f171 0200 	sbcs.w	r2, r1, #0
   86038:	da05      	bge.n	86046 <_svfprintf_r+0x27a>
   8603a:	222d      	movs	r2, #45	; 0x2d
   8603c:	4264      	negs	r4, r4
   8603e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   86042:	f88d 2093 	strb.w	r2, [sp, #147]	; 0x93
   86046:	aa58      	add	r2, sp, #352	; 0x160
   86048:	f1ba 3fff 	cmp.w	sl, #4294967295
   8604c:	9208      	str	r2, [sp, #32]
   8604e:	f000 86f4 	beq.w	86e3a <_svfprintf_r+0x106e>
   86052:	ea54 0105 	orrs.w	r1, r4, r5
   86056:	f04f 0201 	mov.w	r2, #1
   8605a:	f023 0880 	bic.w	r8, r3, #128	; 0x80
   8605e:	d0b9      	beq.n	85fd4 <_svfprintf_r+0x208>
   86060:	2a01      	cmp	r2, #1
   86062:	f000 8425 	beq.w	868b0 <_svfprintf_r+0xae4>
   86066:	2a02      	cmp	r2, #2
   86068:	f000 82fc 	beq.w	86664 <_svfprintf_r+0x898>
   8606c:	a958      	add	r1, sp, #352	; 0x160
   8606e:	e000      	b.n	86072 <_svfprintf_r+0x2a6>
   86070:	4631      	mov	r1, r6
   86072:	08e2      	lsrs	r2, r4, #3
   86074:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   86078:	08e8      	lsrs	r0, r5, #3
   8607a:	f004 0307 	and.w	r3, r4, #7
   8607e:	4605      	mov	r5, r0
   86080:	4614      	mov	r4, r2
   86082:	3330      	adds	r3, #48	; 0x30
   86084:	ea54 0205 	orrs.w	r2, r4, r5
   86088:	f801 3c01 	strb.w	r3, [r1, #-1]
   8608c:	f101 36ff 	add.w	r6, r1, #4294967295
   86090:	d1ee      	bne.n	86070 <_svfprintf_r+0x2a4>
   86092:	f018 0f01 	tst.w	r8, #1
   86096:	f000 82f5 	beq.w	86684 <_svfprintf_r+0x8b8>
   8609a:	2b30      	cmp	r3, #48	; 0x30
   8609c:	f000 82f2 	beq.w	86684 <_svfprintf_r+0x8b8>
   860a0:	2330      	movs	r3, #48	; 0x30
   860a2:	9a08      	ldr	r2, [sp, #32]
   860a4:	3902      	subs	r1, #2
   860a6:	1a52      	subs	r2, r2, r1
   860a8:	f806 3c01 	strb.w	r3, [r6, #-1]
   860ac:	920c      	str	r2, [sp, #48]	; 0x30
   860ae:	460e      	mov	r6, r1
   860b0:	e2eb      	b.n	8668a <_svfprintf_r+0x8be>
   860b2:	4643      	mov	r3, r8
   860b4:	069e      	lsls	r6, r3, #26
   860b6:	f140 829b 	bpl.w	865f0 <_svfprintf_r+0x824>
   860ba:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   860bc:	3407      	adds	r4, #7
   860be:	f024 0207 	bic.w	r2, r4, #7
   860c2:	f102 0108 	add.w	r1, r2, #8
   860c6:	e9d2 4500 	ldrd	r4, r5, [r2]
   860ca:	910d      	str	r1, [sp, #52]	; 0x34
   860cc:	2201      	movs	r2, #1
   860ce:	e773      	b.n	85fb8 <_svfprintf_r+0x1ec>
   860d0:	4ba4      	ldr	r3, [pc, #656]	; (86364 <_svfprintf_r+0x598>)
   860d2:	f018 0f20 	tst.w	r8, #32
   860d6:	931b      	str	r3, [sp, #108]	; 0x6c
   860d8:	f000 8275 	beq.w	865c6 <_svfprintf_r+0x7fa>
   860dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   860de:	3407      	adds	r4, #7
   860e0:	f024 0307 	bic.w	r3, r4, #7
   860e4:	f103 0208 	add.w	r2, r3, #8
   860e8:	920d      	str	r2, [sp, #52]	; 0x34
   860ea:	e9d3 4500 	ldrd	r4, r5, [r3]
   860ee:	f018 0f01 	tst.w	r8, #1
   860f2:	d009      	beq.n	86108 <_svfprintf_r+0x33c>
   860f4:	ea54 0305 	orrs.w	r3, r4, r5
   860f8:	d006      	beq.n	86108 <_svfprintf_r+0x33c>
   860fa:	2330      	movs	r3, #48	; 0x30
   860fc:	f88d 7095 	strb.w	r7, [sp, #149]	; 0x95
   86100:	f048 0802 	orr.w	r8, r8, #2
   86104:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
   86108:	2202      	movs	r2, #2
   8610a:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   8610e:	e753      	b.n	85fb8 <_svfprintf_r+0x1ec>
   86110:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   86112:	f018 0f20 	tst.w	r8, #32
   86116:	f852 3b04 	ldr.w	r3, [r2], #4
   8611a:	920d      	str	r2, [sp, #52]	; 0x34
   8611c:	f040 8507 	bne.w	86b2e <_svfprintf_r+0xd62>
   86120:	f018 0f10 	tst.w	r8, #16
   86124:	f040 8740 	bne.w	86fa8 <_svfprintf_r+0x11dc>
   86128:	f018 0f40 	tst.w	r8, #64	; 0x40
   8612c:	f040 87f1 	bne.w	87112 <_svfprintf_r+0x1346>
   86130:	f418 7f00 	tst.w	r8, #512	; 0x200
   86134:	f000 8738 	beq.w	86fa8 <_svfprintf_r+0x11dc>
   86138:	465e      	mov	r6, fp
   8613a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8613c:	701a      	strb	r2, [r3, #0]
   8613e:	7833      	ldrb	r3, [r6, #0]
   86140:	2b00      	cmp	r3, #0
   86142:	f47f ae70 	bne.w	85e26 <_svfprintf_r+0x5a>
   86146:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   86148:	2b00      	cmp	r3, #0
   8614a:	f43f af16 	beq.w	85f7a <_svfprintf_r+0x1ae>
   8614e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86150:	9807      	ldr	r0, [sp, #28]
   86152:	aa2c      	add	r2, sp, #176	; 0xb0
   86154:	4621      	mov	r1, r4
   86156:	f003 fd31 	bl	89bbc <__ssprint_r>
   8615a:	89a3      	ldrh	r3, [r4, #12]
   8615c:	e70f      	b.n	85f7e <_svfprintf_r+0x1b2>
   8615e:	f89b 7000 	ldrb.w	r7, [fp]
   86162:	2f6c      	cmp	r7, #108	; 0x6c
   86164:	bf03      	ittte	eq
   86166:	f89b 7001 	ldrbeq.w	r7, [fp, #1]
   8616a:	f048 0820 	orreq.w	r8, r8, #32
   8616e:	f10b 0b01 	addeq.w	fp, fp, #1
   86172:	f048 0810 	orrne.w	r8, r8, #16
   86176:	e680      	b.n	85e7a <_svfprintf_r+0xae>
   86178:	f647 0230 	movw	r2, #30768	; 0x7830
   8617c:	990d      	ldr	r1, [sp, #52]	; 0x34
   8617e:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
   86182:	1d0a      	adds	r2, r1, #4
   86184:	920d      	str	r2, [sp, #52]	; 0x34
   86186:	4a77      	ldr	r2, [pc, #476]	; (86364 <_svfprintf_r+0x598>)
   86188:	680c      	ldr	r4, [r1, #0]
   8618a:	921b      	str	r2, [sp, #108]	; 0x6c
   8618c:	f048 0302 	orr.w	r3, r8, #2
   86190:	2500      	movs	r5, #0
   86192:	2202      	movs	r2, #2
   86194:	2778      	movs	r7, #120	; 0x78
   86196:	e70f      	b.n	85fb8 <_svfprintf_r+0x1ec>
   86198:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   8619c:	f89b 7000 	ldrb.w	r7, [fp]
   861a0:	e66b      	b.n	85e7a <_svfprintf_r+0xae>
   861a2:	2300      	movs	r3, #0
   861a4:	2001      	movs	r0, #1
   861a6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   861a8:	461a      	mov	r2, r3
   861aa:	6821      	ldr	r1, [r4, #0]
   861ac:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
   861b0:	9310      	str	r3, [sp, #64]	; 0x40
   861b2:	469a      	mov	sl, r3
   861b4:	9313      	str	r3, [sp, #76]	; 0x4c
   861b6:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   861ba:	1d23      	adds	r3, r4, #4
   861bc:	9008      	str	r0, [sp, #32]
   861be:	900c      	str	r0, [sp, #48]	; 0x30
   861c0:	f88d 10fc 	strb.w	r1, [sp, #252]	; 0xfc
   861c4:	930d      	str	r3, [sp, #52]	; 0x34
   861c6:	ae3f      	add	r6, sp, #252	; 0xfc
   861c8:	f018 0302 	ands.w	r3, r8, #2
   861cc:	930e      	str	r3, [sp, #56]	; 0x38
   861ce:	d002      	beq.n	861d6 <_svfprintf_r+0x40a>
   861d0:	9b08      	ldr	r3, [sp, #32]
   861d2:	3302      	adds	r3, #2
   861d4:	9308      	str	r3, [sp, #32]
   861d6:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   861da:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
   861dc:	9311      	str	r3, [sp, #68]	; 0x44
   861de:	d13f      	bne.n	86260 <_svfprintf_r+0x494>
   861e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   861e2:	9908      	ldr	r1, [sp, #32]
   861e4:	1a5d      	subs	r5, r3, r1
   861e6:	2d00      	cmp	r5, #0
   861e8:	dd3a      	ble.n	86260 <_svfprintf_r+0x494>
   861ea:	2d10      	cmp	r5, #16
   861ec:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   861ee:	dd29      	ble.n	86244 <_svfprintf_r+0x478>
   861f0:	4649      	mov	r1, r9
   861f2:	4620      	mov	r0, r4
   861f4:	46b1      	mov	r9, r6
   861f6:	2310      	movs	r3, #16
   861f8:	9722      	str	r7, [sp, #136]	; 0x88
   861fa:	9c07      	ldr	r4, [sp, #28]
   861fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   861fe:	e004      	b.n	8620a <_svfprintf_r+0x43e>
   86200:	3d10      	subs	r5, #16
   86202:	2d10      	cmp	r5, #16
   86204:	f101 0108 	add.w	r1, r1, #8
   86208:	dd18      	ble.n	8623c <_svfprintf_r+0x470>
   8620a:	3201      	adds	r2, #1
   8620c:	4f56      	ldr	r7, [pc, #344]	; (86368 <_svfprintf_r+0x59c>)
   8620e:	3010      	adds	r0, #16
   86210:	2a07      	cmp	r2, #7
   86212:	e9cd 202d 	strd	r2, r0, [sp, #180]	; 0xb4
   86216:	e9c1 7300 	strd	r7, r3, [r1]
   8621a:	ddf1      	ble.n	86200 <_svfprintf_r+0x434>
   8621c:	aa2c      	add	r2, sp, #176	; 0xb0
   8621e:	4631      	mov	r1, r6
   86220:	4620      	mov	r0, r4
   86222:	9312      	str	r3, [sp, #72]	; 0x48
   86224:	f003 fcca 	bl	89bbc <__ssprint_r>
   86228:	2800      	cmp	r0, #0
   8622a:	f47f aea0 	bne.w	85f6e <_svfprintf_r+0x1a2>
   8622e:	e9dd 202d 	ldrd	r2, r0, [sp, #180]	; 0xb4
   86232:	3d10      	subs	r5, #16
   86234:	2d10      	cmp	r5, #16
   86236:	a92f      	add	r1, sp, #188	; 0xbc
   86238:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8623a:	dce6      	bgt.n	8620a <_svfprintf_r+0x43e>
   8623c:	464e      	mov	r6, r9
   8623e:	4604      	mov	r4, r0
   86240:	4689      	mov	r9, r1
   86242:	9f22      	ldr	r7, [sp, #136]	; 0x88
   86244:	3201      	adds	r2, #1
   86246:	4b48      	ldr	r3, [pc, #288]	; (86368 <_svfprintf_r+0x59c>)
   86248:	442c      	add	r4, r5
   8624a:	2a07      	cmp	r2, #7
   8624c:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
   86250:	e9c9 3500 	strd	r3, r5, [r9]
   86254:	f300 8567 	bgt.w	86d26 <_svfprintf_r+0xf5a>
   86258:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
   8625c:	f109 0908 	add.w	r9, r9, #8
   86260:	b172      	cbz	r2, 86280 <_svfprintf_r+0x4b4>
   86262:	2001      	movs	r0, #1
   86264:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   86266:	4404      	add	r4, r0
   86268:	4402      	add	r2, r0
   8626a:	f10d 0193 	add.w	r1, sp, #147	; 0x93
   8626e:	2a07      	cmp	r2, #7
   86270:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
   86274:	e9c9 1000 	strd	r1, r0, [r9]
   86278:	f300 8326 	bgt.w	868c8 <_svfprintf_r+0xafc>
   8627c:	f109 0908 	add.w	r9, r9, #8
   86280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86282:	b16b      	cbz	r3, 862a0 <_svfprintf_r+0x4d4>
   86284:	2102      	movs	r1, #2
   86286:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   86288:	440c      	add	r4, r1
   8628a:	3301      	adds	r3, #1
   8628c:	aa25      	add	r2, sp, #148	; 0x94
   8628e:	2b07      	cmp	r3, #7
   86290:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
   86294:	e9c9 2100 	strd	r2, r1, [r9]
   86298:	f300 8322 	bgt.w	868e0 <_svfprintf_r+0xb14>
   8629c:	f109 0908 	add.w	r9, r9, #8
   862a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   862a2:	2b80      	cmp	r3, #128	; 0x80
   862a4:	f000 8259 	beq.w	8675a <_svfprintf_r+0x98e>
   862a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   862aa:	ebaa 0503 	sub.w	r5, sl, r3
   862ae:	2d00      	cmp	r5, #0
   862b0:	dd36      	ble.n	86320 <_svfprintf_r+0x554>
   862b2:	2d10      	cmp	r5, #16
   862b4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   862b6:	f340 865b 	ble.w	86f70 <_svfprintf_r+0x11a4>
   862ba:	4b2c      	ldr	r3, [pc, #176]	; (8636c <_svfprintf_r+0x5a0>)
   862bc:	4649      	mov	r1, r9
   862be:	4620      	mov	r0, r4
   862c0:	46b1      	mov	r9, r6
   862c2:	f04f 0a10 	mov.w	sl, #16
   862c6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   862c8:	461c      	mov	r4, r3
   862ca:	e004      	b.n	862d6 <_svfprintf_r+0x50a>
   862cc:	3d10      	subs	r5, #16
   862ce:	2d10      	cmp	r5, #16
   862d0:	f101 0108 	add.w	r1, r1, #8
   862d4:	dd15      	ble.n	86302 <_svfprintf_r+0x536>
   862d6:	3201      	adds	r2, #1
   862d8:	3010      	adds	r0, #16
   862da:	2a07      	cmp	r2, #7
   862dc:	e9cd 202d 	strd	r2, r0, [sp, #180]	; 0xb4
   862e0:	e9c1 4a00 	strd	r4, sl, [r1]
   862e4:	ddf2      	ble.n	862cc <_svfprintf_r+0x500>
   862e6:	aa2c      	add	r2, sp, #176	; 0xb0
   862e8:	4631      	mov	r1, r6
   862ea:	9807      	ldr	r0, [sp, #28]
   862ec:	f003 fc66 	bl	89bbc <__ssprint_r>
   862f0:	2800      	cmp	r0, #0
   862f2:	f47f ae3c 	bne.w	85f6e <_svfprintf_r+0x1a2>
   862f6:	e9dd 202d 	ldrd	r2, r0, [sp, #180]	; 0xb4
   862fa:	3d10      	subs	r5, #16
   862fc:	2d10      	cmp	r5, #16
   862fe:	a92f      	add	r1, sp, #188	; 0xbc
   86300:	dce9      	bgt.n	862d6 <_svfprintf_r+0x50a>
   86302:	464e      	mov	r6, r9
   86304:	4623      	mov	r3, r4
   86306:	4689      	mov	r9, r1
   86308:	4604      	mov	r4, r0
   8630a:	3201      	adds	r2, #1
   8630c:	442c      	add	r4, r5
   8630e:	2a07      	cmp	r2, #7
   86310:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
   86314:	e9c9 3500 	strd	r3, r5, [r9]
   86318:	f300 8326 	bgt.w	86968 <_svfprintf_r+0xb9c>
   8631c:	f109 0908 	add.w	r9, r9, #8
   86320:	f418 7f80 	tst.w	r8, #256	; 0x100
   86324:	f040 81be 	bne.w	866a4 <_svfprintf_r+0x8d8>
   86328:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   8632a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8632c:	3301      	adds	r3, #1
   8632e:	4414      	add	r4, r2
   86330:	2b07      	cmp	r3, #7
   86332:	942e      	str	r4, [sp, #184]	; 0xb8
   86334:	e9c9 6200 	strd	r6, r2, [r9]
   86338:	932d      	str	r3, [sp, #180]	; 0xb4
   8633a:	f300 8309 	bgt.w	86950 <_svfprintf_r+0xb84>
   8633e:	f109 0908 	add.w	r9, r9, #8
   86342:	f018 0f04 	tst.w	r8, #4
   86346:	d03a      	beq.n	863be <_svfprintf_r+0x5f2>
   86348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8634a:	9a08      	ldr	r2, [sp, #32]
   8634c:	1a9d      	subs	r5, r3, r2
   8634e:	2d00      	cmp	r5, #0
   86350:	dd35      	ble.n	863be <_svfprintf_r+0x5f2>
   86352:	2d10      	cmp	r5, #16
   86354:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   86356:	dd28      	ble.n	863aa <_svfprintf_r+0x5de>
   86358:	2610      	movs	r6, #16
   8635a:	9f07      	ldr	r7, [sp, #28]
   8635c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   86360:	e00b      	b.n	8637a <_svfprintf_r+0x5ae>
   86362:	bf00      	nop
   86364:	0008aa74 	.word	0x0008aa74
   86368:	0008aaa8 	.word	0x0008aaa8
   8636c:	0008aab8 	.word	0x0008aab8
   86370:	3d10      	subs	r5, #16
   86372:	2d10      	cmp	r5, #16
   86374:	f109 0908 	add.w	r9, r9, #8
   86378:	dd17      	ble.n	863aa <_svfprintf_r+0x5de>
   8637a:	3301      	adds	r3, #1
   8637c:	4ab4      	ldr	r2, [pc, #720]	; (86650 <_svfprintf_r+0x884>)
   8637e:	3410      	adds	r4, #16
   86380:	2b07      	cmp	r3, #7
   86382:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
   86386:	e9c9 2600 	strd	r2, r6, [r9]
   8638a:	ddf1      	ble.n	86370 <_svfprintf_r+0x5a4>
   8638c:	aa2c      	add	r2, sp, #176	; 0xb0
   8638e:	4641      	mov	r1, r8
   86390:	4638      	mov	r0, r7
   86392:	f003 fc13 	bl	89bbc <__ssprint_r>
   86396:	2800      	cmp	r0, #0
   86398:	f47f ade9 	bne.w	85f6e <_svfprintf_r+0x1a2>
   8639c:	e9dd 342d 	ldrd	r3, r4, [sp, #180]	; 0xb4
   863a0:	3d10      	subs	r5, #16
   863a2:	2d10      	cmp	r5, #16
   863a4:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   863a8:	dce7      	bgt.n	8637a <_svfprintf_r+0x5ae>
   863aa:	3301      	adds	r3, #1
   863ac:	4aa8      	ldr	r2, [pc, #672]	; (86650 <_svfprintf_r+0x884>)
   863ae:	442c      	add	r4, r5
   863b0:	2b07      	cmp	r3, #7
   863b2:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
   863b6:	e9c9 2500 	strd	r2, r5, [r9]
   863ba:	f300 8387 	bgt.w	86acc <_svfprintf_r+0xd00>
   863be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   863c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   863c2:	9908      	ldr	r1, [sp, #32]
   863c4:	428a      	cmp	r2, r1
   863c6:	bfac      	ite	ge
   863c8:	189b      	addge	r3, r3, r2
   863ca:	185b      	addlt	r3, r3, r1
   863cc:	9309      	str	r3, [sp, #36]	; 0x24
   863ce:	2c00      	cmp	r4, #0
   863d0:	f040 81ff 	bne.w	867d2 <_svfprintf_r+0xa06>
   863d4:	2300      	movs	r3, #0
   863d6:	932d      	str	r3, [sp, #180]	; 0xb4
   863d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   863da:	b11b      	cbz	r3, 863e4 <_svfprintf_r+0x618>
   863dc:	9910      	ldr	r1, [sp, #64]	; 0x40
   863de:	9807      	ldr	r0, [sp, #28]
   863e0:	f002 fa1c 	bl	8881c <_free_r>
   863e4:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   863e8:	465e      	mov	r6, fp
   863ea:	e6a8      	b.n	8613e <_svfprintf_r+0x372>
   863ec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   863ee:	3407      	adds	r4, #7
   863f0:	f024 0c07 	bic.w	ip, r4, #7
   863f4:	e9dc 2300 	ldrd	r2, r3, [ip]
   863f8:	9317      	str	r3, [sp, #92]	; 0x5c
   863fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   863fe:	9218      	str	r2, [sp, #96]	; 0x60
   86400:	4615      	mov	r5, r2
   86402:	4610      	mov	r0, r2
   86404:	9308      	str	r3, [sp, #32]
   86406:	4619      	mov	r1, r3
   86408:	f10c 0408 	add.w	r4, ip, #8
   8640c:	f04f 32ff 	mov.w	r2, #4294967295
   86410:	4b90      	ldr	r3, [pc, #576]	; (86654 <_svfprintf_r+0x888>)
   86412:	940d      	str	r4, [sp, #52]	; 0x34
   86414:	f004 f944 	bl	8a6a0 <__aeabi_dcmpun>
   86418:	2800      	cmp	r0, #0
   8641a:	f040 8390 	bne.w	86b3e <_svfprintf_r+0xd72>
   8641e:	4628      	mov	r0, r5
   86420:	9908      	ldr	r1, [sp, #32]
   86422:	f04f 32ff 	mov.w	r2, #4294967295
   86426:	4b8b      	ldr	r3, [pc, #556]	; (86654 <_svfprintf_r+0x888>)
   86428:	f004 f91c 	bl	8a664 <__aeabi_dcmple>
   8642c:	2800      	cmp	r0, #0
   8642e:	f040 8386 	bne.w	86b3e <_svfprintf_r+0xd72>
   86432:	e9dd 0218 	ldrd	r0, r2, [sp, #96]	; 0x60
   86436:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   86438:	9917      	ldr	r1, [sp, #92]	; 0x5c
   8643a:	f004 f909 	bl	8a650 <__aeabi_dcmplt>
   8643e:	2800      	cmp	r0, #0
   86440:	f040 876c 	bne.w	8731c <_svfprintf_r+0x1550>
   86444:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
   86448:	2003      	movs	r0, #3
   8644a:	2100      	movs	r1, #0
   8644c:	4e82      	ldr	r6, [pc, #520]	; (86658 <_svfprintf_r+0x88c>)
   8644e:	4b83      	ldr	r3, [pc, #524]	; (8665c <_svfprintf_r+0x890>)
   86450:	9008      	str	r0, [sp, #32]
   86452:	9110      	str	r1, [sp, #64]	; 0x40
   86454:	468a      	mov	sl, r1
   86456:	2f47      	cmp	r7, #71	; 0x47
   86458:	bfd8      	it	le
   8645a:	461e      	movle	r6, r3
   8645c:	e9cd 1115 	strd	r1, r1, [sp, #84]	; 0x54
   86460:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   86464:	900c      	str	r0, [sp, #48]	; 0x30
   86466:	9113      	str	r1, [sp, #76]	; 0x4c
   86468:	2a00      	cmp	r2, #0
   8646a:	f43f aead 	beq.w	861c8 <_svfprintf_r+0x3fc>
   8646e:	9b08      	ldr	r3, [sp, #32]
   86470:	3301      	adds	r3, #1
   86472:	9308      	str	r3, [sp, #32]
   86474:	e6a8      	b.n	861c8 <_svfprintf_r+0x3fc>
   86476:	2500      	movs	r5, #0
   86478:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8647a:	f88d 5093 	strb.w	r5, [sp, #147]	; 0x93
   8647e:	681e      	ldr	r6, [r3, #0]
   86480:	1d1c      	adds	r4, r3, #4
   86482:	2e00      	cmp	r6, #0
   86484:	f000 843f 	beq.w	86d06 <_svfprintf_r+0xf3a>
   86488:	f1ba 3fff 	cmp.w	sl, #4294967295
   8648c:	f000 862b 	beq.w	870e6 <_svfprintf_r+0x131a>
   86490:	4652      	mov	r2, sl
   86492:	4629      	mov	r1, r5
   86494:	4630      	mov	r0, r6
   86496:	f002 fd6f 	bl	88f78 <memchr>
   8649a:	9010      	str	r0, [sp, #64]	; 0x40
   8649c:	2800      	cmp	r0, #0
   8649e:	f000 8770 	beq.w	87382 <_svfprintf_r+0x15b6>
   864a2:	46aa      	mov	sl, r5
   864a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   864a6:	1b9b      	subs	r3, r3, r6
   864a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   864ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   864b0:	9308      	str	r3, [sp, #32]
   864b2:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
   864b6:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
   864ba:	e9cd aa15 	strd	sl, sl, [sp, #84]	; 0x54
   864be:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
   864c2:	e7d1      	b.n	86468 <_svfprintf_r+0x69c>
   864c4:	f048 0808 	orr.w	r8, r8, #8
   864c8:	f89b 7000 	ldrb.w	r7, [fp]
   864cc:	e4d5      	b.n	85e7a <_svfprintf_r+0xae>
   864ce:	f048 0310 	orr.w	r3, r8, #16
   864d2:	069e      	lsls	r6, r3, #26
   864d4:	f53f ada2 	bmi.w	8601c <_svfprintf_r+0x250>
   864d8:	990d      	ldr	r1, [sp, #52]	; 0x34
   864da:	06dd      	lsls	r5, r3, #27
   864dc:	f101 0204 	add.w	r2, r1, #4
   864e0:	f100 830c 	bmi.w	86afc <_svfprintf_r+0xd30>
   864e4:	065c      	lsls	r4, r3, #25
   864e6:	990d      	ldr	r1, [sp, #52]	; 0x34
   864e8:	f140 8305 	bpl.w	86af6 <_svfprintf_r+0xd2a>
   864ec:	f9b1 4000 	ldrsh.w	r4, [r1]
   864f0:	920d      	str	r2, [sp, #52]	; 0x34
   864f2:	17e5      	asrs	r5, r4, #31
   864f4:	4620      	mov	r0, r4
   864f6:	4629      	mov	r1, r5
   864f8:	e59b      	b.n	86032 <_svfprintf_r+0x266>
   864fa:	f89b 7000 	ldrb.w	r7, [fp]
   864fe:	f10b 0201 	add.w	r2, fp, #1
   86502:	2f2a      	cmp	r7, #42	; 0x2a
   86504:	f001 8127 	beq.w	87756 <_svfprintf_r+0x198a>
   86508:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
   8650c:	2b09      	cmp	r3, #9
   8650e:	4693      	mov	fp, r2
   86510:	f04f 0a00 	mov.w	sl, #0
   86514:	f63f acb3 	bhi.w	85e7e <_svfprintf_r+0xb2>
   86518:	f81b 7b01 	ldrb.w	r7, [fp], #1
   8651c:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
   86520:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
   86524:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
   86528:	2b09      	cmp	r3, #9
   8652a:	d9f5      	bls.n	86518 <_svfprintf_r+0x74c>
   8652c:	e4a7      	b.n	85e7e <_svfprintf_r+0xb2>
   8652e:	f89b 7000 	ldrb.w	r7, [fp]
   86532:	f048 0804 	orr.w	r8, r8, #4
   86536:	e4a0      	b.n	85e7a <_svfprintf_r+0xae>
   86538:	f88d 5093 	strb.w	r5, [sp, #147]	; 0x93
   8653c:	f89b 7000 	ldrb.w	r7, [fp]
   86540:	e49b      	b.n	85e7a <_svfprintf_r+0xae>
   86542:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86544:	f89b 7000 	ldrb.w	r7, [fp]
   86548:	681a      	ldr	r2, [r3, #0]
   8654a:	3304      	adds	r3, #4
   8654c:	2a00      	cmp	r2, #0
   8654e:	920b      	str	r2, [sp, #44]	; 0x2c
   86550:	930d      	str	r3, [sp, #52]	; 0x34
   86552:	f6bf ac92 	bge.w	85e7a <_svfprintf_r+0xae>
   86556:	4253      	negs	r3, r2
   86558:	930b      	str	r3, [sp, #44]	; 0x2c
   8655a:	e7ea      	b.n	86532 <_svfprintf_r+0x766>
   8655c:	9f07      	ldr	r7, [sp, #28]
   8655e:	4638      	mov	r0, r7
   86560:	f002 fa50 	bl	88a04 <_localeconv_r>
   86564:	6843      	ldr	r3, [r0, #4]
   86566:	4618      	mov	r0, r3
   86568:	931e      	str	r3, [sp, #120]	; 0x78
   8656a:	f003 fac7 	bl	89afc <strlen>
   8656e:	9021      	str	r0, [sp, #132]	; 0x84
   86570:	4604      	mov	r4, r0
   86572:	4638      	mov	r0, r7
   86574:	f002 fa46 	bl	88a04 <_localeconv_r>
   86578:	6883      	ldr	r3, [r0, #8]
   8657a:	9320      	str	r3, [sp, #128]	; 0x80
   8657c:	2c00      	cmp	r4, #0
   8657e:	f43f ace2 	beq.w	85f46 <_svfprintf_r+0x17a>
   86582:	f89b 7000 	ldrb.w	r7, [fp]
   86586:	2b00      	cmp	r3, #0
   86588:	f43f ac77 	beq.w	85e7a <_svfprintf_r+0xae>
   8658c:	781b      	ldrb	r3, [r3, #0]
   8658e:	2b00      	cmp	r3, #0
   86590:	f43f ac73 	beq.w	85e7a <_svfprintf_r+0xae>
   86594:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
   86598:	e46f      	b.n	85e7a <_svfprintf_r+0xae>
   8659a:	f048 0801 	orr.w	r8, r8, #1
   8659e:	f89b 7000 	ldrb.w	r7, [fp]
   865a2:	e46a      	b.n	85e7a <_svfprintf_r+0xae>
   865a4:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   865a8:	f89b 7000 	ldrb.w	r7, [fp]
   865ac:	2b00      	cmp	r3, #0
   865ae:	f47f ac64 	bne.w	85e7a <_svfprintf_r+0xae>
   865b2:	2320      	movs	r3, #32
   865b4:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
   865b8:	e45f      	b.n	85e7a <_svfprintf_r+0xae>
   865ba:	4b29      	ldr	r3, [pc, #164]	; (86660 <_svfprintf_r+0x894>)
   865bc:	f018 0f20 	tst.w	r8, #32
   865c0:	931b      	str	r3, [sp, #108]	; 0x6c
   865c2:	f47f ad8b 	bne.w	860dc <_svfprintf_r+0x310>
   865c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   865c8:	f018 0f10 	tst.w	r8, #16
   865cc:	f102 0304 	add.w	r3, r2, #4
   865d0:	f040 828c 	bne.w	86aec <_svfprintf_r+0xd20>
   865d4:	f018 0f40 	tst.w	r8, #64	; 0x40
   865d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   865da:	f000 8283 	beq.w	86ae4 <_svfprintf_r+0xd18>
   865de:	8814      	ldrh	r4, [r2, #0]
   865e0:	2500      	movs	r5, #0
   865e2:	930d      	str	r3, [sp, #52]	; 0x34
   865e4:	e583      	b.n	860ee <_svfprintf_r+0x322>
   865e6:	f048 0310 	orr.w	r3, r8, #16
   865ea:	069e      	lsls	r6, r3, #26
   865ec:	f53f ad65 	bmi.w	860ba <_svfprintf_r+0x2ee>
   865f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   865f2:	06dd      	lsls	r5, r3, #27
   865f4:	f102 0104 	add.w	r1, r2, #4
   865f8:	f100 8293 	bmi.w	86b22 <_svfprintf_r+0xd56>
   865fc:	065c      	lsls	r4, r3, #25
   865fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   86600:	f140 828c 	bpl.w	86b1c <_svfprintf_r+0xd50>
   86604:	8814      	ldrh	r4, [r2, #0]
   86606:	2500      	movs	r5, #0
   86608:	2201      	movs	r2, #1
   8660a:	910d      	str	r1, [sp, #52]	; 0x34
   8660c:	e4d4      	b.n	85fb8 <_svfprintf_r+0x1ec>
   8660e:	f89b 7000 	ldrb.w	r7, [fp]
   86612:	2f68      	cmp	r7, #104	; 0x68
   86614:	bf03      	ittte	eq
   86616:	f89b 7001 	ldrbeq.w	r7, [fp, #1]
   8661a:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
   8661e:	f10b 0b01 	addeq.w	fp, fp, #1
   86622:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
   86626:	e428      	b.n	85e7a <_svfprintf_r+0xae>
   86628:	2f00      	cmp	r7, #0
   8662a:	f43f ad8c 	beq.w	86146 <_svfprintf_r+0x37a>
   8662e:	2300      	movs	r3, #0
   86630:	2101      	movs	r1, #1
   86632:	461a      	mov	r2, r3
   86634:	9108      	str	r1, [sp, #32]
   86636:	f88d 70fc 	strb.w	r7, [sp, #252]	; 0xfc
   8663a:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
   8663e:	9310      	str	r3, [sp, #64]	; 0x40
   86640:	469a      	mov	sl, r3
   86642:	9313      	str	r3, [sp, #76]	; 0x4c
   86644:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   86648:	910c      	str	r1, [sp, #48]	; 0x30
   8664a:	ae3f      	add	r6, sp, #252	; 0xfc
   8664c:	e5bc      	b.n	861c8 <_svfprintf_r+0x3fc>
   8664e:	bf00      	nop
   86650:	0008aaa8 	.word	0x0008aaa8
   86654:	7fefffff 	.word	0x7fefffff
   86658:	0008aa68 	.word	0x0008aa68
   8665c:	0008aa64 	.word	0x0008aa64
   86660:	0008aa88 	.word	0x0008aa88
   86664:	981b      	ldr	r0, [sp, #108]	; 0x6c
   86666:	ae58      	add	r6, sp, #352	; 0x160
   86668:	0923      	lsrs	r3, r4, #4
   8666a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   8666e:	0929      	lsrs	r1, r5, #4
   86670:	f004 020f 	and.w	r2, r4, #15
   86674:	460d      	mov	r5, r1
   86676:	461c      	mov	r4, r3
   86678:	5c83      	ldrb	r3, [r0, r2]
   8667a:	f806 3d01 	strb.w	r3, [r6, #-1]!
   8667e:	ea54 0305 	orrs.w	r3, r4, r5
   86682:	d1f1      	bne.n	86668 <_svfprintf_r+0x89c>
   86684:	9b08      	ldr	r3, [sp, #32]
   86686:	1b9b      	subs	r3, r3, r6
   86688:	930c      	str	r3, [sp, #48]	; 0x30
   8668a:	2300      	movs	r3, #0
   8668c:	9310      	str	r3, [sp, #64]	; 0x40
   8668e:	9313      	str	r3, [sp, #76]	; 0x4c
   86690:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   86694:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86696:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
   8669a:	4553      	cmp	r3, sl
   8669c:	bfb8      	it	lt
   8669e:	4653      	movlt	r3, sl
   866a0:	9308      	str	r3, [sp, #32]
   866a2:	e6e1      	b.n	86468 <_svfprintf_r+0x69c>
   866a4:	2f65      	cmp	r7, #101	; 0x65
   866a6:	f340 809e 	ble.w	867e6 <_svfprintf_r+0xa1a>
   866aa:	e9dd 0218 	ldrd	r0, r2, [sp, #96]	; 0x60
   866ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   866b0:	9917      	ldr	r1, [sp, #92]	; 0x5c
   866b2:	f003 ffc3 	bl	8a63c <__aeabi_dcmpeq>
   866b6:	2800      	cmp	r0, #0
   866b8:	f000 8166 	beq.w	86988 <_svfprintf_r+0xbbc>
   866bc:	2101      	movs	r1, #1
   866be:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   866c0:	4aaf      	ldr	r2, [pc, #700]	; (86980 <_svfprintf_r+0xbb4>)
   866c2:	440b      	add	r3, r1
   866c4:	440c      	add	r4, r1
   866c6:	2b07      	cmp	r3, #7
   866c8:	942e      	str	r4, [sp, #184]	; 0xb8
   866ca:	932d      	str	r3, [sp, #180]	; 0xb4
   866cc:	e9c9 2100 	strd	r2, r1, [r9]
   866d0:	f300 8442 	bgt.w	86f58 <_svfprintf_r+0x118c>
   866d4:	f109 0908 	add.w	r9, r9, #8
   866d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   866da:	9a14      	ldr	r2, [sp, #80]	; 0x50
   866dc:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
   866de:	4293      	cmp	r3, r2
   866e0:	f280 81ef 	bge.w	86ac2 <_svfprintf_r+0xcf6>
   866e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   866e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   866e8:	3301      	adds	r3, #1
   866ea:	991d      	ldr	r1, [sp, #116]	; 0x74
   866ec:	4414      	add	r4, r2
   866ee:	2b07      	cmp	r3, #7
   866f0:	e9c9 1200 	strd	r1, r2, [r9]
   866f4:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
   866f8:	f300 82f9 	bgt.w	86cee <_svfprintf_r+0xf22>
   866fc:	f109 0908 	add.w	r9, r9, #8
   86700:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86702:	1e5d      	subs	r5, r3, #1
   86704:	2d00      	cmp	r5, #0
   86706:	f77f ae1c 	ble.w	86342 <_svfprintf_r+0x576>
   8670a:	2d10      	cmp	r5, #16
   8670c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   8670e:	f340 87c6 	ble.w	8769e <_svfprintf_r+0x18d2>
   86712:	4b9c      	ldr	r3, [pc, #624]	; (86984 <_svfprintf_r+0xbb8>)
   86714:	2610      	movs	r6, #16
   86716:	4619      	mov	r1, r3
   86718:	9f07      	ldr	r7, [sp, #28]
   8671a:	4623      	mov	r3, r4
   8671c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   86720:	460c      	mov	r4, r1
   86722:	e005      	b.n	86730 <_svfprintf_r+0x964>
   86724:	f109 0908 	add.w	r9, r9, #8
   86728:	3d10      	subs	r5, #16
   8672a:	2d10      	cmp	r5, #16
   8672c:	f340 8407 	ble.w	86f3e <_svfprintf_r+0x1172>
   86730:	3201      	adds	r2, #1
   86732:	3310      	adds	r3, #16
   86734:	2a07      	cmp	r2, #7
   86736:	e9cd 232d 	strd	r2, r3, [sp, #180]	; 0xb4
   8673a:	e9c9 4600 	strd	r4, r6, [r9]
   8673e:	ddf1      	ble.n	86724 <_svfprintf_r+0x958>
   86740:	aa2c      	add	r2, sp, #176	; 0xb0
   86742:	4651      	mov	r1, sl
   86744:	4638      	mov	r0, r7
   86746:	f003 fa39 	bl	89bbc <__ssprint_r>
   8674a:	2800      	cmp	r0, #0
   8674c:	f47f ac0f 	bne.w	85f6e <_svfprintf_r+0x1a2>
   86750:	e9dd 232d 	ldrd	r2, r3, [sp, #180]	; 0xb4
   86754:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   86758:	e7e6      	b.n	86728 <_svfprintf_r+0x95c>
   8675a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8675c:	9a08      	ldr	r2, [sp, #32]
   8675e:	1a9d      	subs	r5, r3, r2
   86760:	2d00      	cmp	r5, #0
   86762:	f77f ada1 	ble.w	862a8 <_svfprintf_r+0x4dc>
   86766:	2d10      	cmp	r5, #16
   86768:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   8676a:	4b86      	ldr	r3, [pc, #536]	; (86984 <_svfprintf_r+0xbb8>)
   8676c:	dd25      	ble.n	867ba <_svfprintf_r+0x9ee>
   8676e:	4649      	mov	r1, r9
   86770:	4620      	mov	r0, r4
   86772:	46b1      	mov	r9, r6
   86774:	461c      	mov	r4, r3
   86776:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   86778:	e004      	b.n	86784 <_svfprintf_r+0x9b8>
   8677a:	3d10      	subs	r5, #16
   8677c:	2d10      	cmp	r5, #16
   8677e:	f101 0108 	add.w	r1, r1, #8
   86782:	dd16      	ble.n	867b2 <_svfprintf_r+0x9e6>
   86784:	2310      	movs	r3, #16
   86786:	3201      	adds	r2, #1
   86788:	3010      	adds	r0, #16
   8678a:	2a07      	cmp	r2, #7
   8678c:	e9cd 202d 	strd	r2, r0, [sp, #180]	; 0xb4
   86790:	600c      	str	r4, [r1, #0]
   86792:	604b      	str	r3, [r1, #4]
   86794:	ddf1      	ble.n	8677a <_svfprintf_r+0x9ae>
   86796:	aa2c      	add	r2, sp, #176	; 0xb0
   86798:	4631      	mov	r1, r6
   8679a:	9807      	ldr	r0, [sp, #28]
   8679c:	f003 fa0e 	bl	89bbc <__ssprint_r>
   867a0:	2800      	cmp	r0, #0
   867a2:	f47f abe4 	bne.w	85f6e <_svfprintf_r+0x1a2>
   867a6:	e9dd 202d 	ldrd	r2, r0, [sp, #180]	; 0xb4
   867aa:	3d10      	subs	r5, #16
   867ac:	2d10      	cmp	r5, #16
   867ae:	a92f      	add	r1, sp, #188	; 0xbc
   867b0:	dce8      	bgt.n	86784 <_svfprintf_r+0x9b8>
   867b2:	464e      	mov	r6, r9
   867b4:	4623      	mov	r3, r4
   867b6:	4689      	mov	r9, r1
   867b8:	4604      	mov	r4, r0
   867ba:	3201      	adds	r2, #1
   867bc:	442c      	add	r4, r5
   867be:	2a07      	cmp	r2, #7
   867c0:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
   867c4:	e9c9 3500 	strd	r3, r5, [r9]
   867c8:	f300 83ac 	bgt.w	86f24 <_svfprintf_r+0x1158>
   867cc:	f109 0908 	add.w	r9, r9, #8
   867d0:	e56a      	b.n	862a8 <_svfprintf_r+0x4dc>
   867d2:	aa2c      	add	r2, sp, #176	; 0xb0
   867d4:	990a      	ldr	r1, [sp, #40]	; 0x28
   867d6:	9807      	ldr	r0, [sp, #28]
   867d8:	f003 f9f0 	bl	89bbc <__ssprint_r>
   867dc:	2800      	cmp	r0, #0
   867de:	f43f adf9 	beq.w	863d4 <_svfprintf_r+0x608>
   867e2:	f7ff bbc4 	b.w	85f6e <_svfprintf_r+0x1a2>
   867e6:	1c62      	adds	r2, r4, #1
   867e8:	920c      	str	r2, [sp, #48]	; 0x30
   867ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
   867ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   867ee:	2a01      	cmp	r2, #1
   867f0:	f103 0501 	add.w	r5, r3, #1
   867f4:	f109 0708 	add.w	r7, r9, #8
   867f8:	f340 814f 	ble.w	86a9a <_svfprintf_r+0xcce>
   867fc:	2301      	movs	r3, #1
   867fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86800:	2d07      	cmp	r5, #7
   86802:	f8c9 6000 	str.w	r6, [r9]
   86806:	e9cd 522d 	strd	r5, r2, [sp, #180]	; 0xb4
   8680a:	f8c9 3004 	str.w	r3, [r9, #4]
   8680e:	f300 835d 	bgt.w	86ecc <_svfprintf_r+0x1100>
   86812:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   86814:	990c      	ldr	r1, [sp, #48]	; 0x30
   86816:	3501      	adds	r5, #1
   86818:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   8681a:	4419      	add	r1, r3
   8681c:	2d07      	cmp	r5, #7
   8681e:	910c      	str	r1, [sp, #48]	; 0x30
   86820:	e9cd 512d 	strd	r5, r1, [sp, #180]	; 0xb4
   86824:	e9c7 2300 	strd	r2, r3, [r7]
   86828:	f300 835d 	bgt.w	86ee6 <_svfprintf_r+0x111a>
   8682c:	3708      	adds	r7, #8
   8682e:	1c6c      	adds	r4, r5, #1
   86830:	9411      	str	r4, [sp, #68]	; 0x44
   86832:	940e      	str	r4, [sp, #56]	; 0x38
   86834:	9c14      	ldr	r4, [sp, #80]	; 0x50
   86836:	e9dd 0218 	ldrd	r0, r2, [sp, #96]	; 0x60
   8683a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   8683c:	9917      	ldr	r1, [sp, #92]	; 0x5c
   8683e:	f104 3aff 	add.w	sl, r4, #4294967295
   86842:	f107 0908 	add.w	r9, r7, #8
   86846:	f003 fef9 	bl	8a63c <__aeabi_dcmpeq>
   8684a:	2800      	cmp	r0, #0
   8684c:	f040 80e8 	bne.w	86a20 <_svfprintf_r+0xc54>
   86850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86852:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   86854:	4453      	add	r3, sl
   86856:	3601      	adds	r6, #1
   86858:	2c07      	cmp	r4, #7
   8685a:	930c      	str	r3, [sp, #48]	; 0x30
   8685c:	603e      	str	r6, [r7, #0]
   8685e:	932e      	str	r3, [sp, #184]	; 0xb8
   86860:	f8c7 a004 	str.w	sl, [r7, #4]
   86864:	942d      	str	r4, [sp, #180]	; 0xb4
   86866:	f300 8231 	bgt.w	86ccc <_svfprintf_r+0xf00>
   8686a:	f107 0310 	add.w	r3, r7, #16
   8686e:	464f      	mov	r7, r9
   86870:	4699      	mov	r9, r3
   86872:	1caa      	adds	r2, r5, #2
   86874:	920e      	str	r2, [sp, #56]	; 0x38
   86876:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86878:	990c      	ldr	r1, [sp, #48]	; 0x30
   8687a:	607a      	str	r2, [r7, #4]
   8687c:	4411      	add	r1, r2
   8687e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86880:	ab28      	add	r3, sp, #160	; 0xa0
   86882:	2a07      	cmp	r2, #7
   86884:	460c      	mov	r4, r1
   86886:	912e      	str	r1, [sp, #184]	; 0xb8
   86888:	922d      	str	r2, [sp, #180]	; 0xb4
   8688a:	603b      	str	r3, [r7, #0]
   8688c:	f77f ad59 	ble.w	86342 <_svfprintf_r+0x576>
   86890:	aa2c      	add	r2, sp, #176	; 0xb0
   86892:	990a      	ldr	r1, [sp, #40]	; 0x28
   86894:	9807      	ldr	r0, [sp, #28]
   86896:	f003 f991 	bl	89bbc <__ssprint_r>
   8689a:	2800      	cmp	r0, #0
   8689c:	f47f ab67 	bne.w	85f6e <_svfprintf_r+0x1a2>
   868a0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   868a4:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
   868a6:	e54c      	b.n	86342 <_svfprintf_r+0x576>
   868a8:	2a01      	cmp	r2, #1
   868aa:	4698      	mov	r8, r3
   868ac:	f47f abdb 	bne.w	86066 <_svfprintf_r+0x29a>
   868b0:	2d00      	cmp	r5, #0
   868b2:	bf08      	it	eq
   868b4:	2c0a      	cmpeq	r4, #10
   868b6:	f080 82c6 	bcs.w	86e46 <_svfprintf_r+0x107a>
   868ba:	2301      	movs	r3, #1
   868bc:	ae58      	add	r6, sp, #352	; 0x160
   868be:	3430      	adds	r4, #48	; 0x30
   868c0:	f806 4d01 	strb.w	r4, [r6, #-1]!
   868c4:	930c      	str	r3, [sp, #48]	; 0x30
   868c6:	e6e0      	b.n	8668a <_svfprintf_r+0x8be>
   868c8:	aa2c      	add	r2, sp, #176	; 0xb0
   868ca:	990a      	ldr	r1, [sp, #40]	; 0x28
   868cc:	9807      	ldr	r0, [sp, #28]
   868ce:	f003 f975 	bl	89bbc <__ssprint_r>
   868d2:	2800      	cmp	r0, #0
   868d4:	f47f ab4b 	bne.w	85f6e <_svfprintf_r+0x1a2>
   868d8:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   868dc:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
   868de:	e4cf      	b.n	86280 <_svfprintf_r+0x4b4>
   868e0:	aa2c      	add	r2, sp, #176	; 0xb0
   868e2:	990a      	ldr	r1, [sp, #40]	; 0x28
   868e4:	9807      	ldr	r0, [sp, #28]
   868e6:	f003 f969 	bl	89bbc <__ssprint_r>
   868ea:	2800      	cmp	r0, #0
   868ec:	f47f ab3f 	bne.w	85f6e <_svfprintf_r+0x1a2>
   868f0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   868f4:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
   868f6:	e4d3      	b.n	862a0 <_svfprintf_r+0x4d4>
   868f8:	aa2c      	add	r2, sp, #176	; 0xb0
   868fa:	990a      	ldr	r1, [sp, #40]	; 0x28
   868fc:	9807      	ldr	r0, [sp, #28]
   868fe:	f003 f95d 	bl	89bbc <__ssprint_r>
   86902:	2800      	cmp	r0, #0
   86904:	f47f ab33 	bne.w	85f6e <_svfprintf_r+0x1a2>
   86908:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8690a:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
   8690c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   86910:	b91b      	cbnz	r3, 8691a <_svfprintf_r+0xb4e>
   86912:	9a14      	ldr	r2, [sp, #80]	; 0x50
   86914:	2a00      	cmp	r2, #0
   86916:	f000 8413 	beq.w	87140 <_svfprintf_r+0x1374>
   8691a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   8691c:	991c      	ldr	r1, [sp, #112]	; 0x70
   8691e:	3201      	adds	r2, #1
   86920:	981d      	ldr	r0, [sp, #116]	; 0x74
   86922:	440c      	add	r4, r1
   86924:	2a07      	cmp	r2, #7
   86926:	942e      	str	r4, [sp, #184]	; 0xb8
   86928:	e9c9 0100 	strd	r0, r1, [r9]
   8692c:	922d      	str	r2, [sp, #180]	; 0xb4
   8692e:	f300 8535 	bgt.w	8739c <_svfprintf_r+0x15d0>
   86932:	f109 0908 	add.w	r9, r9, #8
   86936:	2b00      	cmp	r3, #0
   86938:	f2c0 85d3 	blt.w	874e2 <_svfprintf_r+0x1716>
   8693c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8693e:	3201      	adds	r2, #1
   86940:	441c      	add	r4, r3
   86942:	2a07      	cmp	r2, #7
   86944:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
   86948:	e9c9 6300 	strd	r6, r3, [r9]
   8694c:	f77f acf7 	ble.w	8633e <_svfprintf_r+0x572>
   86950:	aa2c      	add	r2, sp, #176	; 0xb0
   86952:	990a      	ldr	r1, [sp, #40]	; 0x28
   86954:	9807      	ldr	r0, [sp, #28]
   86956:	f003 f931 	bl	89bbc <__ssprint_r>
   8695a:	2800      	cmp	r0, #0
   8695c:	f47f ab07 	bne.w	85f6e <_svfprintf_r+0x1a2>
   86960:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
   86962:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   86966:	e4ec      	b.n	86342 <_svfprintf_r+0x576>
   86968:	aa2c      	add	r2, sp, #176	; 0xb0
   8696a:	990a      	ldr	r1, [sp, #40]	; 0x28
   8696c:	9807      	ldr	r0, [sp, #28]
   8696e:	f003 f925 	bl	89bbc <__ssprint_r>
   86972:	2800      	cmp	r0, #0
   86974:	f47f aafb 	bne.w	85f6e <_svfprintf_r+0x1a2>
   86978:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   8697c:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
   8697e:	e4cf      	b.n	86320 <_svfprintf_r+0x554>
   86980:	0008aaa4 	.word	0x0008aaa4
   86984:	0008aab8 	.word	0x0008aab8
   86988:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8698a:	2b00      	cmp	r3, #0
   8698c:	f340 817c 	ble.w	86c88 <_svfprintf_r+0xebc>
   86990:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   86994:	4293      	cmp	r3, r2
   86996:	bfa8      	it	ge
   86998:	4613      	movge	r3, r2
   8699a:	2b00      	cmp	r3, #0
   8699c:	461d      	mov	r5, r3
   8699e:	dd0b      	ble.n	869b8 <_svfprintf_r+0xbec>
   869a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   869a2:	442c      	add	r4, r5
   869a4:	3301      	adds	r3, #1
   869a6:	2b07      	cmp	r3, #7
   869a8:	942e      	str	r4, [sp, #184]	; 0xb8
   869aa:	e9c9 6500 	strd	r6, r5, [r9]
   869ae:	932d      	str	r3, [sp, #180]	; 0xb4
   869b0:	f300 84ba 	bgt.w	87328 <_svfprintf_r+0x155c>
   869b4:	f109 0908 	add.w	r9, r9, #8
   869b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   869ba:	2d00      	cmp	r5, #0
   869bc:	bfa8      	it	ge
   869be:	1b5b      	subge	r3, r3, r5
   869c0:	2b00      	cmp	r3, #0
   869c2:	461d      	mov	r5, r3
   869c4:	f340 81d7 	ble.w	86d76 <_svfprintf_r+0xfaa>
   869c8:	2b10      	cmp	r3, #16
   869ca:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   869cc:	f340 869d 	ble.w	8770a <_svfprintf_r+0x193e>
   869d0:	4bbc      	ldr	r3, [pc, #752]	; (86cc4 <_svfprintf_r+0xef8>)
   869d2:	4621      	mov	r1, r4
   869d4:	4618      	mov	r0, r3
   869d6:	2710      	movs	r7, #16
   869d8:	464b      	mov	r3, r9
   869da:	f8dd a01c 	ldr.w	sl, [sp, #28]
   869de:	46b1      	mov	r9, r6
   869e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   869e2:	4606      	mov	r6, r0
   869e4:	e004      	b.n	869f0 <_svfprintf_r+0xc24>
   869e6:	3308      	adds	r3, #8
   869e8:	3d10      	subs	r5, #16
   869ea:	2d10      	cmp	r5, #16
   869ec:	f340 81aa 	ble.w	86d44 <_svfprintf_r+0xf78>
   869f0:	3201      	adds	r2, #1
   869f2:	3110      	adds	r1, #16
   869f4:	2a07      	cmp	r2, #7
   869f6:	e9cd 212d 	strd	r2, r1, [sp, #180]	; 0xb4
   869fa:	e9c3 6700 	strd	r6, r7, [r3]
   869fe:	ddf2      	ble.n	869e6 <_svfprintf_r+0xc1a>
   86a00:	aa2c      	add	r2, sp, #176	; 0xb0
   86a02:	4621      	mov	r1, r4
   86a04:	4650      	mov	r0, sl
   86a06:	f003 f8d9 	bl	89bbc <__ssprint_r>
   86a0a:	2800      	cmp	r0, #0
   86a0c:	f47f aaaf 	bne.w	85f6e <_svfprintf_r+0x1a2>
   86a10:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
   86a14:	ab2f      	add	r3, sp, #188	; 0xbc
   86a16:	e7e7      	b.n	869e8 <_svfprintf_r+0xc1c>
   86a18:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
   86a1c:	ae58      	add	r6, sp, #352	; 0x160
   86a1e:	e634      	b.n	8668a <_svfprintf_r+0x8be>
   86a20:	f1ba 0f00 	cmp.w	sl, #0
   86a24:	f77f af27 	ble.w	86876 <_svfprintf_r+0xaaa>
   86a28:	f1ba 0f10 	cmp.w	sl, #16
   86a2c:	f340 864c 	ble.w	876c8 <_svfprintf_r+0x18fc>
   86a30:	4ba4      	ldr	r3, [pc, #656]	; (86cc4 <_svfprintf_r+0xef8>)
   86a32:	2610      	movs	r6, #16
   86a34:	4619      	mov	r1, r3
   86a36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86a38:	463b      	mov	r3, r7
   86a3a:	f8dd 901c 	ldr.w	r9, [sp, #28]
   86a3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86a40:	9d11      	ldr	r5, [sp, #68]	; 0x44
   86a42:	460f      	mov	r7, r1
   86a44:	e007      	b.n	86a56 <_svfprintf_r+0xc8a>
   86a46:	3308      	adds	r3, #8
   86a48:	f1aa 0a10 	sub.w	sl, sl, #16
   86a4c:	f1ba 0f10 	cmp.w	sl, #16
   86a50:	f340 8291 	ble.w	86f76 <_svfprintf_r+0x11aa>
   86a54:	3501      	adds	r5, #1
   86a56:	3210      	adds	r2, #16
   86a58:	2d07      	cmp	r5, #7
   86a5a:	e9cd 522d 	strd	r5, r2, [sp, #180]	; 0xb4
   86a5e:	e9c3 7600 	strd	r7, r6, [r3]
   86a62:	ddf0      	ble.n	86a46 <_svfprintf_r+0xc7a>
   86a64:	aa2c      	add	r2, sp, #176	; 0xb0
   86a66:	4621      	mov	r1, r4
   86a68:	4648      	mov	r0, r9
   86a6a:	f003 f8a7 	bl	89bbc <__ssprint_r>
   86a6e:	2800      	cmp	r0, #0
   86a70:	f47f aa7d 	bne.w	85f6e <_svfprintf_r+0x1a2>
   86a74:	e9dd 522d 	ldrd	r5, r2, [sp, #180]	; 0xb4
   86a78:	ab2f      	add	r3, sp, #188	; 0xbc
   86a7a:	e7e5      	b.n	86a48 <_svfprintf_r+0xc7c>
   86a7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   86a7e:	f018 0f10 	tst.w	r8, #16
   86a82:	f102 0304 	add.w	r3, r2, #4
   86a86:	d144      	bne.n	86b12 <_svfprintf_r+0xd46>
   86a88:	f018 0f40 	tst.w	r8, #64	; 0x40
   86a8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   86a8e:	d03c      	beq.n	86b0a <_svfprintf_r+0xd3e>
   86a90:	8814      	ldrh	r4, [r2, #0]
   86a92:	2500      	movs	r5, #0
   86a94:	930d      	str	r3, [sp, #52]	; 0x34
   86a96:	f7ff ba8c 	b.w	85fb2 <_svfprintf_r+0x1e6>
   86a9a:	f018 0f01 	tst.w	r8, #1
   86a9e:	f47f aead 	bne.w	867fc <_svfprintf_r+0xa30>
   86aa2:	2201      	movs	r2, #1
   86aa4:	990c      	ldr	r1, [sp, #48]	; 0x30
   86aa6:	2d07      	cmp	r5, #7
   86aa8:	f8c9 6000 	str.w	r6, [r9]
   86aac:	e9cd 512d 	strd	r5, r1, [sp, #180]	; 0xb4
   86ab0:	f8c9 2004 	str.w	r2, [r9, #4]
   86ab4:	f300 8453 	bgt.w	8735e <_svfprintf_r+0x1592>
   86ab8:	3302      	adds	r3, #2
   86aba:	930e      	str	r3, [sp, #56]	; 0x38
   86abc:	f109 0910 	add.w	r9, r9, #16
   86ac0:	e6d9      	b.n	86876 <_svfprintf_r+0xaaa>
   86ac2:	f018 0f01 	tst.w	r8, #1
   86ac6:	f47f ae0d 	bne.w	866e4 <_svfprintf_r+0x918>
   86aca:	e43a      	b.n	86342 <_svfprintf_r+0x576>
   86acc:	aa2c      	add	r2, sp, #176	; 0xb0
   86ace:	990a      	ldr	r1, [sp, #40]	; 0x28
   86ad0:	9807      	ldr	r0, [sp, #28]
   86ad2:	f003 f873 	bl	89bbc <__ssprint_r>
   86ad6:	2800      	cmp	r0, #0
   86ad8:	f47f aa49 	bne.w	85f6e <_svfprintf_r+0x1a2>
   86adc:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
   86ade:	e46e      	b.n	863be <_svfprintf_r+0x5f2>
   86ae0:	ae58      	add	r6, sp, #352	; 0x160
   86ae2:	e5d2      	b.n	8668a <_svfprintf_r+0x8be>
   86ae4:	f418 7f00 	tst.w	r8, #512	; 0x200
   86ae8:	f040 8318 	bne.w	8711c <_svfprintf_r+0x1350>
   86aec:	6814      	ldr	r4, [r2, #0]
   86aee:	2500      	movs	r5, #0
   86af0:	930d      	str	r3, [sp, #52]	; 0x34
   86af2:	f7ff bafc 	b.w	860ee <_svfprintf_r+0x322>
   86af6:	0598      	lsls	r0, r3, #22
   86af8:	f100 831a 	bmi.w	87130 <_svfprintf_r+0x1364>
   86afc:	680c      	ldr	r4, [r1, #0]
   86afe:	920d      	str	r2, [sp, #52]	; 0x34
   86b00:	17e5      	asrs	r5, r4, #31
   86b02:	4620      	mov	r0, r4
   86b04:	4629      	mov	r1, r5
   86b06:	f7ff ba94 	b.w	86032 <_svfprintf_r+0x266>
   86b0a:	f418 7f00 	tst.w	r8, #512	; 0x200
   86b0e:	f040 830a 	bne.w	87126 <_svfprintf_r+0x135a>
   86b12:	6814      	ldr	r4, [r2, #0]
   86b14:	2500      	movs	r5, #0
   86b16:	930d      	str	r3, [sp, #52]	; 0x34
   86b18:	f7ff ba4b 	b.w	85fb2 <_svfprintf_r+0x1e6>
   86b1c:	0598      	lsls	r0, r3, #22
   86b1e:	f100 82f2 	bmi.w	87106 <_svfprintf_r+0x133a>
   86b22:	6814      	ldr	r4, [r2, #0]
   86b24:	2500      	movs	r5, #0
   86b26:	2201      	movs	r2, #1
   86b28:	910d      	str	r1, [sp, #52]	; 0x34
   86b2a:	f7ff ba45 	b.w	85fb8 <_svfprintf_r+0x1ec>
   86b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86b30:	465e      	mov	r6, fp
   86b32:	4610      	mov	r0, r2
   86b34:	17d1      	asrs	r1, r2, #31
   86b36:	e9c3 0100 	strd	r0, r1, [r3]
   86b3a:	f7ff bb00 	b.w	8613e <_svfprintf_r+0x372>
   86b3e:	9c18      	ldr	r4, [sp, #96]	; 0x60
   86b40:	4622      	mov	r2, r4
   86b42:	4620      	mov	r0, r4
   86b44:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   86b46:	4623      	mov	r3, r4
   86b48:	4621      	mov	r1, r4
   86b4a:	f003 fda9 	bl	8a6a0 <__aeabi_dcmpun>
   86b4e:	2800      	cmp	r0, #0
   86b50:	f040 85a7 	bne.w	876a2 <_svfprintf_r+0x18d6>
   86b54:	2f61      	cmp	r7, #97	; 0x61
   86b56:	f000 83fd 	beq.w	87354 <_svfprintf_r+0x1588>
   86b5a:	2f41      	cmp	r7, #65	; 0x41
   86b5c:	f000 82f6 	beq.w	8714c <_svfprintf_r+0x1380>
   86b60:	f027 0320 	bic.w	r3, r7, #32
   86b64:	f448 7280 	orr.w	r2, r8, #256	; 0x100
   86b68:	f1ba 3fff 	cmp.w	sl, #4294967295
   86b6c:	9308      	str	r3, [sp, #32]
   86b6e:	9212      	str	r2, [sp, #72]	; 0x48
   86b70:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   86b72:	f000 852c 	beq.w	875ce <_svfprintf_r+0x1802>
   86b76:	2b47      	cmp	r3, #71	; 0x47
   86b78:	f000 8523 	beq.w	875c2 <_svfprintf_r+0x17f6>
   86b7c:	2d00      	cmp	r5, #0
   86b7e:	f2c0 83e0 	blt.w	87342 <_svfprintf_r+0x1576>
   86b82:	9b18      	ldr	r3, [sp, #96]	; 0x60
   86b84:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   86b88:	930c      	str	r3, [sp, #48]	; 0x30
   86b8a:	2f66      	cmp	r7, #102	; 0x66
   86b8c:	f000 84e3 	beq.w	87556 <_svfprintf_r+0x178a>
   86b90:	2f46      	cmp	r7, #70	; 0x46
   86b92:	f000 856c 	beq.w	8766e <_svfprintf_r+0x18a2>
   86b96:	2002      	movs	r0, #2
   86b98:	9b08      	ldr	r3, [sp, #32]
   86b9a:	a92a      	add	r1, sp, #168	; 0xa8
   86b9c:	2b45      	cmp	r3, #69	; 0x45
   86b9e:	bf06      	itte	eq
   86ba0:	f10a 0301 	addeq.w	r3, sl, #1
   86ba4:	930e      	streq	r3, [sp, #56]	; 0x38
   86ba6:	f8cd a038 	strne.w	sl, [sp, #56]	; 0x38
   86baa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   86bac:	9104      	str	r1, [sp, #16]
   86bae:	e9cd 0400 	strd	r0, r4, [sp]
   86bb2:	a926      	add	r1, sp, #152	; 0x98
   86bb4:	a827      	add	r0, sp, #156	; 0x9c
   86bb6:	e9cd 1002 	strd	r1, r0, [sp, #8]
   86bba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86bbc:	462b      	mov	r3, r5
   86bbe:	9807      	ldr	r0, [sp, #28]
   86bc0:	f000 feaa 	bl	87918 <_dtoa_r>
   86bc4:	2f67      	cmp	r7, #103	; 0x67
   86bc6:	4606      	mov	r6, r0
   86bc8:	f040 85a2 	bne.w	87710 <_svfprintf_r+0x1944>
   86bcc:	f018 0f01 	tst.w	r8, #1
   86bd0:	f040 84f3 	bne.w	875ba <_svfprintf_r+0x17ee>
   86bd4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   86bd6:	4640      	mov	r0, r8
   86bd8:	1b9b      	subs	r3, r3, r6
   86bda:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   86bde:	9314      	str	r3, [sp, #80]	; 0x50
   86be0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86be2:	9315      	str	r3, [sp, #84]	; 0x54
   86be4:	9b08      	ldr	r3, [sp, #32]
   86be6:	2b47      	cmp	r3, #71	; 0x47
   86be8:	f000 8364 	beq.w	872b4 <_svfprintf_r+0x14e8>
   86bec:	9b08      	ldr	r3, [sp, #32]
   86bee:	2b46      	cmp	r3, #70	; 0x46
   86bf0:	f000 840c 	beq.w	8740c <_svfprintf_r+0x1640>
   86bf4:	9908      	ldr	r1, [sp, #32]
   86bf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   86bf8:	b2fa      	uxtb	r2, r7
   86bfa:	2941      	cmp	r1, #65	; 0x41
   86bfc:	bf08      	it	eq
   86bfe:	320f      	addeq	r2, #15
   86c00:	f103 33ff 	add.w	r3, r3, #4294967295
   86c04:	bf06      	itte	eq
   86c06:	b2d2      	uxtbeq	r2, r2
   86c08:	2101      	moveq	r1, #1
   86c0a:	2100      	movne	r1, #0
   86c0c:	2b00      	cmp	r3, #0
   86c0e:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   86c12:	bfb4      	ite	lt
   86c14:	222d      	movlt	r2, #45	; 0x2d
   86c16:	222b      	movge	r2, #43	; 0x2b
   86c18:	9326      	str	r3, [sp, #152]	; 0x98
   86c1a:	bfb8      	it	lt
   86c1c:	9b15      	ldrlt	r3, [sp, #84]	; 0x54
   86c1e:	f88d 20a1 	strb.w	r2, [sp, #161]	; 0xa1
   86c22:	bfb8      	it	lt
   86c24:	f1c3 0301 	rsblt	r3, r3, #1
   86c28:	2b09      	cmp	r3, #9
   86c2a:	f300 84da 	bgt.w	875e2 <_svfprintf_r+0x1816>
   86c2e:	2900      	cmp	r1, #0
   86c30:	f040 8584 	bne.w	8773c <_svfprintf_r+0x1970>
   86c34:	2230      	movs	r2, #48	; 0x30
   86c36:	f88d 20a2 	strb.w	r2, [sp, #162]	; 0xa2
   86c3a:	f10d 02a3 	add.w	r2, sp, #163	; 0xa3
   86c3e:	3330      	adds	r3, #48	; 0x30
   86c40:	7013      	strb	r3, [r2, #0]
   86c42:	1c53      	adds	r3, r2, #1
   86c44:	aa28      	add	r2, sp, #160	; 0xa0
   86c46:	1a9b      	subs	r3, r3, r2
   86c48:	9a14      	ldr	r2, [sp, #80]	; 0x50
   86c4a:	931f      	str	r3, [sp, #124]	; 0x7c
   86c4c:	2a01      	cmp	r2, #1
   86c4e:	4413      	add	r3, r2
   86c50:	930c      	str	r3, [sp, #48]	; 0x30
   86c52:	f340 8546 	ble.w	876e2 <_svfprintf_r+0x1916>
   86c56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86c58:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   86c5a:	4413      	add	r3, r2
   86c5c:	930c      	str	r3, [sp, #48]	; 0x30
   86c5e:	2300      	movs	r3, #0
   86c60:	9313      	str	r3, [sp, #76]	; 0x4c
   86c62:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   86c66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86c68:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
   86c6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86c70:	f440 7880 	orr.w	r8, r0, #256	; 0x100
   86c74:	9308      	str	r3, [sp, #32]
   86c76:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86c78:	2b00      	cmp	r3, #0
   86c7a:	f040 8348 	bne.w	8730e <_svfprintf_r+0x1542>
   86c7e:	469a      	mov	sl, r3
   86c80:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
   86c84:	f7ff bbf0 	b.w	86468 <_svfprintf_r+0x69c>
   86c88:	2001      	movs	r0, #1
   86c8a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   86c8c:	490e      	ldr	r1, [pc, #56]	; (86cc8 <_svfprintf_r+0xefc>)
   86c8e:	4402      	add	r2, r0
   86c90:	4404      	add	r4, r0
   86c92:	2a07      	cmp	r2, #7
   86c94:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
   86c98:	e9c9 1000 	strd	r1, r0, [r9]
   86c9c:	f73f ae2c 	bgt.w	868f8 <_svfprintf_r+0xb2c>
   86ca0:	f109 0908 	add.w	r9, r9, #8
   86ca4:	e634      	b.n	86910 <_svfprintf_r+0xb44>
   86ca6:	2140      	movs	r1, #64	; 0x40
   86ca8:	9807      	ldr	r0, [sp, #28]
   86caa:	f001 febd 	bl	88a28 <_malloc_r>
   86cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86cb0:	6018      	str	r0, [r3, #0]
   86cb2:	6118      	str	r0, [r3, #16]
   86cb4:	2800      	cmp	r0, #0
   86cb6:	f000 856f 	beq.w	87798 <_svfprintf_r+0x19cc>
   86cba:	2340      	movs	r3, #64	; 0x40
   86cbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86cbe:	6153      	str	r3, [r2, #20]
   86cc0:	f7ff b89b 	b.w	85dfa <_svfprintf_r+0x2e>
   86cc4:	0008aab8 	.word	0x0008aab8
   86cc8:	0008aaa4 	.word	0x0008aaa4
   86ccc:	aa2c      	add	r2, sp, #176	; 0xb0
   86cce:	990a      	ldr	r1, [sp, #40]	; 0x28
   86cd0:	9807      	ldr	r0, [sp, #28]
   86cd2:	f002 ff73 	bl	89bbc <__ssprint_r>
   86cd6:	2800      	cmp	r0, #0
   86cd8:	f47f a949 	bne.w	85f6e <_svfprintf_r+0x1a2>
   86cdc:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   86ce0:	3301      	adds	r3, #1
   86ce2:	920c      	str	r2, [sp, #48]	; 0x30
   86ce4:	930e      	str	r3, [sp, #56]	; 0x38
   86ce6:	f10d 09c4 	add.w	r9, sp, #196	; 0xc4
   86cea:	af2f      	add	r7, sp, #188	; 0xbc
   86cec:	e5c3      	b.n	86876 <_svfprintf_r+0xaaa>
   86cee:	aa2c      	add	r2, sp, #176	; 0xb0
   86cf0:	990a      	ldr	r1, [sp, #40]	; 0x28
   86cf2:	9807      	ldr	r0, [sp, #28]
   86cf4:	f002 ff62 	bl	89bbc <__ssprint_r>
   86cf8:	2800      	cmp	r0, #0
   86cfa:	f47f a938 	bne.w	85f6e <_svfprintf_r+0x1a2>
   86cfe:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   86d02:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
   86d04:	e4fc      	b.n	86700 <_svfprintf_r+0x934>
   86d06:	4653      	mov	r3, sl
   86d08:	2b06      	cmp	r3, #6
   86d0a:	bf28      	it	cs
   86d0c:	2306      	movcs	r3, #6
   86d0e:	46b2      	mov	sl, r6
   86d10:	9613      	str	r6, [sp, #76]	; 0x4c
   86d12:	e9cd 6615 	strd	r6, r6, [sp, #84]	; 0x54
   86d16:	9610      	str	r6, [sp, #64]	; 0x40
   86d18:	4632      	mov	r2, r6
   86d1a:	9308      	str	r3, [sp, #32]
   86d1c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   86d20:	4ea4      	ldr	r6, [pc, #656]	; (86fb4 <_svfprintf_r+0x11e8>)
   86d22:	f7ff bba1 	b.w	86468 <_svfprintf_r+0x69c>
   86d26:	aa2c      	add	r2, sp, #176	; 0xb0
   86d28:	990a      	ldr	r1, [sp, #40]	; 0x28
   86d2a:	9807      	ldr	r0, [sp, #28]
   86d2c:	f002 ff46 	bl	89bbc <__ssprint_r>
   86d30:	2800      	cmp	r0, #0
   86d32:	f47f a91c 	bne.w	85f6e <_svfprintf_r+0x1a2>
   86d36:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   86d3a:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
   86d3e:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
   86d40:	f7ff ba8e 	b.w	86260 <_svfprintf_r+0x494>
   86d44:	460c      	mov	r4, r1
   86d46:	4631      	mov	r1, r6
   86d48:	464e      	mov	r6, r9
   86d4a:	4699      	mov	r9, r3
   86d4c:	460b      	mov	r3, r1
   86d4e:	3201      	adds	r2, #1
   86d50:	442c      	add	r4, r5
   86d52:	2a07      	cmp	r2, #7
   86d54:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
   86d58:	e9c9 3500 	strd	r3, r5, [r9]
   86d5c:	f340 81d0 	ble.w	87100 <_svfprintf_r+0x1334>
   86d60:	aa2c      	add	r2, sp, #176	; 0xb0
   86d62:	990a      	ldr	r1, [sp, #40]	; 0x28
   86d64:	9807      	ldr	r0, [sp, #28]
   86d66:	f002 ff29 	bl	89bbc <__ssprint_r>
   86d6a:	2800      	cmp	r0, #0
   86d6c:	f47f a8ff 	bne.w	85f6e <_svfprintf_r+0x1a2>
   86d70:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
   86d72:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   86d76:	9b15      	ldr	r3, [sp, #84]	; 0x54
   86d78:	f418 6f80 	tst.w	r8, #1024	; 0x400
   86d7c:	4433      	add	r3, r6
   86d7e:	469a      	mov	sl, r3
   86d80:	f040 811c 	bne.w	86fbc <_svfprintf_r+0x11f0>
   86d84:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86d86:	9a14      	ldr	r2, [sp, #80]	; 0x50
   86d88:	4293      	cmp	r3, r2
   86d8a:	db47      	blt.n	86e1c <_svfprintf_r+0x1050>
   86d8c:	f018 0f01 	tst.w	r8, #1
   86d90:	d144      	bne.n	86e1c <_svfprintf_r+0x1050>
   86d92:	9a14      	ldr	r2, [sp, #80]	; 0x50
   86d94:	18b5      	adds	r5, r6, r2
   86d96:	eba5 050a 	sub.w	r5, r5, sl
   86d9a:	1ad3      	subs	r3, r2, r3
   86d9c:	429d      	cmp	r5, r3
   86d9e:	bfa8      	it	ge
   86da0:	461d      	movge	r5, r3
   86da2:	2d00      	cmp	r5, #0
   86da4:	dd0b      	ble.n	86dbe <_svfprintf_r+0xff2>
   86da6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   86da8:	442c      	add	r4, r5
   86daa:	3201      	adds	r2, #1
   86dac:	2a07      	cmp	r2, #7
   86dae:	942e      	str	r4, [sp, #184]	; 0xb8
   86db0:	e9c9 a500 	strd	sl, r5, [r9]
   86db4:	922d      	str	r2, [sp, #180]	; 0xb4
   86db6:	f300 8365 	bgt.w	87484 <_svfprintf_r+0x16b8>
   86dba:	f109 0908 	add.w	r9, r9, #8
   86dbe:	2d00      	cmp	r5, #0
   86dc0:	bfb4      	ite	lt
   86dc2:	461d      	movlt	r5, r3
   86dc4:	1b5d      	subge	r5, r3, r5
   86dc6:	2d00      	cmp	r5, #0
   86dc8:	f77f aabb 	ble.w	86342 <_svfprintf_r+0x576>
   86dcc:	2d10      	cmp	r5, #16
   86dce:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   86dd0:	f340 8465 	ble.w	8769e <_svfprintf_r+0x18d2>
   86dd4:	4b78      	ldr	r3, [pc, #480]	; (86fb8 <_svfprintf_r+0x11ec>)
   86dd6:	2610      	movs	r6, #16
   86dd8:	4619      	mov	r1, r3
   86dda:	9f07      	ldr	r7, [sp, #28]
   86ddc:	4623      	mov	r3, r4
   86dde:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   86de2:	460c      	mov	r4, r1
   86de4:	e005      	b.n	86df2 <_svfprintf_r+0x1026>
   86de6:	f109 0908 	add.w	r9, r9, #8
   86dea:	3d10      	subs	r5, #16
   86dec:	2d10      	cmp	r5, #16
   86dee:	f340 80a6 	ble.w	86f3e <_svfprintf_r+0x1172>
   86df2:	3201      	adds	r2, #1
   86df4:	3310      	adds	r3, #16
   86df6:	2a07      	cmp	r2, #7
   86df8:	e9cd 232d 	strd	r2, r3, [sp, #180]	; 0xb4
   86dfc:	e9c9 4600 	strd	r4, r6, [r9]
   86e00:	ddf1      	ble.n	86de6 <_svfprintf_r+0x101a>
   86e02:	aa2c      	add	r2, sp, #176	; 0xb0
   86e04:	4651      	mov	r1, sl
   86e06:	4638      	mov	r0, r7
   86e08:	f002 fed8 	bl	89bbc <__ssprint_r>
   86e0c:	2800      	cmp	r0, #0
   86e0e:	f47f a8ae 	bne.w	85f6e <_svfprintf_r+0x1a2>
   86e12:	e9dd 232d 	ldrd	r2, r3, [sp, #180]	; 0xb4
   86e16:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   86e1a:	e7e6      	b.n	86dea <_svfprintf_r+0x101e>
   86e1c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   86e1e:	991c      	ldr	r1, [sp, #112]	; 0x70
   86e20:	3201      	adds	r2, #1
   86e22:	981d      	ldr	r0, [sp, #116]	; 0x74
   86e24:	440c      	add	r4, r1
   86e26:	2a07      	cmp	r2, #7
   86e28:	942e      	str	r4, [sp, #184]	; 0xb8
   86e2a:	e9c9 0100 	strd	r0, r1, [r9]
   86e2e:	922d      	str	r2, [sp, #180]	; 0xb4
   86e30:	f300 82df 	bgt.w	873f2 <_svfprintf_r+0x1626>
   86e34:	f109 0908 	add.w	r9, r9, #8
   86e38:	e7ab      	b.n	86d92 <_svfprintf_r+0xfc6>
   86e3a:	2d00      	cmp	r5, #0
   86e3c:	bf08      	it	eq
   86e3e:	2c0a      	cmpeq	r4, #10
   86e40:	4698      	mov	r8, r3
   86e42:	f4ff ad3a 	bcc.w	868ba <_svfprintf_r+0xaee>
   86e46:	2200      	movs	r2, #0
   86e48:	f408 6380 	and.w	r3, r8, #1024	; 0x400
   86e4c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   86e50:	9710      	str	r7, [sp, #64]	; 0x40
   86e52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   86e56:	ae58      	add	r6, sp, #352	; 0x160
   86e58:	4691      	mov	r9, r2
   86e5a:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
   86e5e:	461f      	mov	r7, r3
   86e60:	e00a      	b.n	86e78 <_svfprintf_r+0x10ac>
   86e62:	4620      	mov	r0, r4
   86e64:	4629      	mov	r1, r5
   86e66:	2300      	movs	r3, #0
   86e68:	220a      	movs	r2, #10
   86e6a:	f003 fc57 	bl	8a71c <__aeabi_uldivmod>
   86e6e:	4604      	mov	r4, r0
   86e70:	460d      	mov	r5, r1
   86e72:	ea54 0305 	orrs.w	r3, r4, r5
   86e76:	d047      	beq.n	86f08 <_svfprintf_r+0x113c>
   86e78:	220a      	movs	r2, #10
   86e7a:	2300      	movs	r3, #0
   86e7c:	4620      	mov	r0, r4
   86e7e:	4629      	mov	r1, r5
   86e80:	f003 fc4c 	bl	8a71c <__aeabi_uldivmod>
   86e84:	3230      	adds	r2, #48	; 0x30
   86e86:	f806 2c01 	strb.w	r2, [r6, #-1]
   86e8a:	f109 0901 	add.w	r9, r9, #1
   86e8e:	3e01      	subs	r6, #1
   86e90:	2f00      	cmp	r7, #0
   86e92:	d0e6      	beq.n	86e62 <_svfprintf_r+0x1096>
   86e94:	f898 3000 	ldrb.w	r3, [r8]
   86e98:	4599      	cmp	r9, r3
   86e9a:	d1e2      	bne.n	86e62 <_svfprintf_r+0x1096>
   86e9c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   86ea0:	d0df      	beq.n	86e62 <_svfprintf_r+0x1096>
   86ea2:	2d00      	cmp	r5, #0
   86ea4:	bf08      	it	eq
   86ea6:	2c0a      	cmpeq	r4, #10
   86ea8:	d3db      	bcc.n	86e62 <_svfprintf_r+0x1096>
   86eaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
   86eac:	991e      	ldr	r1, [sp, #120]	; 0x78
   86eae:	1af6      	subs	r6, r6, r3
   86eb0:	461a      	mov	r2, r3
   86eb2:	4630      	mov	r0, r6
   86eb4:	f002 fe50 	bl	89b58 <strncpy>
   86eb8:	f898 3001 	ldrb.w	r3, [r8, #1]
   86ebc:	2b00      	cmp	r3, #0
   86ebe:	f000 837a 	beq.w	875b6 <_svfprintf_r+0x17ea>
   86ec2:	f108 0801 	add.w	r8, r8, #1
   86ec6:	f04f 0900 	mov.w	r9, #0
   86eca:	e7ca      	b.n	86e62 <_svfprintf_r+0x1096>
   86ecc:	aa2c      	add	r2, sp, #176	; 0xb0
   86ece:	990a      	ldr	r1, [sp, #40]	; 0x28
   86ed0:	9807      	ldr	r0, [sp, #28]
   86ed2:	f002 fe73 	bl	89bbc <__ssprint_r>
   86ed6:	2800      	cmp	r0, #0
   86ed8:	f47f a849 	bne.w	85f6e <_svfprintf_r+0x1a2>
   86edc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   86ede:	af2f      	add	r7, sp, #188	; 0xbc
   86ee0:	930c      	str	r3, [sp, #48]	; 0x30
   86ee2:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
   86ee4:	e495      	b.n	86812 <_svfprintf_r+0xa46>
   86ee6:	aa2c      	add	r2, sp, #176	; 0xb0
   86ee8:	990a      	ldr	r1, [sp, #40]	; 0x28
   86eea:	9807      	ldr	r0, [sp, #28]
   86eec:	f002 fe66 	bl	89bbc <__ssprint_r>
   86ef0:	2800      	cmp	r0, #0
   86ef2:	f47f a83c 	bne.w	85f6e <_svfprintf_r+0x1a2>
   86ef6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   86ef8:	af2f      	add	r7, sp, #188	; 0xbc
   86efa:	930c      	str	r3, [sp, #48]	; 0x30
   86efc:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
   86efe:	e496      	b.n	8682e <_svfprintf_r+0xa62>
   86f00:	2a01      	cmp	r2, #1
   86f02:	f47f a8b0 	bne.w	86066 <_svfprintf_r+0x29a>
   86f06:	e4d8      	b.n	868ba <_svfprintf_r+0xaee>
   86f08:	9b08      	ldr	r3, [sp, #32]
   86f0a:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
   86f0e:	1b9b      	subs	r3, r3, r6
   86f10:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   86f14:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
   86f18:	9f10      	ldr	r7, [sp, #64]	; 0x40
   86f1a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   86f1e:	930c      	str	r3, [sp, #48]	; 0x30
   86f20:	f7ff bbb3 	b.w	8668a <_svfprintf_r+0x8be>
   86f24:	aa2c      	add	r2, sp, #176	; 0xb0
   86f26:	990a      	ldr	r1, [sp, #40]	; 0x28
   86f28:	9807      	ldr	r0, [sp, #28]
   86f2a:	f002 fe47 	bl	89bbc <__ssprint_r>
   86f2e:	2800      	cmp	r0, #0
   86f30:	f47f a81d 	bne.w	85f6e <_svfprintf_r+0x1a2>
   86f34:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   86f38:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
   86f3a:	f7ff b9b5 	b.w	862a8 <_svfprintf_r+0x4dc>
   86f3e:	4621      	mov	r1, r4
   86f40:	461c      	mov	r4, r3
   86f42:	460b      	mov	r3, r1
   86f44:	3201      	adds	r2, #1
   86f46:	442c      	add	r4, r5
   86f48:	2a07      	cmp	r2, #7
   86f4a:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
   86f4e:	e9c9 3500 	strd	r3, r5, [r9]
   86f52:	f77f a9f4 	ble.w	8633e <_svfprintf_r+0x572>
   86f56:	e4fb      	b.n	86950 <_svfprintf_r+0xb84>
   86f58:	aa2c      	add	r2, sp, #176	; 0xb0
   86f5a:	990a      	ldr	r1, [sp, #40]	; 0x28
   86f5c:	9807      	ldr	r0, [sp, #28]
   86f5e:	f002 fe2d 	bl	89bbc <__ssprint_r>
   86f62:	2800      	cmp	r0, #0
   86f64:	f47f a803 	bne.w	85f6e <_svfprintf_r+0x1a2>
   86f68:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   86f6c:	f7ff bbb4 	b.w	866d8 <_svfprintf_r+0x90c>
   86f70:	4b11      	ldr	r3, [pc, #68]	; (86fb8 <_svfprintf_r+0x11ec>)
   86f72:	f7ff b9ca 	b.w	8630a <_svfprintf_r+0x53e>
   86f76:	920c      	str	r2, [sp, #48]	; 0x30
   86f78:	463a      	mov	r2, r7
   86f7a:	461f      	mov	r7, r3
   86f7c:	4613      	mov	r3, r2
   86f7e:	1c6a      	adds	r2, r5, #1
   86f80:	920e      	str	r2, [sp, #56]	; 0x38
   86f82:	f107 0208 	add.w	r2, r7, #8
   86f86:	990c      	ldr	r1, [sp, #48]	; 0x30
   86f88:	e9c7 3a00 	strd	r3, sl, [r7]
   86f8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86f8e:	4451      	add	r1, sl
   86f90:	2b07      	cmp	r3, #7
   86f92:	910c      	str	r1, [sp, #48]	; 0x30
   86f94:	912e      	str	r1, [sp, #184]	; 0xb8
   86f96:	932d      	str	r3, [sp, #180]	; 0xb4
   86f98:	f73f ae98 	bgt.w	86ccc <_svfprintf_r+0xf00>
   86f9c:	3301      	adds	r3, #1
   86f9e:	930e      	str	r3, [sp, #56]	; 0x38
   86fa0:	f102 0908 	add.w	r9, r2, #8
   86fa4:	4617      	mov	r7, r2
   86fa6:	e466      	b.n	86876 <_svfprintf_r+0xaaa>
   86fa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86faa:	465e      	mov	r6, fp
   86fac:	601a      	str	r2, [r3, #0]
   86fae:	f7ff b8c6 	b.w	8613e <_svfprintf_r+0x372>
   86fb2:	bf00      	nop
   86fb4:	0008aa9c 	.word	0x0008aa9c
   86fb8:	0008aab8 	.word	0x0008aab8
   86fbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86fbe:	464a      	mov	r2, r9
   86fc0:	18f3      	adds	r3, r6, r3
   86fc2:	930c      	str	r3, [sp, #48]	; 0x30
   86fc4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   86fc6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   86fca:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   86fce:	9612      	str	r6, [sp, #72]	; 0x48
   86fd0:	4fbd      	ldr	r7, [pc, #756]	; (872c8 <_svfprintf_r+0x14fc>)
   86fd2:	4656      	mov	r6, sl
   86fd4:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
   86fd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
   86fdc:	4621      	mov	r1, r4
   86fde:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   86fe2:	f8dd a01c 	ldr.w	sl, [sp, #28]
   86fe6:	2b00      	cmp	r3, #0
   86fe8:	d05d      	beq.n	870a6 <_svfprintf_r+0x12da>
   86fea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86fec:	2b00      	cmp	r3, #0
   86fee:	d15e      	bne.n	870ae <_svfprintf_r+0x12e2>
   86ff0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   86ff2:	f108 38ff 	add.w	r8, r8, #4294967295
   86ff6:	3b01      	subs	r3, #1
   86ff8:	9316      	str	r3, [sp, #88]	; 0x58
   86ffa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   86ffc:	981e      	ldr	r0, [sp, #120]	; 0x78
   86ffe:	3301      	adds	r3, #1
   87000:	4449      	add	r1, r9
   87002:	2b07      	cmp	r3, #7
   87004:	912e      	str	r1, [sp, #184]	; 0xb8
   87006:	e9c2 0900 	strd	r0, r9, [r2]
   8700a:	932d      	str	r3, [sp, #180]	; 0xb4
   8700c:	dc53      	bgt.n	870b6 <_svfprintf_r+0x12ea>
   8700e:	3208      	adds	r2, #8
   87010:	980c      	ldr	r0, [sp, #48]	; 0x30
   87012:	f898 3000 	ldrb.w	r3, [r8]
   87016:	1b85      	subs	r5, r0, r6
   87018:	429d      	cmp	r5, r3
   8701a:	bfa8      	it	ge
   8701c:	461d      	movge	r5, r3
   8701e:	2d00      	cmp	r5, #0
   87020:	dd0b      	ble.n	8703a <_svfprintf_r+0x126e>
   87022:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   87024:	4429      	add	r1, r5
   87026:	3301      	adds	r3, #1
   87028:	2b07      	cmp	r3, #7
   8702a:	912e      	str	r1, [sp, #184]	; 0xb8
   8702c:	e9c2 6500 	strd	r6, r5, [r2]
   87030:	932d      	str	r3, [sp, #180]	; 0xb4
   87032:	dc4b      	bgt.n	870cc <_svfprintf_r+0x1300>
   87034:	f898 3000 	ldrb.w	r3, [r8]
   87038:	3208      	adds	r2, #8
   8703a:	2d00      	cmp	r5, #0
   8703c:	bfb4      	ite	lt
   8703e:	461d      	movlt	r5, r3
   87040:	1b5d      	subge	r5, r3, r5
   87042:	2d00      	cmp	r5, #0
   87044:	dd2b      	ble.n	8709e <_svfprintf_r+0x12d2>
   87046:	2d10      	cmp	r5, #16
   87048:	982d      	ldr	r0, [sp, #180]	; 0xb4
   8704a:	dd1c      	ble.n	87086 <_svfprintf_r+0x12ba>
   8704c:	2410      	movs	r4, #16
   8704e:	e004      	b.n	8705a <_svfprintf_r+0x128e>
   87050:	3d10      	subs	r5, #16
   87052:	2d10      	cmp	r5, #16
   87054:	f102 0208 	add.w	r2, r2, #8
   87058:	dd15      	ble.n	87086 <_svfprintf_r+0x12ba>
   8705a:	3001      	adds	r0, #1
   8705c:	3110      	adds	r1, #16
   8705e:	2807      	cmp	r0, #7
   87060:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
   87064:	e9c2 7400 	strd	r7, r4, [r2]
   87068:	ddf2      	ble.n	87050 <_svfprintf_r+0x1284>
   8706a:	aa2c      	add	r2, sp, #176	; 0xb0
   8706c:	4659      	mov	r1, fp
   8706e:	4650      	mov	r0, sl
   87070:	f002 fda4 	bl	89bbc <__ssprint_r>
   87074:	2800      	cmp	r0, #0
   87076:	f47e af7a 	bne.w	85f6e <_svfprintf_r+0x1a2>
   8707a:	e9dd 012d 	ldrd	r0, r1, [sp, #180]	; 0xb4
   8707e:	3d10      	subs	r5, #16
   87080:	2d10      	cmp	r5, #16
   87082:	aa2f      	add	r2, sp, #188	; 0xbc
   87084:	dce9      	bgt.n	8705a <_svfprintf_r+0x128e>
   87086:	3001      	adds	r0, #1
   87088:	4429      	add	r1, r5
   8708a:	2807      	cmp	r0, #7
   8708c:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
   87090:	e9c2 7500 	strd	r7, r5, [r2]
   87094:	f73e af63 	bgt.w	85f5e <_svfprintf_r+0x192>
   87098:	f898 3000 	ldrb.w	r3, [r8]
   8709c:	3208      	adds	r2, #8
   8709e:	441e      	add	r6, r3
   870a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   870a2:	2b00      	cmp	r3, #0
   870a4:	d1a1      	bne.n	86fea <_svfprintf_r+0x121e>
   870a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   870a8:	2b00      	cmp	r3, #0
   870aa:	f000 80f3 	beq.w	87294 <_svfprintf_r+0x14c8>
   870ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   870b0:	3b01      	subs	r3, #1
   870b2:	9313      	str	r3, [sp, #76]	; 0x4c
   870b4:	e7a1      	b.n	86ffa <_svfprintf_r+0x122e>
   870b6:	aa2c      	add	r2, sp, #176	; 0xb0
   870b8:	4659      	mov	r1, fp
   870ba:	4650      	mov	r0, sl
   870bc:	f002 fd7e 	bl	89bbc <__ssprint_r>
   870c0:	2800      	cmp	r0, #0
   870c2:	f47e af54 	bne.w	85f6e <_svfprintf_r+0x1a2>
   870c6:	aa2f      	add	r2, sp, #188	; 0xbc
   870c8:	992e      	ldr	r1, [sp, #184]	; 0xb8
   870ca:	e7a1      	b.n	87010 <_svfprintf_r+0x1244>
   870cc:	aa2c      	add	r2, sp, #176	; 0xb0
   870ce:	4659      	mov	r1, fp
   870d0:	4650      	mov	r0, sl
   870d2:	f002 fd73 	bl	89bbc <__ssprint_r>
   870d6:	2800      	cmp	r0, #0
   870d8:	f47e af49 	bne.w	85f6e <_svfprintf_r+0x1a2>
   870dc:	aa2f      	add	r2, sp, #188	; 0xbc
   870de:	f898 3000 	ldrb.w	r3, [r8]
   870e2:	992e      	ldr	r1, [sp, #184]	; 0xb8
   870e4:	e7a9      	b.n	8703a <_svfprintf_r+0x126e>
   870e6:	4630      	mov	r0, r6
   870e8:	f002 fd08 	bl	89afc <strlen>
   870ec:	46aa      	mov	sl, r5
   870ee:	4603      	mov	r3, r0
   870f0:	f7ff b9da 	b.w	864a8 <_svfprintf_r+0x6dc>
   870f4:	f898 3000 	ldrb.w	r3, [r8]
   870f8:	aa2f      	add	r2, sp, #188	; 0xbc
   870fa:	992e      	ldr	r1, [sp, #184]	; 0xb8
   870fc:	441e      	add	r6, r3
   870fe:	e7cf      	b.n	870a0 <_svfprintf_r+0x12d4>
   87100:	f109 0908 	add.w	r9, r9, #8
   87104:	e637      	b.n	86d76 <_svfprintf_r+0xfaa>
   87106:	7814      	ldrb	r4, [r2, #0]
   87108:	2500      	movs	r5, #0
   8710a:	2201      	movs	r2, #1
   8710c:	910d      	str	r1, [sp, #52]	; 0x34
   8710e:	f7fe bf53 	b.w	85fb8 <_svfprintf_r+0x1ec>
   87112:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87114:	465e      	mov	r6, fp
   87116:	801a      	strh	r2, [r3, #0]
   87118:	f7ff b811 	b.w	8613e <_svfprintf_r+0x372>
   8711c:	7814      	ldrb	r4, [r2, #0]
   8711e:	2500      	movs	r5, #0
   87120:	930d      	str	r3, [sp, #52]	; 0x34
   87122:	f7fe bfe4 	b.w	860ee <_svfprintf_r+0x322>
   87126:	7814      	ldrb	r4, [r2, #0]
   87128:	2500      	movs	r5, #0
   8712a:	930d      	str	r3, [sp, #52]	; 0x34
   8712c:	f7fe bf41 	b.w	85fb2 <_svfprintf_r+0x1e6>
   87130:	f991 4000 	ldrsb.w	r4, [r1]
   87134:	920d      	str	r2, [sp, #52]	; 0x34
   87136:	17e5      	asrs	r5, r4, #31
   87138:	4620      	mov	r0, r4
   8713a:	4629      	mov	r1, r5
   8713c:	f7fe bf79 	b.w	86032 <_svfprintf_r+0x266>
   87140:	f018 0f01 	tst.w	r8, #1
   87144:	f43f a8fd 	beq.w	86342 <_svfprintf_r+0x576>
   87148:	f7ff bbe7 	b.w	8691a <_svfprintf_r+0xb4e>
   8714c:	2230      	movs	r2, #48	; 0x30
   8714e:	2358      	movs	r3, #88	; 0x58
   87150:	f88d 2094 	strb.w	r2, [sp, #148]	; 0x94
   87154:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
   87158:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
   8715c:	f048 0402 	orr.w	r4, r8, #2
   87160:	f300 81e6 	bgt.w	87530 <_svfprintf_r+0x1764>
   87164:	f448 7381 	orr.w	r3, r8, #258	; 0x102
   87168:	9312      	str	r3, [sp, #72]	; 0x48
   8716a:	f027 0320 	bic.w	r3, r7, #32
   8716e:	9308      	str	r3, [sp, #32]
   87170:	2300      	movs	r3, #0
   87172:	46a0      	mov	r8, r4
   87174:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   87176:	9310      	str	r3, [sp, #64]	; 0x40
   87178:	ae3f      	add	r6, sp, #252	; 0xfc
   8717a:	2d00      	cmp	r5, #0
   8717c:	f2c0 80e2 	blt.w	87344 <_svfprintf_r+0x1578>
   87180:	9b18      	ldr	r3, [sp, #96]	; 0x60
   87182:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   87184:	930c      	str	r3, [sp, #48]	; 0x30
   87186:	2300      	movs	r3, #0
   87188:	9311      	str	r3, [sp, #68]	; 0x44
   8718a:	2f61      	cmp	r7, #97	; 0x61
   8718c:	f000 8193 	beq.w	874b6 <_svfprintf_r+0x16ea>
   87190:	2f41      	cmp	r7, #65	; 0x41
   87192:	f47f acfa 	bne.w	86b8a <_svfprintf_r+0xdbe>
   87196:	aa26      	add	r2, sp, #152	; 0x98
   87198:	980c      	ldr	r0, [sp, #48]	; 0x30
   8719a:	4629      	mov	r1, r5
   8719c:	f002 fc6a 	bl	89a74 <frexp>
   871a0:	2200      	movs	r2, #0
   871a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   871a6:	f002 ffe1 	bl	8a16c <__aeabi_dmul>
   871aa:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
   871ae:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   871b2:	f003 fa43 	bl	8a63c <__aeabi_dcmpeq>
   871b6:	2800      	cmp	r0, #0
   871b8:	f040 8244 	bne.w	87644 <_svfprintf_r+0x1878>
   871bc:	4b43      	ldr	r3, [pc, #268]	; (872cc <_svfprintf_r+0x1500>)
   871be:	930c      	str	r3, [sp, #48]	; 0x30
   871c0:	e9cd 7a15 	strd	r7, sl, [sp, #84]	; 0x54
   871c4:	f10a 35ff 	add.w	r5, sl, #4294967295
   871c8:	e9cd 9b13 	strd	r9, fp, [sp, #76]	; 0x4c
   871cc:	9623      	str	r6, [sp, #140]	; 0x8c
   871ce:	46b1      	mov	r9, r6
   871d0:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   871d4:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
   871d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   871dc:	e005      	b.n	871ea <_svfprintf_r+0x141e>
   871de:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
   871e2:	f003 fa2b 	bl	8a63c <__aeabi_dcmpeq>
   871e6:	b9f8      	cbnz	r0, 87228 <_svfprintf_r+0x145c>
   871e8:	46a1      	mov	r9, r4
   871ea:	2200      	movs	r2, #0
   871ec:	4b38      	ldr	r3, [pc, #224]	; (872d0 <_svfprintf_r+0x1504>)
   871ee:	4630      	mov	r0, r6
   871f0:	4639      	mov	r1, r7
   871f2:	f002 ffbb 	bl	8a16c <__aeabi_dmul>
   871f6:	460f      	mov	r7, r1
   871f8:	4606      	mov	r6, r0
   871fa:	f003 fa67 	bl	8a6cc <__aeabi_d2iz>
   871fe:	4680      	mov	r8, r0
   87200:	f002 ff4a 	bl	8a098 <__aeabi_i2d>
   87204:	4602      	mov	r2, r0
   87206:	460b      	mov	r3, r1
   87208:	4630      	mov	r0, r6
   8720a:	4639      	mov	r1, r7
   8720c:	f002 fdf6 	bl	89dfc <__aeabi_dsub>
   87210:	464c      	mov	r4, r9
   87212:	f81a c008 	ldrb.w	ip, [sl, r8]
   87216:	1c6a      	adds	r2, r5, #1
   87218:	46ab      	mov	fp, r5
   8721a:	4606      	mov	r6, r0
   8721c:	460f      	mov	r7, r1
   8721e:	f804 cb01 	strb.w	ip, [r4], #1
   87222:	f105 35ff 	add.w	r5, r5, #4294967295
   87226:	d1da      	bne.n	871de <_svfprintf_r+0x1412>
   87228:	4630      	mov	r0, r6
   8722a:	4639      	mov	r1, r7
   8722c:	2200      	movs	r2, #0
   8722e:	4b29      	ldr	r3, [pc, #164]	; (872d4 <_svfprintf_r+0x1508>)
   87230:	9f15      	ldr	r7, [sp, #84]	; 0x54
   87232:	4645      	mov	r5, r8
   87234:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
   87238:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8723c:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
   87240:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
   87244:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   87248:	9e23      	ldr	r6, [sp, #140]	; 0x8c
   8724a:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
   8724e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   87252:	f003 fa1b 	bl	8a68c <__aeabi_dcmpgt>
   87256:	2800      	cmp	r0, #0
   87258:	f040 80af 	bne.w	873ba <_svfprintf_r+0x15ee>
   8725c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   87260:	2200      	movs	r2, #0
   87262:	4b1c      	ldr	r3, [pc, #112]	; (872d4 <_svfprintf_r+0x1508>)
   87264:	f003 f9ea 	bl	8a63c <__aeabi_dcmpeq>
   87268:	b118      	cbz	r0, 87272 <_svfprintf_r+0x14a6>
   8726a:	462b      	mov	r3, r5
   8726c:	07db      	lsls	r3, r3, #31
   8726e:	f100 80a4 	bmi.w	873ba <_svfprintf_r+0x15ee>
   87272:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87274:	2b00      	cmp	r3, #0
   87276:	db07      	blt.n	87288 <_svfprintf_r+0x14bc>
   87278:	2230      	movs	r2, #48	; 0x30
   8727a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8727c:	3301      	adds	r3, #1
   8727e:	4423      	add	r3, r4
   87280:	f804 2b01 	strb.w	r2, [r4], #1
   87284:	42a3      	cmp	r3, r4
   87286:	d1fb      	bne.n	87280 <_svfprintf_r+0x14b4>
   87288:	1ba3      	subs	r3, r4, r6
   8728a:	4640      	mov	r0, r8
   8728c:	9314      	str	r3, [sp, #80]	; 0x50
   8728e:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   87292:	e4a5      	b.n	86be0 <_svfprintf_r+0xe14>
   87294:	46b2      	mov	sl, r6
   87296:	9b14      	ldr	r3, [sp, #80]	; 0x50
   87298:	9e12      	ldr	r6, [sp, #72]	; 0x48
   8729a:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
   8729e:	18f3      	adds	r3, r6, r3
   872a0:	459a      	cmp	sl, r3
   872a2:	4691      	mov	r9, r2
   872a4:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   872a8:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
   872ac:	460c      	mov	r4, r1
   872ae:	bf28      	it	cs
   872b0:	469a      	movcs	sl, r3
   872b2:	e567      	b.n	86d84 <_svfprintf_r+0xfb8>
   872b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   872b6:	1cda      	adds	r2, r3, #3
   872b8:	db01      	blt.n	872be <_svfprintf_r+0x14f2>
   872ba:	4553      	cmp	r3, sl
   872bc:	dd0c      	ble.n	872d8 <_svfprintf_r+0x150c>
   872be:	3f02      	subs	r7, #2
   872c0:	f027 0320 	bic.w	r3, r7, #32
   872c4:	9308      	str	r3, [sp, #32]
   872c6:	e495      	b.n	86bf4 <_svfprintf_r+0xe28>
   872c8:	0008aab8 	.word	0x0008aab8
   872cc:	0008aa88 	.word	0x0008aa88
   872d0:	40300000 	.word	0x40300000
   872d4:	3fe00000 	.word	0x3fe00000
   872d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   872da:	9914      	ldr	r1, [sp, #80]	; 0x50
   872dc:	428b      	cmp	r3, r1
   872de:	f2c0 80e0 	blt.w	874a2 <_svfprintf_r+0x16d6>
   872e2:	07c2      	lsls	r2, r0, #31
   872e4:	f140 81ab 	bpl.w	8763e <_svfprintf_r+0x1872>
   872e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   872ea:	4413      	add	r3, r2
   872ec:	930c      	str	r3, [sp, #48]	; 0x30
   872ee:	0547      	lsls	r7, r0, #21
   872f0:	f140 80c2 	bpl.w	87478 <_svfprintf_r+0x16ac>
   872f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   872f6:	2b00      	cmp	r3, #0
   872f8:	f300 824c 	bgt.w	87794 <_svfprintf_r+0x19c8>
   872fc:	2767      	movs	r7, #103	; 0x67
   872fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87300:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87304:	9308      	str	r3, [sp, #32]
   87306:	2300      	movs	r3, #0
   87308:	9313      	str	r3, [sp, #76]	; 0x4c
   8730a:	9316      	str	r3, [sp, #88]	; 0x58
   8730c:	e4b3      	b.n	86c76 <_svfprintf_r+0xeaa>
   8730e:	222d      	movs	r2, #45	; 0x2d
   87310:	f04f 0a00 	mov.w	sl, #0
   87314:	f88d 2093 	strb.w	r2, [sp, #147]	; 0x93
   87318:	f7ff b8a9 	b.w	8646e <_svfprintf_r+0x6a2>
   8731c:	232d      	movs	r3, #45	; 0x2d
   8731e:	461a      	mov	r2, r3
   87320:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
   87324:	f7ff b890 	b.w	86448 <_svfprintf_r+0x67c>
   87328:	aa2c      	add	r2, sp, #176	; 0xb0
   8732a:	990a      	ldr	r1, [sp, #40]	; 0x28
   8732c:	9807      	ldr	r0, [sp, #28]
   8732e:	f002 fc45 	bl	89bbc <__ssprint_r>
   87332:	2800      	cmp	r0, #0
   87334:	f47e ae1b 	bne.w	85f6e <_svfprintf_r+0x1a2>
   87338:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   8733c:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
   8733e:	f7ff bb3b 	b.w	869b8 <_svfprintf_r+0xbec>
   87342:	9010      	str	r0, [sp, #64]	; 0x40
   87344:	9b18      	ldr	r3, [sp, #96]	; 0x60
   87346:	930c      	str	r3, [sp, #48]	; 0x30
   87348:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   8734a:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
   8734e:	232d      	movs	r3, #45	; 0x2d
   87350:	9311      	str	r3, [sp, #68]	; 0x44
   87352:	e71a      	b.n	8718a <_svfprintf_r+0x13be>
   87354:	2330      	movs	r3, #48	; 0x30
   87356:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
   8735a:	2378      	movs	r3, #120	; 0x78
   8735c:	e6fa      	b.n	87154 <_svfprintf_r+0x1388>
   8735e:	aa2c      	add	r2, sp, #176	; 0xb0
   87360:	990a      	ldr	r1, [sp, #40]	; 0x28
   87362:	9807      	ldr	r0, [sp, #28]
   87364:	f002 fc2a 	bl	89bbc <__ssprint_r>
   87368:	2800      	cmp	r0, #0
   8736a:	f47e ae00 	bne.w	85f6e <_svfprintf_r+0x1a2>
   8736e:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   87372:	3301      	adds	r3, #1
   87374:	af2f      	add	r7, sp, #188	; 0xbc
   87376:	920c      	str	r2, [sp, #48]	; 0x30
   87378:	930e      	str	r3, [sp, #56]	; 0x38
   8737a:	f10d 09c4 	add.w	r9, sp, #196	; 0xc4
   8737e:	f7ff ba7a 	b.w	86876 <_svfprintf_r+0xaaa>
   87382:	f8cd a020 	str.w	sl, [sp, #32]
   87386:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
   8738a:	940d      	str	r4, [sp, #52]	; 0x34
   8738c:	4682      	mov	sl, r0
   8738e:	9013      	str	r0, [sp, #76]	; 0x4c
   87390:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
   87394:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
   87398:	f7ff b866 	b.w	86468 <_svfprintf_r+0x69c>
   8739c:	aa2c      	add	r2, sp, #176	; 0xb0
   8739e:	990a      	ldr	r1, [sp, #40]	; 0x28
   873a0:	9807      	ldr	r0, [sp, #28]
   873a2:	f002 fc0b 	bl	89bbc <__ssprint_r>
   873a6:	2800      	cmp	r0, #0
   873a8:	f47e ade1 	bne.w	85f6e <_svfprintf_r+0x1a2>
   873ac:	e9dd 242d 	ldrd	r2, r4, [sp, #180]	; 0xb4
   873b0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   873b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   873b6:	f7ff babe 	b.w	86936 <_svfprintf_r+0xb6a>
   873ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
   873bc:	932a      	str	r3, [sp, #168]	; 0xa8
   873be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   873c0:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   873c4:	7bd9      	ldrb	r1, [r3, #15]
   873c6:	4623      	mov	r3, r4
   873c8:	4291      	cmp	r1, r2
   873ca:	d109      	bne.n	873e0 <_svfprintf_r+0x1614>
   873cc:	2030      	movs	r0, #48	; 0x30
   873ce:	f803 0c01 	strb.w	r0, [r3, #-1]
   873d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   873d4:	1e5a      	subs	r2, r3, #1
   873d6:	922a      	str	r2, [sp, #168]	; 0xa8
   873d8:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   873dc:	4291      	cmp	r1, r2
   873de:	d0f6      	beq.n	873ce <_svfprintf_r+0x1602>
   873e0:	2a39      	cmp	r2, #57	; 0x39
   873e2:	bf0b      	itete	eq
   873e4:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
   873e6:	3201      	addne	r2, #1
   873e8:	7a92      	ldrbeq	r2, [r2, #10]
   873ea:	b2d2      	uxtbne	r2, r2
   873ec:	f803 2c01 	strb.w	r2, [r3, #-1]
   873f0:	e74a      	b.n	87288 <_svfprintf_r+0x14bc>
   873f2:	aa2c      	add	r2, sp, #176	; 0xb0
   873f4:	990a      	ldr	r1, [sp, #40]	; 0x28
   873f6:	9807      	ldr	r0, [sp, #28]
   873f8:	f002 fbe0 	bl	89bbc <__ssprint_r>
   873fc:	2800      	cmp	r0, #0
   873fe:	f47e adb6 	bne.w	85f6e <_svfprintf_r+0x1a2>
   87402:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   87406:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87408:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
   8740a:	e4c2      	b.n	86d92 <_svfprintf_r+0xfc6>
   8740c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8740e:	2b00      	cmp	r3, #0
   87410:	f340 816c 	ble.w	876ec <_svfprintf_r+0x1920>
   87414:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87416:	f1ba 0f00 	cmp.w	sl, #0
   8741a:	f040 80dc 	bne.w	875d6 <_svfprintf_r+0x180a>
   8741e:	07c4      	lsls	r4, r0, #31
   87420:	f100 80d9 	bmi.w	875d6 <_svfprintf_r+0x180a>
   87424:	2766      	movs	r7, #102	; 0x66
   87426:	930c      	str	r3, [sp, #48]	; 0x30
   87428:	0543      	lsls	r3, r0, #21
   8742a:	d526      	bpl.n	8747a <_svfprintf_r+0x16ae>
   8742c:	2300      	movs	r3, #0
   8742e:	9820      	ldr	r0, [sp, #128]	; 0x80
   87430:	9313      	str	r3, [sp, #76]	; 0x4c
   87432:	9316      	str	r3, [sp, #88]	; 0x58
   87434:	9a15      	ldr	r2, [sp, #84]	; 0x54
   87436:	7803      	ldrb	r3, [r0, #0]
   87438:	2bff      	cmp	r3, #255	; 0xff
   8743a:	d00b      	beq.n	87454 <_svfprintf_r+0x1688>
   8743c:	4293      	cmp	r3, r2
   8743e:	da09      	bge.n	87454 <_svfprintf_r+0x1688>
   87440:	7841      	ldrb	r1, [r0, #1]
   87442:	1ad2      	subs	r2, r2, r3
   87444:	b1a1      	cbz	r1, 87470 <_svfprintf_r+0x16a4>
   87446:	9b16      	ldr	r3, [sp, #88]	; 0x58
   87448:	3001      	adds	r0, #1
   8744a:	3301      	adds	r3, #1
   8744c:	9316      	str	r3, [sp, #88]	; 0x58
   8744e:	460b      	mov	r3, r1
   87450:	2bff      	cmp	r3, #255	; 0xff
   87452:	d1f3      	bne.n	8743c <_svfprintf_r+0x1670>
   87454:	9215      	str	r2, [sp, #84]	; 0x54
   87456:	9b16      	ldr	r3, [sp, #88]	; 0x58
   87458:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8745a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8745c:	4413      	add	r3, r2
   8745e:	9a21      	ldr	r2, [sp, #132]	; 0x84
   87460:	9020      	str	r0, [sp, #128]	; 0x80
   87462:	fb02 1303 	mla	r3, r2, r3, r1
   87466:	930c      	str	r3, [sp, #48]	; 0x30
   87468:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8746c:	9308      	str	r3, [sp, #32]
   8746e:	e402      	b.n	86c76 <_svfprintf_r+0xeaa>
   87470:	9913      	ldr	r1, [sp, #76]	; 0x4c
   87472:	3101      	adds	r1, #1
   87474:	9113      	str	r1, [sp, #76]	; 0x4c
   87476:	e7df      	b.n	87438 <_svfprintf_r+0x166c>
   87478:	2767      	movs	r7, #103	; 0x67
   8747a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8747c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87480:	9308      	str	r3, [sp, #32]
   87482:	e740      	b.n	87306 <_svfprintf_r+0x153a>
   87484:	aa2c      	add	r2, sp, #176	; 0xb0
   87486:	990a      	ldr	r1, [sp, #40]	; 0x28
   87488:	9807      	ldr	r0, [sp, #28]
   8748a:	f002 fb97 	bl	89bbc <__ssprint_r>
   8748e:	2800      	cmp	r0, #0
   87490:	f47e ad6d 	bne.w	85f6e <_svfprintf_r+0x1a2>
   87494:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87496:	9a14      	ldr	r2, [sp, #80]	; 0x50
   87498:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   8749c:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
   8749e:	1ad3      	subs	r3, r2, r3
   874a0:	e48d      	b.n	86dbe <_svfprintf_r+0xff2>
   874a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   874a4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   874a6:	4413      	add	r3, r2
   874a8:	930c      	str	r3, [sp, #48]	; 0x30
   874aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   874ac:	2b00      	cmp	r3, #0
   874ae:	f340 810e 	ble.w	876ce <_svfprintf_r+0x1902>
   874b2:	2767      	movs	r7, #103	; 0x67
   874b4:	e7b8      	b.n	87428 <_svfprintf_r+0x165c>
   874b6:	aa26      	add	r2, sp, #152	; 0x98
   874b8:	980c      	ldr	r0, [sp, #48]	; 0x30
   874ba:	4629      	mov	r1, r5
   874bc:	f002 fada 	bl	89a74 <frexp>
   874c0:	2200      	movs	r2, #0
   874c2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   874c6:	f002 fe51 	bl	8a16c <__aeabi_dmul>
   874ca:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
   874ce:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   874d2:	f003 f8b3 	bl	8a63c <__aeabi_dcmpeq>
   874d6:	b108      	cbz	r0, 874dc <_svfprintf_r+0x1710>
   874d8:	2301      	movs	r3, #1
   874da:	9326      	str	r3, [sp, #152]	; 0x98
   874dc:	4bb6      	ldr	r3, [pc, #728]	; (877b8 <_svfprintf_r+0x19ec>)
   874de:	930c      	str	r3, [sp, #48]	; 0x30
   874e0:	e66e      	b.n	871c0 <_svfprintf_r+0x13f4>
   874e2:	425d      	negs	r5, r3
   874e4:	3310      	adds	r3, #16
   874e6:	f280 814f 	bge.w	87788 <_svfprintf_r+0x19bc>
   874ea:	4bb4      	ldr	r3, [pc, #720]	; (877bc <_svfprintf_r+0x19f0>)
   874ec:	2710      	movs	r7, #16
   874ee:	4619      	mov	r1, r3
   874f0:	f8dd a01c 	ldr.w	sl, [sp, #28]
   874f4:	4623      	mov	r3, r4
   874f6:	460c      	mov	r4, r1
   874f8:	e005      	b.n	87506 <_svfprintf_r+0x173a>
   874fa:	f109 0908 	add.w	r9, r9, #8
   874fe:	3d10      	subs	r5, #16
   87500:	2d10      	cmp	r5, #16
   87502:	f340 80a4 	ble.w	8764e <_svfprintf_r+0x1882>
   87506:	3201      	adds	r2, #1
   87508:	3310      	adds	r3, #16
   8750a:	2a07      	cmp	r2, #7
   8750c:	e9cd 232d 	strd	r2, r3, [sp, #180]	; 0xb4
   87510:	e9c9 4700 	strd	r4, r7, [r9]
   87514:	ddf1      	ble.n	874fa <_svfprintf_r+0x172e>
   87516:	aa2c      	add	r2, sp, #176	; 0xb0
   87518:	990a      	ldr	r1, [sp, #40]	; 0x28
   8751a:	4650      	mov	r0, sl
   8751c:	f002 fb4e 	bl	89bbc <__ssprint_r>
   87520:	2800      	cmp	r0, #0
   87522:	f47e ad24 	bne.w	85f6e <_svfprintf_r+0x1a2>
   87526:	e9dd 232d 	ldrd	r2, r3, [sp, #180]	; 0xb4
   8752a:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   8752e:	e7e6      	b.n	874fe <_svfprintf_r+0x1732>
   87530:	f10a 0101 	add.w	r1, sl, #1
   87534:	9807      	ldr	r0, [sp, #28]
   87536:	f001 fa77 	bl	88a28 <_malloc_r>
   8753a:	4606      	mov	r6, r0
   8753c:	2800      	cmp	r0, #0
   8753e:	f000 8133 	beq.w	877a8 <_svfprintf_r+0x19dc>
   87542:	f448 7381 	orr.w	r3, r8, #258	; 0x102
   87546:	9312      	str	r3, [sp, #72]	; 0x48
   87548:	f027 0320 	bic.w	r3, r7, #32
   8754c:	9308      	str	r3, [sp, #32]
   8754e:	46a0      	mov	r8, r4
   87550:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   87552:	9010      	str	r0, [sp, #64]	; 0x40
   87554:	e611      	b.n	8717a <_svfprintf_r+0x13ae>
   87556:	2003      	movs	r0, #3
   87558:	a92a      	add	r1, sp, #168	; 0xa8
   8755a:	e9cd 0a00 	strd	r0, sl, [sp]
   8755e:	9104      	str	r1, [sp, #16]
   87560:	a827      	add	r0, sp, #156	; 0x9c
   87562:	a926      	add	r1, sp, #152	; 0x98
   87564:	e9cd 1002 	strd	r1, r0, [sp, #8]
   87568:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8756a:	462b      	mov	r3, r5
   8756c:	9807      	ldr	r0, [sp, #28]
   8756e:	f000 f9d3 	bl	87918 <_dtoa_r>
   87572:	4606      	mov	r6, r0
   87574:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   87578:	eb00 040a 	add.w	r4, r0, sl
   8757c:	7833      	ldrb	r3, [r6, #0]
   8757e:	2b30      	cmp	r3, #48	; 0x30
   87580:	f000 80ce 	beq.w	87720 <_svfprintf_r+0x1954>
   87584:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87586:	441c      	add	r4, r3
   87588:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8758a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8758c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   8758e:	4629      	mov	r1, r5
   87590:	f003 f854 	bl	8a63c <__aeabi_dcmpeq>
   87594:	b110      	cbz	r0, 8759c <_svfprintf_r+0x17d0>
   87596:	4623      	mov	r3, r4
   87598:	f7ff bb1d 	b.w	86bd6 <_svfprintf_r+0xe0a>
   8759c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   8759e:	42a3      	cmp	r3, r4
   875a0:	f4bf ab19 	bcs.w	86bd6 <_svfprintf_r+0xe0a>
   875a4:	2130      	movs	r1, #48	; 0x30
   875a6:	1c5a      	adds	r2, r3, #1
   875a8:	922a      	str	r2, [sp, #168]	; 0xa8
   875aa:	7019      	strb	r1, [r3, #0]
   875ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   875ae:	429c      	cmp	r4, r3
   875b0:	d8f9      	bhi.n	875a6 <_svfprintf_r+0x17da>
   875b2:	f7ff bb10 	b.w	86bd6 <_svfprintf_r+0xe0a>
   875b6:	4699      	mov	r9, r3
   875b8:	e453      	b.n	86e62 <_svfprintf_r+0x1096>
   875ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   875bc:	4433      	add	r3, r6
   875be:	461c      	mov	r4, r3
   875c0:	e7e2      	b.n	87588 <_svfprintf_r+0x17bc>
   875c2:	f1ba 0f00 	cmp.w	sl, #0
   875c6:	f000 809b 	beq.w	87700 <_svfprintf_r+0x1934>
   875ca:	9010      	str	r0, [sp, #64]	; 0x40
   875cc:	e5d5      	b.n	8717a <_svfprintf_r+0x13ae>
   875ce:	9010      	str	r0, [sp, #64]	; 0x40
   875d0:	f04f 0a06 	mov.w	sl, #6
   875d4:	e5d1      	b.n	8717a <_svfprintf_r+0x13ae>
   875d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   875d8:	2766      	movs	r7, #102	; 0x66
   875da:	4413      	add	r3, r2
   875dc:	4453      	add	r3, sl
   875de:	930c      	str	r3, [sp, #48]	; 0x30
   875e0:	e722      	b.n	87428 <_svfprintf_r+0x165c>
   875e2:	f10d 0caf 	add.w	ip, sp, #175	; 0xaf
   875e6:	4664      	mov	r4, ip
   875e8:	4d75      	ldr	r5, [pc, #468]	; (877c0 <_svfprintf_r+0x19f4>)
   875ea:	e000      	b.n	875ee <_svfprintf_r+0x1822>
   875ec:	4614      	mov	r4, r2
   875ee:	fba5 2103 	umull	r2, r1, r5, r3
   875f2:	08c9      	lsrs	r1, r1, #3
   875f4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   875f8:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   875fc:	3230      	adds	r2, #48	; 0x30
   875fe:	2909      	cmp	r1, #9
   87600:	f804 2c01 	strb.w	r2, [r4, #-1]
   87604:	460b      	mov	r3, r1
   87606:	f104 32ff 	add.w	r2, r4, #4294967295
   8760a:	dcef      	bgt.n	875ec <_svfprintf_r+0x1820>
   8760c:	3330      	adds	r3, #48	; 0x30
   8760e:	3c02      	subs	r4, #2
   87610:	b2db      	uxtb	r3, r3
   87612:	45a4      	cmp	ip, r4
   87614:	f802 3c01 	strb.w	r3, [r2, #-1]
   87618:	f240 80b8 	bls.w	8778c <_svfprintf_r+0x19c0>
   8761c:	f10d 04a2 	add.w	r4, sp, #162	; 0xa2
   87620:	4611      	mov	r1, r2
   87622:	e001      	b.n	87628 <_svfprintf_r+0x185c>
   87624:	f811 3b01 	ldrb.w	r3, [r1], #1
   87628:	458c      	cmp	ip, r1
   8762a:	f804 3b01 	strb.w	r3, [r4], #1
   8762e:	d1f9      	bne.n	87624 <_svfprintf_r+0x1858>
   87630:	ab2c      	add	r3, sp, #176	; 0xb0
   87632:	1a9b      	subs	r3, r3, r2
   87634:	f10d 02a2 	add.w	r2, sp, #162	; 0xa2
   87638:	4413      	add	r3, r2
   8763a:	f7ff bb03 	b.w	86c44 <_svfprintf_r+0xe78>
   8763e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87640:	930c      	str	r3, [sp, #48]	; 0x30
   87642:	e654      	b.n	872ee <_svfprintf_r+0x1522>
   87644:	2301      	movs	r3, #1
   87646:	9326      	str	r3, [sp, #152]	; 0x98
   87648:	4b5e      	ldr	r3, [pc, #376]	; (877c4 <_svfprintf_r+0x19f8>)
   8764a:	930c      	str	r3, [sp, #48]	; 0x30
   8764c:	e5b8      	b.n	871c0 <_svfprintf_r+0x13f4>
   8764e:	4621      	mov	r1, r4
   87650:	461c      	mov	r4, r3
   87652:	460b      	mov	r3, r1
   87654:	3201      	adds	r2, #1
   87656:	442c      	add	r4, r5
   87658:	2a07      	cmp	r2, #7
   8765a:	e9cd 242d 	strd	r2, r4, [sp, #180]	; 0xb4
   8765e:	e9c9 3500 	strd	r3, r5, [r9]
   87662:	f300 8083 	bgt.w	8776c <_svfprintf_r+0x19a0>
   87666:	f109 0908 	add.w	r9, r9, #8
   8766a:	f7ff b967 	b.w	8693c <_svfprintf_r+0xb70>
   8766e:	2003      	movs	r0, #3
   87670:	a92a      	add	r1, sp, #168	; 0xa8
   87672:	e9cd 0a00 	strd	r0, sl, [sp]
   87676:	9104      	str	r1, [sp, #16]
   87678:	a827      	add	r0, sp, #156	; 0x9c
   8767a:	a926      	add	r1, sp, #152	; 0x98
   8767c:	e9cd 1002 	strd	r1, r0, [sp, #8]
   87680:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87682:	462b      	mov	r3, r5
   87684:	9807      	ldr	r0, [sp, #28]
   87686:	f000 f947 	bl	87918 <_dtoa_r>
   8768a:	4606      	mov	r6, r0
   8768c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   87690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87692:	2f46      	cmp	r7, #70	; 0x46
   87694:	eb06 0403 	add.w	r4, r6, r3
   87698:	f43f af70 	beq.w	8757c <_svfprintf_r+0x17b0>
   8769c:	e774      	b.n	87588 <_svfprintf_r+0x17bc>
   8769e:	4b47      	ldr	r3, [pc, #284]	; (877bc <_svfprintf_r+0x19f0>)
   876a0:	e450      	b.n	86f44 <_svfprintf_r+0x1178>
   876a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   876a4:	2003      	movs	r0, #3
   876a6:	2b00      	cmp	r3, #0
   876a8:	bfb8      	it	lt
   876aa:	232d      	movlt	r3, #45	; 0x2d
   876ac:	f04f 0100 	mov.w	r1, #0
   876b0:	bfba      	itte	lt
   876b2:	461a      	movlt	r2, r3
   876b4:	f88d 3093 	strblt.w	r3, [sp, #147]	; 0x93
   876b8:	f89d 2093 	ldrbge.w	r2, [sp, #147]	; 0x93
   876bc:	9008      	str	r0, [sp, #32]
   876be:	9110      	str	r1, [sp, #64]	; 0x40
   876c0:	4e41      	ldr	r6, [pc, #260]	; (877c8 <_svfprintf_r+0x19fc>)
   876c2:	4b42      	ldr	r3, [pc, #264]	; (877cc <_svfprintf_r+0x1a00>)
   876c4:	f7fe bec6 	b.w	86454 <_svfprintf_r+0x688>
   876c8:	464a      	mov	r2, r9
   876ca:	4b3c      	ldr	r3, [pc, #240]	; (877bc <_svfprintf_r+0x19f0>)
   876cc:	e45b      	b.n	86f86 <_svfprintf_r+0x11ba>
   876ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   876d0:	f1c3 0301 	rsb	r3, r3, #1
   876d4:	441a      	add	r2, r3
   876d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   876da:	920c      	str	r2, [sp, #48]	; 0x30
   876dc:	9308      	str	r3, [sp, #32]
   876de:	2767      	movs	r7, #103	; 0x67
   876e0:	e611      	b.n	87306 <_svfprintf_r+0x153a>
   876e2:	07c5      	lsls	r5, r0, #31
   876e4:	f57f aabb 	bpl.w	86c5e <_svfprintf_r+0xe92>
   876e8:	f7ff bab5 	b.w	86c56 <_svfprintf_r+0xe8a>
   876ec:	f1ba 0f00 	cmp.w	sl, #0
   876f0:	d128      	bne.n	87744 <_svfprintf_r+0x1978>
   876f2:	07c1      	lsls	r1, r0, #31
   876f4:	d426      	bmi.n	87744 <_svfprintf_r+0x1978>
   876f6:	2301      	movs	r3, #1
   876f8:	2766      	movs	r7, #102	; 0x66
   876fa:	9308      	str	r3, [sp, #32]
   876fc:	930c      	str	r3, [sp, #48]	; 0x30
   876fe:	e602      	b.n	87306 <_svfprintf_r+0x153a>
   87700:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
   87704:	f04f 0a01 	mov.w	sl, #1
   87708:	e537      	b.n	8717a <_svfprintf_r+0x13ae>
   8770a:	4b2c      	ldr	r3, [pc, #176]	; (877bc <_svfprintf_r+0x19f0>)
   8770c:	f7ff bb1f 	b.w	86d4e <_svfprintf_r+0xf82>
   87710:	2f47      	cmp	r7, #71	; 0x47
   87712:	f47f af52 	bne.w	875ba <_svfprintf_r+0x17ee>
   87716:	f018 0f01 	tst.w	r8, #1
   8771a:	f43f aa5b 	beq.w	86bd4 <_svfprintf_r+0xe08>
   8771e:	e7b7      	b.n	87690 <_svfprintf_r+0x18c4>
   87720:	9a19      	ldr	r2, [sp, #100]	; 0x64
   87722:	980c      	ldr	r0, [sp, #48]	; 0x30
   87724:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   87726:	4629      	mov	r1, r5
   87728:	f002 ff88 	bl	8a63c <__aeabi_dcmpeq>
   8772c:	2800      	cmp	r0, #0
   8772e:	f47f af29 	bne.w	87584 <_svfprintf_r+0x17b8>
   87732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87734:	f1c3 0301 	rsb	r3, r3, #1
   87738:	9326      	str	r3, [sp, #152]	; 0x98
   8773a:	e724      	b.n	87586 <_svfprintf_r+0x17ba>
   8773c:	f10d 02a2 	add.w	r2, sp, #162	; 0xa2
   87740:	f7ff ba7d 	b.w	86c3e <_svfprintf_r+0xe72>
   87744:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   87746:	2766      	movs	r7, #102	; 0x66
   87748:	3301      	adds	r3, #1
   8774a:	4453      	add	r3, sl
   8774c:	930c      	str	r3, [sp, #48]	; 0x30
   8774e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87752:	9308      	str	r3, [sp, #32]
   87754:	e5d7      	b.n	87306 <_svfprintf_r+0x153a>
   87756:	990d      	ldr	r1, [sp, #52]	; 0x34
   87758:	f89b 7001 	ldrb.w	r7, [fp, #1]
   8775c:	680b      	ldr	r3, [r1, #0]
   8775e:	4693      	mov	fp, r2
   87760:	ea43 7ae3 	orr.w	sl, r3, r3, asr #31
   87764:	1d0b      	adds	r3, r1, #4
   87766:	930d      	str	r3, [sp, #52]	; 0x34
   87768:	f7fe bb87 	b.w	85e7a <_svfprintf_r+0xae>
   8776c:	aa2c      	add	r2, sp, #176	; 0xb0
   8776e:	990a      	ldr	r1, [sp, #40]	; 0x28
   87770:	9807      	ldr	r0, [sp, #28]
   87772:	f002 fa23 	bl	89bbc <__ssprint_r>
   87776:	2800      	cmp	r0, #0
   87778:	f47e abf9 	bne.w	85f6e <_svfprintf_r+0x1a2>
   8777c:	e9dd 242d 	ldrd	r2, r4, [sp, #180]	; 0xb4
   87780:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   87784:	f7ff b8da 	b.w	8693c <_svfprintf_r+0xb70>
   87788:	4b0c      	ldr	r3, [pc, #48]	; (877bc <_svfprintf_r+0x19f0>)
   8778a:	e763      	b.n	87654 <_svfprintf_r+0x1888>
   8778c:	f10d 03a2 	add.w	r3, sp, #162	; 0xa2
   87790:	f7ff ba58 	b.w	86c44 <_svfprintf_r+0xe78>
   87794:	2767      	movs	r7, #103	; 0x67
   87796:	e649      	b.n	8742c <_svfprintf_r+0x1660>
   87798:	f04f 32ff 	mov.w	r2, #4294967295
   8779c:	230c      	movs	r3, #12
   8779e:	9209      	str	r2, [sp, #36]	; 0x24
   877a0:	9a07      	ldr	r2, [sp, #28]
   877a2:	6013      	str	r3, [r2, #0]
   877a4:	f7fe bbf2 	b.w	85f8c <_svfprintf_r+0x1c0>
   877a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   877aa:	8993      	ldrh	r3, [r2, #12]
   877ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   877b0:	8193      	strh	r3, [r2, #12]
   877b2:	f7fe bbe4 	b.w	85f7e <_svfprintf_r+0x1b2>
   877b6:	bf00      	nop
   877b8:	0008aa74 	.word	0x0008aa74
   877bc:	0008aab8 	.word	0x0008aab8
   877c0:	cccccccd 	.word	0xcccccccd
   877c4:	0008aa88 	.word	0x0008aa88
   877c8:	0008aa70 	.word	0x0008aa70
   877cc:	0008aa6c 	.word	0x0008aa6c

000877d0 <register_fini>:
   877d0:	4b02      	ldr	r3, [pc, #8]	; (877dc <register_fini+0xc>)
   877d2:	b113      	cbz	r3, 877da <register_fini+0xa>
   877d4:	4802      	ldr	r0, [pc, #8]	; (877e0 <register_fini+0x10>)
   877d6:	f000 b805 	b.w	877e4 <atexit>
   877da:	4770      	bx	lr
   877dc:	00000000 	.word	0x00000000
   877e0:	00088749 	.word	0x00088749

000877e4 <atexit>:
   877e4:	2300      	movs	r3, #0
   877e6:	4601      	mov	r1, r0
   877e8:	461a      	mov	r2, r3
   877ea:	4618      	mov	r0, r3
   877ec:	f002 ba6c 	b.w	89cc8 <__register_exitproc>

000877f0 <quorem>:
   877f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   877f4:	6903      	ldr	r3, [r0, #16]
   877f6:	690e      	ldr	r6, [r1, #16]
   877f8:	b083      	sub	sp, #12
   877fa:	42b3      	cmp	r3, r6
   877fc:	f2c0 8086 	blt.w	8790c <quorem+0x11c>
   87800:	3e01      	subs	r6, #1
   87802:	f101 0814 	add.w	r8, r1, #20
   87806:	f100 0914 	add.w	r9, r0, #20
   8780a:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
   8780e:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
   87812:	3301      	adds	r3, #1
   87814:	fbb7 f7f3 	udiv	r7, r7, r3
   87818:	00b3      	lsls	r3, r6, #2
   8781a:	9300      	str	r3, [sp, #0]
   8781c:	eb08 0a03 	add.w	sl, r8, r3
   87820:	444b      	add	r3, r9
   87822:	9301      	str	r3, [sp, #4]
   87824:	2f00      	cmp	r7, #0
   87826:	d03b      	beq.n	878a0 <quorem+0xb0>
   87828:	2300      	movs	r3, #0
   8782a:	46c6      	mov	lr, r8
   8782c:	461c      	mov	r4, r3
   8782e:	46cc      	mov	ip, r9
   87830:	f85e 2b04 	ldr.w	r2, [lr], #4
   87834:	f8dc 5000 	ldr.w	r5, [ip]
   87838:	fa1f fb82 	uxth.w	fp, r2
   8783c:	fb07 330b 	mla	r3, r7, fp, r3
   87840:	0c12      	lsrs	r2, r2, #16
   87842:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   87846:	fb07 bb02 	mla	fp, r7, r2, fp
   8784a:	b29a      	uxth	r2, r3
   8784c:	1aa2      	subs	r2, r4, r2
   8784e:	b2ab      	uxth	r3, r5
   87850:	fa1f f48b 	uxth.w	r4, fp
   87854:	441a      	add	r2, r3
   87856:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   8785a:	eb04 4422 	add.w	r4, r4, r2, asr #16
   8785e:	b292      	uxth	r2, r2
   87860:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   87864:	45f2      	cmp	sl, lr
   87866:	f84c 2b04 	str.w	r2, [ip], #4
   8786a:	ea4f 4424 	mov.w	r4, r4, asr #16
   8786e:	ea4f 431b 	mov.w	r3, fp, lsr #16
   87872:	d2dd      	bcs.n	87830 <quorem+0x40>
   87874:	9b00      	ldr	r3, [sp, #0]
   87876:	f859 3003 	ldr.w	r3, [r9, r3]
   8787a:	b98b      	cbnz	r3, 878a0 <quorem+0xb0>
   8787c:	9a01      	ldr	r2, [sp, #4]
   8787e:	1f13      	subs	r3, r2, #4
   87880:	4599      	cmp	r9, r3
   87882:	d20c      	bcs.n	8789e <quorem+0xae>
   87884:	f852 3c04 	ldr.w	r3, [r2, #-4]
   87888:	b94b      	cbnz	r3, 8789e <quorem+0xae>
   8788a:	f1a2 0308 	sub.w	r3, r2, #8
   8788e:	e002      	b.n	87896 <quorem+0xa6>
   87890:	681a      	ldr	r2, [r3, #0]
   87892:	3b04      	subs	r3, #4
   87894:	b91a      	cbnz	r2, 8789e <quorem+0xae>
   87896:	4599      	cmp	r9, r3
   87898:	f106 36ff 	add.w	r6, r6, #4294967295
   8789c:	d3f8      	bcc.n	87890 <quorem+0xa0>
   8789e:	6106      	str	r6, [r0, #16]
   878a0:	4604      	mov	r4, r0
   878a2:	f001 fe39 	bl	89518 <__mcmp>
   878a6:	2800      	cmp	r0, #0
   878a8:	db2c      	blt.n	87904 <quorem+0x114>
   878aa:	464d      	mov	r5, r9
   878ac:	2300      	movs	r3, #0
   878ae:	3701      	adds	r7, #1
   878b0:	f858 1b04 	ldr.w	r1, [r8], #4
   878b4:	6828      	ldr	r0, [r5, #0]
   878b6:	b28a      	uxth	r2, r1
   878b8:	1a9a      	subs	r2, r3, r2
   878ba:	0c0b      	lsrs	r3, r1, #16
   878bc:	b281      	uxth	r1, r0
   878be:	440a      	add	r2, r1
   878c0:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   878c4:	eb03 4322 	add.w	r3, r3, r2, asr #16
   878c8:	b292      	uxth	r2, r2
   878ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   878ce:	45c2      	cmp	sl, r8
   878d0:	f845 2b04 	str.w	r2, [r5], #4
   878d4:	ea4f 4323 	mov.w	r3, r3, asr #16
   878d8:	d2ea      	bcs.n	878b0 <quorem+0xc0>
   878da:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
   878de:	eb09 0386 	add.w	r3, r9, r6, lsl #2
   878e2:	b97a      	cbnz	r2, 87904 <quorem+0x114>
   878e4:	1f1a      	subs	r2, r3, #4
   878e6:	4591      	cmp	r9, r2
   878e8:	d20b      	bcs.n	87902 <quorem+0x112>
   878ea:	f853 2c04 	ldr.w	r2, [r3, #-4]
   878ee:	b942      	cbnz	r2, 87902 <quorem+0x112>
   878f0:	3b08      	subs	r3, #8
   878f2:	e002      	b.n	878fa <quorem+0x10a>
   878f4:	681a      	ldr	r2, [r3, #0]
   878f6:	3b04      	subs	r3, #4
   878f8:	b91a      	cbnz	r2, 87902 <quorem+0x112>
   878fa:	4599      	cmp	r9, r3
   878fc:	f106 36ff 	add.w	r6, r6, #4294967295
   87900:	d3f8      	bcc.n	878f4 <quorem+0x104>
   87902:	6126      	str	r6, [r4, #16]
   87904:	4638      	mov	r0, r7
   87906:	b003      	add	sp, #12
   87908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8790c:	2000      	movs	r0, #0
   8790e:	b003      	add	sp, #12
   87910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87914:	0000      	movs	r0, r0
   87916:	0000      	movs	r0, r0

00087918 <_dtoa_r>:
   87918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8791c:	461f      	mov	r7, r3
   8791e:	4616      	mov	r6, r2
   87920:	6c03      	ldr	r3, [r0, #64]	; 0x40
   87922:	b099      	sub	sp, #100	; 0x64
   87924:	4604      	mov	r4, r0
   87926:	e9cd 6702 	strd	r6, r7, [sp, #8]
   8792a:	b14b      	cbz	r3, 87940 <_dtoa_r+0x28>
   8792c:	2201      	movs	r2, #1
   8792e:	6c45      	ldr	r5, [r0, #68]	; 0x44
   87930:	4619      	mov	r1, r3
   87932:	40aa      	lsls	r2, r5
   87934:	e9c3 5201 	strd	r5, r2, [r3, #4]
   87938:	f001 fbf8 	bl	8912c <_Bfree>
   8793c:	2300      	movs	r3, #0
   8793e:	6423      	str	r3, [r4, #64]	; 0x40
   87940:	1e3e      	subs	r6, r7, #0
   87942:	bfb4      	ite	lt
   87944:	2301      	movlt	r3, #1
   87946:	2300      	movge	r3, #0
   87948:	9a25      	ldr	r2, [sp, #148]	; 0x94
   8794a:	bfb8      	it	lt
   8794c:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
   87950:	6013      	str	r3, [r2, #0]
   87952:	4b75      	ldr	r3, [pc, #468]	; (87b28 <_dtoa_r+0x210>)
   87954:	bfb8      	it	lt
   87956:	9603      	strlt	r6, [sp, #12]
   87958:	43b3      	bics	r3, r6
   8795a:	f000 80a3 	beq.w	87aa4 <_dtoa_r+0x18c>
   8795e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   87962:	2200      	movs	r2, #0
   87964:	2300      	movs	r3, #0
   87966:	4640      	mov	r0, r8
   87968:	4649      	mov	r1, r9
   8796a:	f002 fe67 	bl	8a63c <__aeabi_dcmpeq>
   8796e:	4607      	mov	r7, r0
   87970:	b178      	cbz	r0, 87992 <_dtoa_r+0x7a>
   87972:	2301      	movs	r3, #1
   87974:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87976:	6013      	str	r3, [r2, #0]
   87978:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8797a:	2b00      	cmp	r3, #0
   8797c:	f000 80bf 	beq.w	87afe <_dtoa_r+0x1e6>
   87980:	4b6a      	ldr	r3, [pc, #424]	; (87b2c <_dtoa_r+0x214>)
   87982:	9a26      	ldr	r2, [sp, #152]	; 0x98
   87984:	f103 39ff 	add.w	r9, r3, #4294967295
   87988:	6013      	str	r3, [r2, #0]
   8798a:	4648      	mov	r0, r9
   8798c:	b019      	add	sp, #100	; 0x64
   8798e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87992:	aa16      	add	r2, sp, #88	; 0x58
   87994:	ab17      	add	r3, sp, #92	; 0x5c
   87996:	e9cd 3200 	strd	r3, r2, [sp]
   8799a:	4620      	mov	r0, r4
   8799c:	4642      	mov	r2, r8
   8799e:	464b      	mov	r3, r9
   879a0:	f001 fe56 	bl	89650 <__d2b>
   879a4:	0d35      	lsrs	r5, r6, #20
   879a6:	4683      	mov	fp, r0
   879a8:	f040 809c 	bne.w	87ae4 <_dtoa_r+0x1cc>
   879ac:	e9dd 8516 	ldrd	r8, r5, [sp, #88]	; 0x58
   879b0:	4445      	add	r5, r8
   879b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
   879b6:	2b20      	cmp	r3, #32
   879b8:	f340 8431 	ble.w	8821e <_dtoa_r+0x906>
   879bc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   879c0:	409e      	lsls	r6, r3
   879c2:	9b02      	ldr	r3, [sp, #8]
   879c4:	f205 4012 	addw	r0, r5, #1042	; 0x412
   879c8:	fa23 f000 	lsr.w	r0, r3, r0
   879cc:	4330      	orrs	r0, r6
   879ce:	f002 fb53 	bl	8a078 <__aeabi_ui2d>
   879d2:	2201      	movs	r2, #1
   879d4:	3d01      	subs	r5, #1
   879d6:	920a      	str	r2, [sp, #40]	; 0x28
   879d8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   879dc:	2200      	movs	r2, #0
   879de:	4b54      	ldr	r3, [pc, #336]	; (87b30 <_dtoa_r+0x218>)
   879e0:	f002 fa0c 	bl	89dfc <__aeabi_dsub>
   879e4:	a34a      	add	r3, pc, #296	; (adr r3, 87b10 <_dtoa_r+0x1f8>)
   879e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   879ea:	f002 fbbf 	bl	8a16c <__aeabi_dmul>
   879ee:	a34a      	add	r3, pc, #296	; (adr r3, 87b18 <_dtoa_r+0x200>)
   879f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   879f4:	f002 fa04 	bl	89e00 <__adddf3>
   879f8:	4606      	mov	r6, r0
   879fa:	4628      	mov	r0, r5
   879fc:	460f      	mov	r7, r1
   879fe:	f002 fb4b 	bl	8a098 <__aeabi_i2d>
   87a02:	a347      	add	r3, pc, #284	; (adr r3, 87b20 <_dtoa_r+0x208>)
   87a04:	e9d3 2300 	ldrd	r2, r3, [r3]
   87a08:	f002 fbb0 	bl	8a16c <__aeabi_dmul>
   87a0c:	4602      	mov	r2, r0
   87a0e:	460b      	mov	r3, r1
   87a10:	4630      	mov	r0, r6
   87a12:	4639      	mov	r1, r7
   87a14:	f002 f9f4 	bl	89e00 <__adddf3>
   87a18:	4606      	mov	r6, r0
   87a1a:	460f      	mov	r7, r1
   87a1c:	f002 fe56 	bl	8a6cc <__aeabi_d2iz>
   87a20:	2200      	movs	r2, #0
   87a22:	9005      	str	r0, [sp, #20]
   87a24:	2300      	movs	r3, #0
   87a26:	4630      	mov	r0, r6
   87a28:	4639      	mov	r1, r7
   87a2a:	f002 fe11 	bl	8a650 <__aeabi_dcmplt>
   87a2e:	2800      	cmp	r0, #0
   87a30:	f040 8277 	bne.w	87f22 <_dtoa_r+0x60a>
   87a34:	9e05      	ldr	r6, [sp, #20]
   87a36:	2e16      	cmp	r6, #22
   87a38:	f200 8261 	bhi.w	87efe <_dtoa_r+0x5e6>
   87a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   87a40:	493c      	ldr	r1, [pc, #240]	; (87b34 <_dtoa_r+0x21c>)
   87a42:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
   87a46:	e9d1 0100 	ldrd	r0, r1, [r1]
   87a4a:	f002 fe1f 	bl	8a68c <__aeabi_dcmpgt>
   87a4e:	2800      	cmp	r0, #0
   87a50:	f000 83e1 	beq.w	88216 <_dtoa_r+0x8fe>
   87a54:	1e73      	subs	r3, r6, #1
   87a56:	9305      	str	r3, [sp, #20]
   87a58:	2300      	movs	r3, #0
   87a5a:	930d      	str	r3, [sp, #52]	; 0x34
   87a5c:	eba8 0505 	sub.w	r5, r8, r5
   87a60:	f1b5 0a01 	subs.w	sl, r5, #1
   87a64:	f100 8257 	bmi.w	87f16 <_dtoa_r+0x5fe>
   87a68:	2300      	movs	r3, #0
   87a6a:	9306      	str	r3, [sp, #24]
   87a6c:	9b05      	ldr	r3, [sp, #20]
   87a6e:	2b00      	cmp	r3, #0
   87a70:	f2c0 8248 	blt.w	87f04 <_dtoa_r+0x5ec>
   87a74:	449a      	add	sl, r3
   87a76:	930c      	str	r3, [sp, #48]	; 0x30
   87a78:	2300      	movs	r3, #0
   87a7a:	930b      	str	r3, [sp, #44]	; 0x2c
   87a7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87a7e:	2b09      	cmp	r3, #9
   87a80:	d860      	bhi.n	87b44 <_dtoa_r+0x22c>
   87a82:	2b05      	cmp	r3, #5
   87a84:	f340 83c9 	ble.w	8821a <_dtoa_r+0x902>
   87a88:	2600      	movs	r6, #0
   87a8a:	3b04      	subs	r3, #4
   87a8c:	9322      	str	r3, [sp, #136]	; 0x88
   87a8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87a90:	3b02      	subs	r3, #2
   87a92:	2b03      	cmp	r3, #3
   87a94:	f200 84a1 	bhi.w	883da <_dtoa_r+0xac2>
   87a98:	e8df f013 	tbh	[pc, r3, lsl #1]
   87a9c:	03c803e6 	.word	0x03c803e6
   87aa0:	04fc03f0 	.word	0x04fc03f0
   87aa4:	f242 730f 	movw	r3, #9999	; 0x270f
   87aa8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87aaa:	6013      	str	r3, [r2, #0]
   87aac:	9b02      	ldr	r3, [sp, #8]
   87aae:	b983      	cbnz	r3, 87ad2 <_dtoa_r+0x1ba>
   87ab0:	f3c6 0613 	ubfx	r6, r6, #0, #20
   87ab4:	b96e      	cbnz	r6, 87ad2 <_dtoa_r+0x1ba>
   87ab6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87ab8:	f8df 907c 	ldr.w	r9, [pc, #124]	; 87b38 <_dtoa_r+0x220>
   87abc:	2b00      	cmp	r3, #0
   87abe:	f43f af64 	beq.w	8798a <_dtoa_r+0x72>
   87ac2:	f109 0308 	add.w	r3, r9, #8
   87ac6:	4648      	mov	r0, r9
   87ac8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   87aca:	6013      	str	r3, [r2, #0]
   87acc:	b019      	add	sp, #100	; 0x64
   87ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87ad2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87ad4:	f8df 9064 	ldr.w	r9, [pc, #100]	; 87b3c <_dtoa_r+0x224>
   87ad8:	2b00      	cmp	r3, #0
   87ada:	f43f af56 	beq.w	8798a <_dtoa_r+0x72>
   87ade:	f109 0303 	add.w	r3, r9, #3
   87ae2:	e7f0      	b.n	87ac6 <_dtoa_r+0x1ae>
   87ae4:	f3c9 0313 	ubfx	r3, r9, #0, #20
   87ae8:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   87aec:	4640      	mov	r0, r8
   87aee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   87af2:	970a      	str	r7, [sp, #40]	; 0x28
   87af4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   87af8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   87afc:	e76e      	b.n	879dc <_dtoa_r+0xc4>
   87afe:	f8df 9040 	ldr.w	r9, [pc, #64]	; 87b40 <_dtoa_r+0x228>
   87b02:	4648      	mov	r0, r9
   87b04:	b019      	add	sp, #100	; 0x64
   87b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87b0a:	bf00      	nop
   87b0c:	f3af 8000 	nop.w
   87b10:	636f4361 	.word	0x636f4361
   87b14:	3fd287a7 	.word	0x3fd287a7
   87b18:	8b60c8b3 	.word	0x8b60c8b3
   87b1c:	3fc68a28 	.word	0x3fc68a28
   87b20:	509f79fb 	.word	0x509f79fb
   87b24:	3fd34413 	.word	0x3fd34413
   87b28:	7ff00000 	.word	0x7ff00000
   87b2c:	0008aaa5 	.word	0x0008aaa5
   87b30:	3ff80000 	.word	0x3ff80000
   87b34:	0008ab10 	.word	0x0008ab10
   87b38:	0008aac8 	.word	0x0008aac8
   87b3c:	0008aad4 	.word	0x0008aad4
   87b40:	0008aaa4 	.word	0x0008aaa4
   87b44:	f04f 35ff 	mov.w	r5, #4294967295
   87b48:	2601      	movs	r6, #1
   87b4a:	2300      	movs	r3, #0
   87b4c:	e9cd 5608 	strd	r5, r6, [sp, #32]
   87b50:	9322      	str	r3, [sp, #136]	; 0x88
   87b52:	9323      	str	r3, [sp, #140]	; 0x8c
   87b54:	2100      	movs	r1, #0
   87b56:	9514      	str	r5, [sp, #80]	; 0x50
   87b58:	6461      	str	r1, [r4, #68]	; 0x44
   87b5a:	4620      	mov	r0, r4
   87b5c:	f001 fac0 	bl	890e0 <_Balloc>
   87b60:	2d0e      	cmp	r5, #14
   87b62:	4681      	mov	r9, r0
   87b64:	6420      	str	r0, [r4, #64]	; 0x40
   87b66:	f200 80fe 	bhi.w	87d66 <_dtoa_r+0x44e>
   87b6a:	2e00      	cmp	r6, #0
   87b6c:	f000 80fb 	beq.w	87d66 <_dtoa_r+0x44e>
   87b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   87b74:	4616      	mov	r6, r2
   87b76:	461f      	mov	r7, r3
   87b78:	9905      	ldr	r1, [sp, #20]
   87b7a:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   87b7e:	2900      	cmp	r1, #0
   87b80:	f340 83e9 	ble.w	88356 <_dtoa_r+0xa3e>
   87b84:	4b9b      	ldr	r3, [pc, #620]	; (87df4 <_dtoa_r+0x4dc>)
   87b86:	f001 020f 	and.w	r2, r1, #15
   87b8a:	110d      	asrs	r5, r1, #4
   87b8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87b90:	e9d3 1200 	ldrd	r1, r2, [r3]
   87b94:	e9cd 1202 	strd	r1, r2, [sp, #8]
   87b98:	06ea      	lsls	r2, r5, #27
   87b9a:	f140 84a0 	bpl.w	884de <_dtoa_r+0xbc6>
   87b9e:	4b96      	ldr	r3, [pc, #600]	; (87df8 <_dtoa_r+0x4e0>)
   87ba0:	4639      	mov	r1, r7
   87ba2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   87ba6:	4630      	mov	r0, r6
   87ba8:	f002 fc0a 	bl	8a3c0 <__aeabi_ddiv>
   87bac:	2703      	movs	r7, #3
   87bae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87bb2:	f005 050f 	and.w	r5, r5, #15
   87bb6:	b17d      	cbz	r5, 87bd8 <_dtoa_r+0x2c0>
   87bb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   87bbc:	4e8e      	ldr	r6, [pc, #568]	; (87df8 <_dtoa_r+0x4e0>)
   87bbe:	07eb      	lsls	r3, r5, #31
   87bc0:	d504      	bpl.n	87bcc <_dtoa_r+0x2b4>
   87bc2:	e9d6 2300 	ldrd	r2, r3, [r6]
   87bc6:	f002 fad1 	bl	8a16c <__aeabi_dmul>
   87bca:	3701      	adds	r7, #1
   87bcc:	106d      	asrs	r5, r5, #1
   87bce:	f106 0608 	add.w	r6, r6, #8
   87bd2:	d1f4      	bne.n	87bbe <_dtoa_r+0x2a6>
   87bd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   87bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   87bdc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   87be0:	f002 fbee 	bl	8a3c0 <__aeabi_ddiv>
   87be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   87be8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87bea:	b143      	cbz	r3, 87bfe <_dtoa_r+0x2e6>
   87bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   87bf0:	2200      	movs	r2, #0
   87bf2:	4b82      	ldr	r3, [pc, #520]	; (87dfc <_dtoa_r+0x4e4>)
   87bf4:	f002 fd2c 	bl	8a650 <__aeabi_dcmplt>
   87bf8:	2800      	cmp	r0, #0
   87bfa:	f040 8509 	bne.w	88610 <_dtoa_r+0xcf8>
   87bfe:	4638      	mov	r0, r7
   87c00:	f002 fa4a 	bl	8a098 <__aeabi_i2d>
   87c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   87c08:	f002 fab0 	bl	8a16c <__aeabi_dmul>
   87c0c:	4b7c      	ldr	r3, [pc, #496]	; (87e00 <_dtoa_r+0x4e8>)
   87c0e:	2200      	movs	r2, #0
   87c10:	f002 f8f6 	bl	89e00 <__adddf3>
   87c14:	9b08      	ldr	r3, [sp, #32]
   87c16:	4605      	mov	r5, r0
   87c18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   87c1c:	2b00      	cmp	r3, #0
   87c1e:	f000 841e 	beq.w	8845e <_dtoa_r+0xb46>
   87c22:	9b05      	ldr	r3, [sp, #20]
   87c24:	9315      	str	r3, [sp, #84]	; 0x54
   87c26:	9b08      	ldr	r3, [sp, #32]
   87c28:	9310      	str	r3, [sp, #64]	; 0x40
   87c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   87c2e:	f002 fd4d 	bl	8a6cc <__aeabi_d2iz>
   87c32:	9a10      	ldr	r2, [sp, #64]	; 0x40
   87c34:	4b6f      	ldr	r3, [pc, #444]	; (87df4 <_dtoa_r+0x4dc>)
   87c36:	f100 0830 	add.w	r8, r0, #48	; 0x30
   87c3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87c3e:	e953 1202 	ldrd	r1, r2, [r3, #-8]
   87c42:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
   87c46:	f002 fa27 	bl	8a098 <__aeabi_i2d>
   87c4a:	460b      	mov	r3, r1
   87c4c:	4602      	mov	r2, r0
   87c4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   87c52:	e9cd 5602 	strd	r5, r6, [sp, #8]
   87c56:	f002 f8d1 	bl	89dfc <__aeabi_dsub>
   87c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87c5c:	fa5f f888 	uxtb.w	r8, r8
   87c60:	4606      	mov	r6, r0
   87c62:	460f      	mov	r7, r1
   87c64:	f109 0501 	add.w	r5, r9, #1
   87c68:	2b00      	cmp	r3, #0
   87c6a:	f000 8463 	beq.w	88534 <_dtoa_r+0xc1c>
   87c6e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   87c72:	2000      	movs	r0, #0
   87c74:	4963      	ldr	r1, [pc, #396]	; (87e04 <_dtoa_r+0x4ec>)
   87c76:	f002 fba3 	bl	8a3c0 <__aeabi_ddiv>
   87c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   87c7e:	f002 f8bd 	bl	89dfc <__aeabi_dsub>
   87c82:	f889 8000 	strb.w	r8, [r9]
   87c86:	4632      	mov	r2, r6
   87c88:	463b      	mov	r3, r7
   87c8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   87c8e:	f002 fcfd 	bl	8a68c <__aeabi_dcmpgt>
   87c92:	2800      	cmp	r0, #0
   87c94:	f040 850e 	bne.w	886b4 <_dtoa_r+0xd9c>
   87c98:	4632      	mov	r2, r6
   87c9a:	463b      	mov	r3, r7
   87c9c:	2000      	movs	r0, #0
   87c9e:	4957      	ldr	r1, [pc, #348]	; (87dfc <_dtoa_r+0x4e4>)
   87ca0:	f002 f8ac 	bl	89dfc <__aeabi_dsub>
   87ca4:	4602      	mov	r2, r0
   87ca6:	460b      	mov	r3, r1
   87ca8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   87cac:	f002 fcee 	bl	8a68c <__aeabi_dcmpgt>
   87cb0:	2800      	cmp	r0, #0
   87cb2:	f040 8509 	bne.w	886c8 <_dtoa_r+0xdb0>
   87cb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   87cb8:	2a01      	cmp	r2, #1
   87cba:	d050      	beq.n	87d5e <_dtoa_r+0x446>
   87cbc:	444a      	add	r2, r9
   87cbe:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
   87cc2:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
   87cc6:	46a0      	mov	r8, r4
   87cc8:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   87ccc:	f8cd 9008 	str.w	r9, [sp, #8]
   87cd0:	4691      	mov	r9, r2
   87cd2:	e00e      	b.n	87cf2 <_dtoa_r+0x3da>
   87cd4:	4632      	mov	r2, r6
   87cd6:	463b      	mov	r3, r7
   87cd8:	2000      	movs	r0, #0
   87cda:	4948      	ldr	r1, [pc, #288]	; (87dfc <_dtoa_r+0x4e4>)
   87cdc:	f002 f88e 	bl	89dfc <__aeabi_dsub>
   87ce0:	4652      	mov	r2, sl
   87ce2:	465b      	mov	r3, fp
   87ce4:	f002 fcb4 	bl	8a650 <__aeabi_dcmplt>
   87ce8:	2800      	cmp	r0, #0
   87cea:	f040 84e6 	bne.w	886ba <_dtoa_r+0xda2>
   87cee:	454d      	cmp	r5, r9
   87cf0:	d02e      	beq.n	87d50 <_dtoa_r+0x438>
   87cf2:	4650      	mov	r0, sl
   87cf4:	4659      	mov	r1, fp
   87cf6:	2200      	movs	r2, #0
   87cf8:	4b43      	ldr	r3, [pc, #268]	; (87e08 <_dtoa_r+0x4f0>)
   87cfa:	f002 fa37 	bl	8a16c <__aeabi_dmul>
   87cfe:	2200      	movs	r2, #0
   87d00:	4b41      	ldr	r3, [pc, #260]	; (87e08 <_dtoa_r+0x4f0>)
   87d02:	4682      	mov	sl, r0
   87d04:	468b      	mov	fp, r1
   87d06:	4630      	mov	r0, r6
   87d08:	4639      	mov	r1, r7
   87d0a:	f002 fa2f 	bl	8a16c <__aeabi_dmul>
   87d0e:	460f      	mov	r7, r1
   87d10:	4606      	mov	r6, r0
   87d12:	f002 fcdb 	bl	8a6cc <__aeabi_d2iz>
   87d16:	4604      	mov	r4, r0
   87d18:	f002 f9be 	bl	8a098 <__aeabi_i2d>
   87d1c:	4602      	mov	r2, r0
   87d1e:	460b      	mov	r3, r1
   87d20:	4630      	mov	r0, r6
   87d22:	4639      	mov	r1, r7
   87d24:	f002 f86a 	bl	89dfc <__aeabi_dsub>
   87d28:	3430      	adds	r4, #48	; 0x30
   87d2a:	b2e4      	uxtb	r4, r4
   87d2c:	f805 4b01 	strb.w	r4, [r5], #1
   87d30:	4652      	mov	r2, sl
   87d32:	465b      	mov	r3, fp
   87d34:	4606      	mov	r6, r0
   87d36:	460f      	mov	r7, r1
   87d38:	f002 fc8a 	bl	8a650 <__aeabi_dcmplt>
   87d3c:	2800      	cmp	r0, #0
   87d3e:	d0c9      	beq.n	87cd4 <_dtoa_r+0x3bc>
   87d40:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87d42:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
   87d46:	f8dd 9008 	ldr.w	r9, [sp, #8]
   87d4a:	4644      	mov	r4, r8
   87d4c:	9305      	str	r3, [sp, #20]
   87d4e:	e239      	b.n	881c4 <_dtoa_r+0x8ac>
   87d50:	4644      	mov	r4, r8
   87d52:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   87d56:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
   87d5a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   87d5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   87d62:	e9cd 2302 	strd	r2, r3, [sp, #8]
   87d66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   87d68:	2b00      	cmp	r3, #0
   87d6a:	f2c0 80a9 	blt.w	87ec0 <_dtoa_r+0x5a8>
   87d6e:	9a05      	ldr	r2, [sp, #20]
   87d70:	2a0e      	cmp	r2, #14
   87d72:	f300 80a5 	bgt.w	87ec0 <_dtoa_r+0x5a8>
   87d76:	4b1f      	ldr	r3, [pc, #124]	; (87df4 <_dtoa_r+0x4dc>)
   87d78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   87d80:	e9cd 2306 	strd	r2, r3, [sp, #24]
   87d84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   87d86:	2b00      	cmp	r3, #0
   87d88:	f2c0 82c1 	blt.w	8830e <_dtoa_r+0x9f6>
   87d8c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   87d90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   87d94:	4630      	mov	r0, r6
   87d96:	4639      	mov	r1, r7
   87d98:	f002 fb12 	bl	8a3c0 <__aeabi_ddiv>
   87d9c:	f002 fc96 	bl	8a6cc <__aeabi_d2iz>
   87da0:	4680      	mov	r8, r0
   87da2:	f002 f979 	bl	8a098 <__aeabi_i2d>
   87da6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   87daa:	f002 f9df 	bl	8a16c <__aeabi_dmul>
   87dae:	4602      	mov	r2, r0
   87db0:	460b      	mov	r3, r1
   87db2:	4630      	mov	r0, r6
   87db4:	4639      	mov	r1, r7
   87db6:	f002 f821 	bl	89dfc <__aeabi_dsub>
   87dba:	9e08      	ldr	r6, [sp, #32]
   87dbc:	f108 0530 	add.w	r5, r8, #48	; 0x30
   87dc0:	2e01      	cmp	r6, #1
   87dc2:	f889 5000 	strb.w	r5, [r9]
   87dc6:	4602      	mov	r2, r0
   87dc8:	460b      	mov	r3, r1
   87dca:	f109 0501 	add.w	r5, r9, #1
   87dce:	d04c      	beq.n	87e6a <_dtoa_r+0x552>
   87dd0:	2200      	movs	r2, #0
   87dd2:	4b0d      	ldr	r3, [pc, #52]	; (87e08 <_dtoa_r+0x4f0>)
   87dd4:	f002 f9ca 	bl	8a16c <__aeabi_dmul>
   87dd8:	2200      	movs	r2, #0
   87dda:	2300      	movs	r3, #0
   87ddc:	4606      	mov	r6, r0
   87dde:	460f      	mov	r7, r1
   87de0:	f002 fc2c 	bl	8a63c <__aeabi_dcmpeq>
   87de4:	2800      	cmp	r0, #0
   87de6:	f040 81ed 	bne.w	881c4 <_dtoa_r+0x8ac>
   87dea:	f8cd b008 	str.w	fp, [sp, #8]
   87dee:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   87df2:	e018      	b.n	87e26 <_dtoa_r+0x50e>
   87df4:	0008ab10 	.word	0x0008ab10
   87df8:	0008aae8 	.word	0x0008aae8
   87dfc:	3ff00000 	.word	0x3ff00000
   87e00:	401c0000 	.word	0x401c0000
   87e04:	3fe00000 	.word	0x3fe00000
   87e08:	40240000 	.word	0x40240000
   87e0c:	2200      	movs	r2, #0
   87e0e:	4bc6      	ldr	r3, [pc, #792]	; (88128 <_dtoa_r+0x810>)
   87e10:	f002 f9ac 	bl	8a16c <__aeabi_dmul>
   87e14:	2200      	movs	r2, #0
   87e16:	2300      	movs	r3, #0
   87e18:	4606      	mov	r6, r0
   87e1a:	460f      	mov	r7, r1
   87e1c:	f002 fc0e 	bl	8a63c <__aeabi_dcmpeq>
   87e20:	2800      	cmp	r0, #0
   87e22:	f040 8341 	bne.w	884a8 <_dtoa_r+0xb90>
   87e26:	4652      	mov	r2, sl
   87e28:	465b      	mov	r3, fp
   87e2a:	4630      	mov	r0, r6
   87e2c:	4639      	mov	r1, r7
   87e2e:	f002 fac7 	bl	8a3c0 <__aeabi_ddiv>
   87e32:	f002 fc4b 	bl	8a6cc <__aeabi_d2iz>
   87e36:	4680      	mov	r8, r0
   87e38:	f002 f92e 	bl	8a098 <__aeabi_i2d>
   87e3c:	4652      	mov	r2, sl
   87e3e:	465b      	mov	r3, fp
   87e40:	f002 f994 	bl	8a16c <__aeabi_dmul>
   87e44:	4602      	mov	r2, r0
   87e46:	460b      	mov	r3, r1
   87e48:	4630      	mov	r0, r6
   87e4a:	4639      	mov	r1, r7
   87e4c:	f001 ffd6 	bl	89dfc <__aeabi_dsub>
   87e50:	f108 0630 	add.w	r6, r8, #48	; 0x30
   87e54:	f805 6b01 	strb.w	r6, [r5], #1
   87e58:	9f08      	ldr	r7, [sp, #32]
   87e5a:	eba5 0609 	sub.w	r6, r5, r9
   87e5e:	42b7      	cmp	r7, r6
   87e60:	4602      	mov	r2, r0
   87e62:	460b      	mov	r3, r1
   87e64:	d1d2      	bne.n	87e0c <_dtoa_r+0x4f4>
   87e66:	f8dd b008 	ldr.w	fp, [sp, #8]
   87e6a:	4610      	mov	r0, r2
   87e6c:	4619      	mov	r1, r3
   87e6e:	f001 ffc7 	bl	89e00 <__adddf3>
   87e72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   87e76:	4606      	mov	r6, r0
   87e78:	460f      	mov	r7, r1
   87e7a:	f002 fc07 	bl	8a68c <__aeabi_dcmpgt>
   87e7e:	b960      	cbnz	r0, 87e9a <_dtoa_r+0x582>
   87e80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   87e84:	4630      	mov	r0, r6
   87e86:	4639      	mov	r1, r7
   87e88:	f002 fbd8 	bl	8a63c <__aeabi_dcmpeq>
   87e8c:	2800      	cmp	r0, #0
   87e8e:	f000 8199 	beq.w	881c4 <_dtoa_r+0x8ac>
   87e92:	f018 0f01 	tst.w	r8, #1
   87e96:	f000 8195 	beq.w	881c4 <_dtoa_r+0x8ac>
   87e9a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   87e9e:	e005      	b.n	87eac <_dtoa_r+0x594>
   87ea0:	4599      	cmp	r9, r3
   87ea2:	f000 833a 	beq.w	8851a <_dtoa_r+0xc02>
   87ea6:	461d      	mov	r5, r3
   87ea8:	f813 8c01 	ldrb.w	r8, [r3, #-1]
   87eac:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   87eb0:	f105 33ff 	add.w	r3, r5, #4294967295
   87eb4:	d0f4      	beq.n	87ea0 <_dtoa_r+0x588>
   87eb6:	f108 0801 	add.w	r8, r8, #1
   87eba:	f883 8000 	strb.w	r8, [r3]
   87ebe:	e181      	b.n	881c4 <_dtoa_r+0x8ac>
   87ec0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87ec2:	2a00      	cmp	r2, #0
   87ec4:	d03d      	beq.n	87f42 <_dtoa_r+0x62a>
   87ec6:	9a22      	ldr	r2, [sp, #136]	; 0x88
   87ec8:	2a01      	cmp	r2, #1
   87eca:	f340 8212 	ble.w	882f2 <_dtoa_r+0x9da>
   87ece:	9b08      	ldr	r3, [sp, #32]
   87ed0:	f103 38ff 	add.w	r8, r3, #4294967295
   87ed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87ed6:	4543      	cmp	r3, r8
   87ed8:	f2c0 82e9 	blt.w	884ae <_dtoa_r+0xb96>
   87edc:	eba3 0808 	sub.w	r8, r3, r8
   87ee0:	9b08      	ldr	r3, [sp, #32]
   87ee2:	2b00      	cmp	r3, #0
   87ee4:	f2c0 830e 	blt.w	88504 <_dtoa_r+0xbec>
   87ee8:	9a06      	ldr	r2, [sp, #24]
   87eea:	449a      	add	sl, r3
   87eec:	920a      	str	r2, [sp, #40]	; 0x28
   87eee:	441a      	add	r2, r3
   87ef0:	9206      	str	r2, [sp, #24]
   87ef2:	2101      	movs	r1, #1
   87ef4:	4620      	mov	r0, r4
   87ef6:	f001 f9b5 	bl	89264 <__i2b>
   87efa:	4606      	mov	r6, r0
   87efc:	e026      	b.n	87f4c <_dtoa_r+0x634>
   87efe:	2301      	movs	r3, #1
   87f00:	930d      	str	r3, [sp, #52]	; 0x34
   87f02:	e5ab      	b.n	87a5c <_dtoa_r+0x144>
   87f04:	2300      	movs	r3, #0
   87f06:	930c      	str	r3, [sp, #48]	; 0x30
   87f08:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   87f0c:	1ad2      	subs	r2, r2, r3
   87f0e:	425b      	negs	r3, r3
   87f10:	9206      	str	r2, [sp, #24]
   87f12:	930b      	str	r3, [sp, #44]	; 0x2c
   87f14:	e5b2      	b.n	87a7c <_dtoa_r+0x164>
   87f16:	f1c5 0301 	rsb	r3, r5, #1
   87f1a:	9306      	str	r3, [sp, #24]
   87f1c:	f04f 0a00 	mov.w	sl, #0
   87f20:	e5a4      	b.n	87a6c <_dtoa_r+0x154>
   87f22:	f8dd 9014 	ldr.w	r9, [sp, #20]
   87f26:	4648      	mov	r0, r9
   87f28:	f002 f8b6 	bl	8a098 <__aeabi_i2d>
   87f2c:	4632      	mov	r2, r6
   87f2e:	463b      	mov	r3, r7
   87f30:	f002 fb84 	bl	8a63c <__aeabi_dcmpeq>
   87f34:	2800      	cmp	r0, #0
   87f36:	f47f ad7d 	bne.w	87a34 <_dtoa_r+0x11c>
   87f3a:	f109 33ff 	add.w	r3, r9, #4294967295
   87f3e:	9305      	str	r3, [sp, #20]
   87f40:	e578      	b.n	87a34 <_dtoa_r+0x11c>
   87f42:	9b06      	ldr	r3, [sp, #24]
   87f44:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   87f48:	9e09      	ldr	r6, [sp, #36]	; 0x24
   87f4a:	930a      	str	r3, [sp, #40]	; 0x28
   87f4c:	990a      	ldr	r1, [sp, #40]	; 0x28
   87f4e:	2900      	cmp	r1, #0
   87f50:	460b      	mov	r3, r1
   87f52:	dd0c      	ble.n	87f6e <_dtoa_r+0x656>
   87f54:	f1ba 0f00 	cmp.w	sl, #0
   87f58:	dd09      	ble.n	87f6e <_dtoa_r+0x656>
   87f5a:	4551      	cmp	r1, sl
   87f5c:	bfa8      	it	ge
   87f5e:	4653      	movge	r3, sl
   87f60:	9a06      	ldr	r2, [sp, #24]
   87f62:	ebaa 0a03 	sub.w	sl, sl, r3
   87f66:	1ad2      	subs	r2, r2, r3
   87f68:	9206      	str	r2, [sp, #24]
   87f6a:	1aca      	subs	r2, r1, r3
   87f6c:	920a      	str	r2, [sp, #40]	; 0x28
   87f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87f70:	b17b      	cbz	r3, 87f92 <_dtoa_r+0x67a>
   87f72:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87f74:	2a00      	cmp	r2, #0
   87f76:	f000 8290 	beq.w	8849a <_dtoa_r+0xb82>
   87f7a:	eba3 0708 	sub.w	r7, r3, r8
   87f7e:	f1b8 0f00 	cmp.w	r8, #0
   87f82:	f040 819a 	bne.w	882ba <_dtoa_r+0x9a2>
   87f86:	4659      	mov	r1, fp
   87f88:	463a      	mov	r2, r7
   87f8a:	4620      	mov	r0, r4
   87f8c:	f001 fa1a 	bl	893c4 <__pow5mult>
   87f90:	4683      	mov	fp, r0
   87f92:	2101      	movs	r1, #1
   87f94:	4620      	mov	r0, r4
   87f96:	f001 f965 	bl	89264 <__i2b>
   87f9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87f9c:	4607      	mov	r7, r0
   87f9e:	2a00      	cmp	r2, #0
   87fa0:	f040 8125 	bne.w	881ee <_dtoa_r+0x8d6>
   87fa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87fa6:	2b01      	cmp	r3, #1
   87fa8:	f340 816b 	ble.w	88282 <_dtoa_r+0x96a>
   87fac:	2001      	movs	r0, #1
   87fae:	4450      	add	r0, sl
   87fb0:	f010 001f 	ands.w	r0, r0, #31
   87fb4:	f000 8119 	beq.w	881ea <_dtoa_r+0x8d2>
   87fb8:	f1c0 0320 	rsb	r3, r0, #32
   87fbc:	2b04      	cmp	r3, #4
   87fbe:	f340 83b4 	ble.w	8872a <_dtoa_r+0xe12>
   87fc2:	f1c0 001c 	rsb	r0, r0, #28
   87fc6:	9b06      	ldr	r3, [sp, #24]
   87fc8:	4482      	add	sl, r0
   87fca:	4403      	add	r3, r0
   87fcc:	9306      	str	r3, [sp, #24]
   87fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87fd0:	4403      	add	r3, r0
   87fd2:	930a      	str	r3, [sp, #40]	; 0x28
   87fd4:	9b06      	ldr	r3, [sp, #24]
   87fd6:	2b00      	cmp	r3, #0
   87fd8:	dd05      	ble.n	87fe6 <_dtoa_r+0x6ce>
   87fda:	4659      	mov	r1, fp
   87fdc:	461a      	mov	r2, r3
   87fde:	4620      	mov	r0, r4
   87fe0:	f001 fa40 	bl	89464 <__lshift>
   87fe4:	4683      	mov	fp, r0
   87fe6:	f1ba 0f00 	cmp.w	sl, #0
   87fea:	dd05      	ble.n	87ff8 <_dtoa_r+0x6e0>
   87fec:	4639      	mov	r1, r7
   87fee:	4652      	mov	r2, sl
   87ff0:	4620      	mov	r0, r4
   87ff2:	f001 fa37 	bl	89464 <__lshift>
   87ff6:	4607      	mov	r7, r0
   87ff8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87ffa:	2b00      	cmp	r3, #0
   87ffc:	d177      	bne.n	880ee <_dtoa_r+0x7d6>
   87ffe:	9b08      	ldr	r3, [sp, #32]
   88000:	2b00      	cmp	r3, #0
   88002:	f340 8205 	ble.w	88410 <_dtoa_r+0xaf8>
   88006:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88008:	2b00      	cmp	r3, #0
   8800a:	f000 8089 	beq.w	88120 <_dtoa_r+0x808>
   8800e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88010:	2b00      	cmp	r3, #0
   88012:	f300 8167 	bgt.w	882e4 <_dtoa_r+0x9cc>
   88016:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88018:	2b00      	cmp	r3, #0
   8801a:	f040 81ca 	bne.w	883b2 <_dtoa_r+0xa9a>
   8801e:	46b2      	mov	sl, r6
   88020:	46c8      	mov	r8, r9
   88022:	9b02      	ldr	r3, [sp, #8]
   88024:	9a08      	ldr	r2, [sp, #32]
   88026:	f003 0301 	and.w	r3, r3, #1
   8802a:	930a      	str	r3, [sp, #40]	; 0x28
   8802c:	f109 33ff 	add.w	r3, r9, #4294967295
   88030:	441a      	add	r2, r3
   88032:	9206      	str	r2, [sp, #24]
   88034:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   88038:	4639      	mov	r1, r7
   8803a:	4658      	mov	r0, fp
   8803c:	f7ff fbd8 	bl	877f0 <quorem>
   88040:	4631      	mov	r1, r6
   88042:	4681      	mov	r9, r0
   88044:	9009      	str	r0, [sp, #36]	; 0x24
   88046:	4658      	mov	r0, fp
   88048:	f001 fa66 	bl	89518 <__mcmp>
   8804c:	4652      	mov	r2, sl
   8804e:	9002      	str	r0, [sp, #8]
   88050:	4639      	mov	r1, r7
   88052:	4620      	mov	r0, r4
   88054:	f001 fa7c 	bl	89550 <__mdiff>
   88058:	68c2      	ldr	r2, [r0, #12]
   8805a:	4605      	mov	r5, r0
   8805c:	f109 0930 	add.w	r9, r9, #48	; 0x30
   88060:	4601      	mov	r1, r0
   88062:	2a00      	cmp	r2, #0
   88064:	f040 81cf 	bne.w	88406 <_dtoa_r+0xaee>
   88068:	4658      	mov	r0, fp
   8806a:	f001 fa55 	bl	89518 <__mcmp>
   8806e:	4629      	mov	r1, r5
   88070:	9008      	str	r0, [sp, #32]
   88072:	4620      	mov	r0, r4
   88074:	f001 f85a 	bl	8912c <_Bfree>
   88078:	9a08      	ldr	r2, [sp, #32]
   8807a:	b932      	cbnz	r2, 8808a <_dtoa_r+0x772>
   8807c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8807e:	b923      	cbnz	r3, 8808a <_dtoa_r+0x772>
   88080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88082:	2b00      	cmp	r3, #0
   88084:	f000 8324 	beq.w	886d0 <_dtoa_r+0xdb8>
   88088:	9a22      	ldr	r2, [sp, #136]	; 0x88
   8808a:	9b02      	ldr	r3, [sp, #8]
   8808c:	2b00      	cmp	r3, #0
   8808e:	f2c0 8219 	blt.w	884c4 <_dtoa_r+0xbac>
   88092:	d105      	bne.n	880a0 <_dtoa_r+0x788>
   88094:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88096:	b91b      	cbnz	r3, 880a0 <_dtoa_r+0x788>
   88098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8809a:	2b00      	cmp	r3, #0
   8809c:	f000 8212 	beq.w	884c4 <_dtoa_r+0xbac>
   880a0:	2a00      	cmp	r2, #0
   880a2:	f108 0501 	add.w	r5, r8, #1
   880a6:	f300 8221 	bgt.w	884ec <_dtoa_r+0xbd4>
   880aa:	9b06      	ldr	r3, [sp, #24]
   880ac:	f888 9000 	strb.w	r9, [r8]
   880b0:	4543      	cmp	r3, r8
   880b2:	f000 822c 	beq.w	8850e <_dtoa_r+0xbf6>
   880b6:	4659      	mov	r1, fp
   880b8:	2300      	movs	r3, #0
   880ba:	220a      	movs	r2, #10
   880bc:	4620      	mov	r0, r4
   880be:	f001 f83f 	bl	89140 <__multadd>
   880c2:	4556      	cmp	r6, sl
   880c4:	4683      	mov	fp, r0
   880c6:	4631      	mov	r1, r6
   880c8:	f04f 0300 	mov.w	r3, #0
   880cc:	f04f 020a 	mov.w	r2, #10
   880d0:	4620      	mov	r0, r4
   880d2:	f000 8192 	beq.w	883fa <_dtoa_r+0xae2>
   880d6:	f001 f833 	bl	89140 <__multadd>
   880da:	4651      	mov	r1, sl
   880dc:	4606      	mov	r6, r0
   880de:	2300      	movs	r3, #0
   880e0:	220a      	movs	r2, #10
   880e2:	4620      	mov	r0, r4
   880e4:	f001 f82c 	bl	89140 <__multadd>
   880e8:	46a8      	mov	r8, r5
   880ea:	4682      	mov	sl, r0
   880ec:	e7a4      	b.n	88038 <_dtoa_r+0x720>
   880ee:	4639      	mov	r1, r7
   880f0:	4658      	mov	r0, fp
   880f2:	f001 fa11 	bl	89518 <__mcmp>
   880f6:	2800      	cmp	r0, #0
   880f8:	da81      	bge.n	87ffe <_dtoa_r+0x6e6>
   880fa:	9d05      	ldr	r5, [sp, #20]
   880fc:	4659      	mov	r1, fp
   880fe:	2300      	movs	r3, #0
   88100:	220a      	movs	r2, #10
   88102:	4620      	mov	r0, r4
   88104:	3d01      	subs	r5, #1
   88106:	9505      	str	r5, [sp, #20]
   88108:	f001 f81a 	bl	89140 <__multadd>
   8810c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8810e:	4683      	mov	fp, r0
   88110:	2b00      	cmp	r3, #0
   88112:	f040 82ee 	bne.w	886f2 <_dtoa_r+0xdda>
   88116:	9b14      	ldr	r3, [sp, #80]	; 0x50
   88118:	2b00      	cmp	r3, #0
   8811a:	f340 82f9 	ble.w	88710 <_dtoa_r+0xdf8>
   8811e:	9308      	str	r3, [sp, #32]
   88120:	464d      	mov	r5, r9
   88122:	f8dd 8020 	ldr.w	r8, [sp, #32]
   88126:	e008      	b.n	8813a <_dtoa_r+0x822>
   88128:	40240000 	.word	0x40240000
   8812c:	4659      	mov	r1, fp
   8812e:	2300      	movs	r3, #0
   88130:	220a      	movs	r2, #10
   88132:	4620      	mov	r0, r4
   88134:	f001 f804 	bl	89140 <__multadd>
   88138:	4683      	mov	fp, r0
   8813a:	4639      	mov	r1, r7
   8813c:	4658      	mov	r0, fp
   8813e:	f7ff fb57 	bl	877f0 <quorem>
   88142:	3030      	adds	r0, #48	; 0x30
   88144:	f805 0b01 	strb.w	r0, [r5], #1
   88148:	eba5 0209 	sub.w	r2, r5, r9
   8814c:	4590      	cmp	r8, r2
   8814e:	dced      	bgt.n	8812c <_dtoa_r+0x814>
   88150:	2200      	movs	r2, #0
   88152:	4603      	mov	r3, r0
   88154:	9202      	str	r2, [sp, #8]
   88156:	4659      	mov	r1, fp
   88158:	2201      	movs	r2, #1
   8815a:	4620      	mov	r0, r4
   8815c:	9308      	str	r3, [sp, #32]
   8815e:	f001 f981 	bl	89464 <__lshift>
   88162:	4639      	mov	r1, r7
   88164:	4683      	mov	fp, r0
   88166:	f001 f9d7 	bl	89518 <__mcmp>
   8816a:	2800      	cmp	r0, #0
   8816c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   88170:	9b08      	ldr	r3, [sp, #32]
   88172:	dc11      	bgt.n	88198 <_dtoa_r+0x880>
   88174:	d105      	bne.n	88182 <_dtoa_r+0x86a>
   88176:	07db      	lsls	r3, r3, #31
   88178:	d40e      	bmi.n	88198 <_dtoa_r+0x880>
   8817a:	e002      	b.n	88182 <_dtoa_r+0x86a>
   8817c:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   88180:	461d      	mov	r5, r3
   88182:	2a30      	cmp	r2, #48	; 0x30
   88184:	f105 33ff 	add.w	r3, r5, #4294967295
   88188:	d0f8      	beq.n	8817c <_dtoa_r+0x864>
   8818a:	e00b      	b.n	881a4 <_dtoa_r+0x88c>
   8818c:	4599      	cmp	r9, r3
   8818e:	f000 814c 	beq.w	8842a <_dtoa_r+0xb12>
   88192:	461d      	mov	r5, r3
   88194:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   88198:	2a39      	cmp	r2, #57	; 0x39
   8819a:	f105 33ff 	add.w	r3, r5, #4294967295
   8819e:	d0f5      	beq.n	8818c <_dtoa_r+0x874>
   881a0:	3201      	adds	r2, #1
   881a2:	701a      	strb	r2, [r3, #0]
   881a4:	4639      	mov	r1, r7
   881a6:	4620      	mov	r0, r4
   881a8:	f000 ffc0 	bl	8912c <_Bfree>
   881ac:	b156      	cbz	r6, 881c4 <_dtoa_r+0x8ac>
   881ae:	9902      	ldr	r1, [sp, #8]
   881b0:	b121      	cbz	r1, 881bc <_dtoa_r+0x8a4>
   881b2:	42b1      	cmp	r1, r6
   881b4:	d002      	beq.n	881bc <_dtoa_r+0x8a4>
   881b6:	4620      	mov	r0, r4
   881b8:	f000 ffb8 	bl	8912c <_Bfree>
   881bc:	4631      	mov	r1, r6
   881be:	4620      	mov	r0, r4
   881c0:	f000 ffb4 	bl	8912c <_Bfree>
   881c4:	4659      	mov	r1, fp
   881c6:	4620      	mov	r0, r4
   881c8:	f000 ffb0 	bl	8912c <_Bfree>
   881cc:	2200      	movs	r2, #0
   881ce:	9b05      	ldr	r3, [sp, #20]
   881d0:	702a      	strb	r2, [r5, #0]
   881d2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   881d4:	3301      	adds	r3, #1
   881d6:	6013      	str	r3, [r2, #0]
   881d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   881da:	2b00      	cmp	r3, #0
   881dc:	f43f abd5 	beq.w	8798a <_dtoa_r+0x72>
   881e0:	4648      	mov	r0, r9
   881e2:	601d      	str	r5, [r3, #0]
   881e4:	b019      	add	sp, #100	; 0x64
   881e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   881ea:	201c      	movs	r0, #28
   881ec:	e6eb      	b.n	87fc6 <_dtoa_r+0x6ae>
   881ee:	4601      	mov	r1, r0
   881f0:	4620      	mov	r0, r4
   881f2:	f001 f8e7 	bl	893c4 <__pow5mult>
   881f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   881f8:	4607      	mov	r7, r0
   881fa:	2b01      	cmp	r3, #1
   881fc:	f340 80d4 	ble.w	883a8 <_dtoa_r+0xa90>
   88200:	2300      	movs	r3, #0
   88202:	930c      	str	r3, [sp, #48]	; 0x30
   88204:	693b      	ldr	r3, [r7, #16]
   88206:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   8820a:	6918      	ldr	r0, [r3, #16]
   8820c:	f000 ffda 	bl	891c4 <__hi0bits>
   88210:	f1c0 0020 	rsb	r0, r0, #32
   88214:	e6cb      	b.n	87fae <_dtoa_r+0x696>
   88216:	900d      	str	r0, [sp, #52]	; 0x34
   88218:	e420      	b.n	87a5c <_dtoa_r+0x144>
   8821a:	2601      	movs	r6, #1
   8821c:	e437      	b.n	87a8e <_dtoa_r+0x176>
   8821e:	f1c3 0620 	rsb	r6, r3, #32
   88222:	9b02      	ldr	r3, [sp, #8]
   88224:	fa03 f006 	lsl.w	r0, r3, r6
   88228:	f7ff bbd1 	b.w	879ce <_dtoa_r+0xb6>
   8822c:	2300      	movs	r3, #0
   8822e:	9309      	str	r3, [sp, #36]	; 0x24
   88230:	9b05      	ldr	r3, [sp, #20]
   88232:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   88234:	4413      	add	r3, r2
   88236:	9314      	str	r3, [sp, #80]	; 0x50
   88238:	3301      	adds	r3, #1
   8823a:	2b01      	cmp	r3, #1
   8823c:	461f      	mov	r7, r3
   8823e:	bfb8      	it	lt
   88240:	2701      	movlt	r7, #1
   88242:	9308      	str	r3, [sp, #32]
   88244:	2100      	movs	r1, #0
   88246:	2f17      	cmp	r7, #23
   88248:	9d08      	ldr	r5, [sp, #32]
   8824a:	6461      	str	r1, [r4, #68]	; 0x44
   8824c:	f77f ac85 	ble.w	87b5a <_dtoa_r+0x242>
   88250:	2201      	movs	r2, #1
   88252:	2304      	movs	r3, #4
   88254:	005b      	lsls	r3, r3, #1
   88256:	f103 0014 	add.w	r0, r3, #20
   8825a:	42b8      	cmp	r0, r7
   8825c:	4611      	mov	r1, r2
   8825e:	f102 0201 	add.w	r2, r2, #1
   88262:	d9f7      	bls.n	88254 <_dtoa_r+0x93c>
   88264:	6461      	str	r1, [r4, #68]	; 0x44
   88266:	e478      	b.n	87b5a <_dtoa_r+0x242>
   88268:	2300      	movs	r3, #0
   8826a:	9309      	str	r3, [sp, #36]	; 0x24
   8826c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8826e:	2b00      	cmp	r3, #0
   88270:	f340 80e2 	ble.w	88438 <_dtoa_r+0xb20>
   88274:	9314      	str	r3, [sp, #80]	; 0x50
   88276:	9308      	str	r3, [sp, #32]
   88278:	461f      	mov	r7, r3
   8827a:	e7e3      	b.n	88244 <_dtoa_r+0x92c>
   8827c:	2301      	movs	r3, #1
   8827e:	9309      	str	r3, [sp, #36]	; 0x24
   88280:	e7f4      	b.n	8826c <_dtoa_r+0x954>
   88282:	9b02      	ldr	r3, [sp, #8]
   88284:	2b00      	cmp	r3, #0
   88286:	f47f ae91 	bne.w	87fac <_dtoa_r+0x694>
   8828a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   8828e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   88292:	2b00      	cmp	r3, #0
   88294:	f040 8199 	bne.w	885ca <_dtoa_r+0xcb2>
   88298:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   8829c:	0d1b      	lsrs	r3, r3, #20
   8829e:	051b      	lsls	r3, r3, #20
   882a0:	b12b      	cbz	r3, 882ae <_dtoa_r+0x996>
   882a2:	9b06      	ldr	r3, [sp, #24]
   882a4:	f10a 0a01 	add.w	sl, sl, #1
   882a8:	3301      	adds	r3, #1
   882aa:	9306      	str	r3, [sp, #24]
   882ac:	2301      	movs	r3, #1
   882ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   882b0:	930c      	str	r3, [sp, #48]	; 0x30
   882b2:	2a00      	cmp	r2, #0
   882b4:	f43f ae7a 	beq.w	87fac <_dtoa_r+0x694>
   882b8:	e7a4      	b.n	88204 <_dtoa_r+0x8ec>
   882ba:	4642      	mov	r2, r8
   882bc:	4631      	mov	r1, r6
   882be:	4620      	mov	r0, r4
   882c0:	f001 f880 	bl	893c4 <__pow5mult>
   882c4:	465a      	mov	r2, fp
   882c6:	4601      	mov	r1, r0
   882c8:	4606      	mov	r6, r0
   882ca:	4620      	mov	r0, r4
   882cc:	f000 ffd4 	bl	89278 <__multiply>
   882d0:	4680      	mov	r8, r0
   882d2:	4659      	mov	r1, fp
   882d4:	4620      	mov	r0, r4
   882d6:	f000 ff29 	bl	8912c <_Bfree>
   882da:	46c3      	mov	fp, r8
   882dc:	2f00      	cmp	r7, #0
   882de:	f43f ae58 	beq.w	87f92 <_dtoa_r+0x67a>
   882e2:	e650      	b.n	87f86 <_dtoa_r+0x66e>
   882e4:	4631      	mov	r1, r6
   882e6:	461a      	mov	r2, r3
   882e8:	4620      	mov	r0, r4
   882ea:	f001 f8bb 	bl	89464 <__lshift>
   882ee:	4606      	mov	r6, r0
   882f0:	e691      	b.n	88016 <_dtoa_r+0x6fe>
   882f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   882f4:	2a00      	cmp	r2, #0
   882f6:	f000 815d 	beq.w	885b4 <_dtoa_r+0xc9c>
   882fa:	9a06      	ldr	r2, [sp, #24]
   882fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
   88300:	920a      	str	r2, [sp, #40]	; 0x28
   88302:	441a      	add	r2, r3
   88304:	449a      	add	sl, r3
   88306:	9206      	str	r2, [sp, #24]
   88308:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   8830c:	e5f1      	b.n	87ef2 <_dtoa_r+0x5da>
   8830e:	9b08      	ldr	r3, [sp, #32]
   88310:	2b00      	cmp	r3, #0
   88312:	f73f ad3b 	bgt.w	87d8c <_dtoa_r+0x474>
   88316:	f040 81f8 	bne.w	8870a <_dtoa_r+0xdf2>
   8831a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   8831e:	2200      	movs	r2, #0
   88320:	4bb5      	ldr	r3, [pc, #724]	; (885f8 <_dtoa_r+0xce0>)
   88322:	f001 ff23 	bl	8a16c <__aeabi_dmul>
   88326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8832a:	f002 f9a5 	bl	8a678 <__aeabi_dcmpge>
   8832e:	9f08      	ldr	r7, [sp, #32]
   88330:	463e      	mov	r6, r7
   88332:	2800      	cmp	r0, #0
   88334:	d174      	bne.n	88420 <_dtoa_r+0xb08>
   88336:	2331      	movs	r3, #49	; 0x31
   88338:	9a05      	ldr	r2, [sp, #20]
   8833a:	f889 3000 	strb.w	r3, [r9]
   8833e:	3201      	adds	r2, #1
   88340:	9205      	str	r2, [sp, #20]
   88342:	f109 0501 	add.w	r5, r9, #1
   88346:	4639      	mov	r1, r7
   88348:	4620      	mov	r0, r4
   8834a:	f000 feef 	bl	8912c <_Bfree>
   8834e:	2e00      	cmp	r6, #0
   88350:	f47f af34 	bne.w	881bc <_dtoa_r+0x8a4>
   88354:	e736      	b.n	881c4 <_dtoa_r+0x8ac>
   88356:	f000 8148 	beq.w	885ea <_dtoa_r+0xcd2>
   8835a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   8835e:	9b05      	ldr	r3, [sp, #20]
   88360:	425d      	negs	r5, r3
   88362:	4ba6      	ldr	r3, [pc, #664]	; (885fc <_dtoa_r+0xce4>)
   88364:	f005 020f 	and.w	r2, r5, #15
   88368:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8836c:	e9d3 2300 	ldrd	r2, r3, [r3]
   88370:	f001 fefc 	bl	8a16c <__aeabi_dmul>
   88374:	112d      	asrs	r5, r5, #4
   88376:	e9cd 0102 	strd	r0, r1, [sp, #8]
   8837a:	f000 81ce 	beq.w	8871a <_dtoa_r+0xe02>
   8837e:	2300      	movs	r3, #0
   88380:	2702      	movs	r7, #2
   88382:	4e9f      	ldr	r6, [pc, #636]	; (88600 <_dtoa_r+0xce8>)
   88384:	07ea      	lsls	r2, r5, #31
   88386:	d505      	bpl.n	88394 <_dtoa_r+0xa7c>
   88388:	e9d6 2300 	ldrd	r2, r3, [r6]
   8838c:	f001 feee 	bl	8a16c <__aeabi_dmul>
   88390:	2301      	movs	r3, #1
   88392:	441f      	add	r7, r3
   88394:	106d      	asrs	r5, r5, #1
   88396:	f106 0608 	add.w	r6, r6, #8
   8839a:	d1f3      	bne.n	88384 <_dtoa_r+0xa6c>
   8839c:	2b00      	cmp	r3, #0
   8839e:	f43f ac23 	beq.w	87be8 <_dtoa_r+0x2d0>
   883a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   883a6:	e41f      	b.n	87be8 <_dtoa_r+0x2d0>
   883a8:	9b02      	ldr	r3, [sp, #8]
   883aa:	2b00      	cmp	r3, #0
   883ac:	f43f af6d 	beq.w	8828a <_dtoa_r+0x972>
   883b0:	e726      	b.n	88200 <_dtoa_r+0x8e8>
   883b2:	6871      	ldr	r1, [r6, #4]
   883b4:	4620      	mov	r0, r4
   883b6:	f000 fe93 	bl	890e0 <_Balloc>
   883ba:	4605      	mov	r5, r0
   883bc:	6933      	ldr	r3, [r6, #16]
   883be:	f106 010c 	add.w	r1, r6, #12
   883c2:	3302      	adds	r3, #2
   883c4:	009a      	lsls	r2, r3, #2
   883c6:	300c      	adds	r0, #12
   883c8:	f7fd fc1e 	bl	85c08 <memcpy>
   883cc:	4629      	mov	r1, r5
   883ce:	2201      	movs	r2, #1
   883d0:	4620      	mov	r0, r4
   883d2:	f001 f847 	bl	89464 <__lshift>
   883d6:	4682      	mov	sl, r0
   883d8:	e622      	b.n	88020 <_dtoa_r+0x708>
   883da:	2500      	movs	r5, #0
   883dc:	4620      	mov	r0, r4
   883de:	6465      	str	r5, [r4, #68]	; 0x44
   883e0:	4629      	mov	r1, r5
   883e2:	f000 fe7d 	bl	890e0 <_Balloc>
   883e6:	f04f 33ff 	mov.w	r3, #4294967295
   883ea:	9314      	str	r3, [sp, #80]	; 0x50
   883ec:	9308      	str	r3, [sp, #32]
   883ee:	2301      	movs	r3, #1
   883f0:	4681      	mov	r9, r0
   883f2:	9523      	str	r5, [sp, #140]	; 0x8c
   883f4:	6420      	str	r0, [r4, #64]	; 0x40
   883f6:	9309      	str	r3, [sp, #36]	; 0x24
   883f8:	e4b5      	b.n	87d66 <_dtoa_r+0x44e>
   883fa:	f000 fea1 	bl	89140 <__multadd>
   883fe:	46a8      	mov	r8, r5
   88400:	4606      	mov	r6, r0
   88402:	4682      	mov	sl, r0
   88404:	e618      	b.n	88038 <_dtoa_r+0x720>
   88406:	4620      	mov	r0, r4
   88408:	f000 fe90 	bl	8912c <_Bfree>
   8840c:	2201      	movs	r2, #1
   8840e:	e63c      	b.n	8808a <_dtoa_r+0x772>
   88410:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88412:	2b02      	cmp	r3, #2
   88414:	f77f adf7 	ble.w	88006 <_dtoa_r+0x6ee>
   88418:	9b08      	ldr	r3, [sp, #32]
   8841a:	2b00      	cmp	r3, #0
   8841c:	f000 80d7 	beq.w	885ce <_dtoa_r+0xcb6>
   88420:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   88422:	464d      	mov	r5, r9
   88424:	43db      	mvns	r3, r3
   88426:	9305      	str	r3, [sp, #20]
   88428:	e78d      	b.n	88346 <_dtoa_r+0xa2e>
   8842a:	2331      	movs	r3, #49	; 0x31
   8842c:	9a05      	ldr	r2, [sp, #20]
   8842e:	f889 3000 	strb.w	r3, [r9]
   88432:	3201      	adds	r2, #1
   88434:	9205      	str	r2, [sp, #20]
   88436:	e6b5      	b.n	881a4 <_dtoa_r+0x88c>
   88438:	2501      	movs	r5, #1
   8843a:	9523      	str	r5, [sp, #140]	; 0x8c
   8843c:	9508      	str	r5, [sp, #32]
   8843e:	f7ff bb89 	b.w	87b54 <_dtoa_r+0x23c>
   88442:	4638      	mov	r0, r7
   88444:	f001 fe28 	bl	8a098 <__aeabi_i2d>
   88448:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8844c:	f001 fe8e 	bl	8a16c <__aeabi_dmul>
   88450:	2200      	movs	r2, #0
   88452:	4b6c      	ldr	r3, [pc, #432]	; (88604 <_dtoa_r+0xcec>)
   88454:	f001 fcd4 	bl	89e00 <__adddf3>
   88458:	4605      	mov	r5, r0
   8845a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8845e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   88462:	2200      	movs	r2, #0
   88464:	4b64      	ldr	r3, [pc, #400]	; (885f8 <_dtoa_r+0xce0>)
   88466:	f001 fcc9 	bl	89dfc <__aeabi_dsub>
   8846a:	462a      	mov	r2, r5
   8846c:	4633      	mov	r3, r6
   8846e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   88472:	f002 f90b 	bl	8a68c <__aeabi_dcmpgt>
   88476:	4607      	mov	r7, r0
   88478:	2800      	cmp	r0, #0
   8847a:	d158      	bne.n	8852e <_dtoa_r+0xc16>
   8847c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   88480:	462a      	mov	r2, r5
   88482:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   88486:	f002 f8e3 	bl	8a650 <__aeabi_dcmplt>
   8848a:	2800      	cmp	r0, #0
   8848c:	f43f ac67 	beq.w	87d5e <_dtoa_r+0x446>
   88490:	463e      	mov	r6, r7
   88492:	e7c5      	b.n	88420 <_dtoa_r+0xb08>
   88494:	2301      	movs	r3, #1
   88496:	9309      	str	r3, [sp, #36]	; 0x24
   88498:	e6ca      	b.n	88230 <_dtoa_r+0x918>
   8849a:	4659      	mov	r1, fp
   8849c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8849e:	4620      	mov	r0, r4
   884a0:	f000 ff90 	bl	893c4 <__pow5mult>
   884a4:	4683      	mov	fp, r0
   884a6:	e574      	b.n	87f92 <_dtoa_r+0x67a>
   884a8:	f8dd b008 	ldr.w	fp, [sp, #8]
   884ac:	e68a      	b.n	881c4 <_dtoa_r+0x8ac>
   884ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   884b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   884b2:	eba8 0303 	sub.w	r3, r8, r3
   884b6:	441a      	add	r2, r3
   884b8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   884bc:	920c      	str	r2, [sp, #48]	; 0x30
   884be:	f04f 0800 	mov.w	r8, #0
   884c2:	e50d      	b.n	87ee0 <_dtoa_r+0x5c8>
   884c4:	2a00      	cmp	r2, #0
   884c6:	464b      	mov	r3, r9
   884c8:	f108 0501 	add.w	r5, r8, #1
   884cc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   884d0:	f300 80c5 	bgt.w	8865e <_dtoa_r+0xd46>
   884d4:	9602      	str	r6, [sp, #8]
   884d6:	f888 3000 	strb.w	r3, [r8]
   884da:	4656      	mov	r6, sl
   884dc:	e662      	b.n	881a4 <_dtoa_r+0x88c>
   884de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   884e2:	2702      	movs	r7, #2
   884e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   884e8:	f7ff bb65 	b.w	87bb6 <_dtoa_r+0x29e>
   884ec:	464b      	mov	r3, r9
   884ee:	2b39      	cmp	r3, #57	; 0x39
   884f0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   884f4:	f000 80c5 	beq.w	88682 <_dtoa_r+0xd6a>
   884f8:	3301      	adds	r3, #1
   884fa:	9602      	str	r6, [sp, #8]
   884fc:	f888 3000 	strb.w	r3, [r8]
   88500:	4656      	mov	r6, sl
   88502:	e64f      	b.n	881a4 <_dtoa_r+0x88c>
   88504:	9b06      	ldr	r3, [sp, #24]
   88506:	9a08      	ldr	r2, [sp, #32]
   88508:	1a9b      	subs	r3, r3, r2
   8850a:	930a      	str	r3, [sp, #40]	; 0x28
   8850c:	e4f1      	b.n	87ef2 <_dtoa_r+0x5da>
   8850e:	464b      	mov	r3, r9
   88510:	9602      	str	r6, [sp, #8]
   88512:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   88516:	4656      	mov	r6, sl
   88518:	e61d      	b.n	88156 <_dtoa_r+0x83e>
   8851a:	2330      	movs	r3, #48	; 0x30
   8851c:	f889 3000 	strb.w	r3, [r9]
   88520:	9b05      	ldr	r3, [sp, #20]
   88522:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   88526:	3301      	adds	r3, #1
   88528:	9305      	str	r3, [sp, #20]
   8852a:	464b      	mov	r3, r9
   8852c:	e4c3      	b.n	87eb6 <_dtoa_r+0x59e>
   8852e:	2700      	movs	r7, #0
   88530:	463e      	mov	r6, r7
   88532:	e700      	b.n	88336 <_dtoa_r+0xa1e>
   88534:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   88538:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   8853c:	f001 fe16 	bl	8a16c <__aeabi_dmul>
   88540:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88542:	e9cd 0102 	strd	r0, r1, [sp, #8]
   88546:	2b01      	cmp	r3, #1
   88548:	f889 8000 	strb.w	r8, [r9]
   8854c:	d021      	beq.n	88592 <_dtoa_r+0xc7a>
   8854e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88550:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
   88554:	444b      	add	r3, r9
   88556:	469a      	mov	sl, r3
   88558:	2200      	movs	r2, #0
   8855a:	4b2b      	ldr	r3, [pc, #172]	; (88608 <_dtoa_r+0xcf0>)
   8855c:	4630      	mov	r0, r6
   8855e:	4639      	mov	r1, r7
   88560:	f001 fe04 	bl	8a16c <__aeabi_dmul>
   88564:	460f      	mov	r7, r1
   88566:	4606      	mov	r6, r0
   88568:	f002 f8b0 	bl	8a6cc <__aeabi_d2iz>
   8856c:	4680      	mov	r8, r0
   8856e:	f001 fd93 	bl	8a098 <__aeabi_i2d>
   88572:	4602      	mov	r2, r0
   88574:	460b      	mov	r3, r1
   88576:	4630      	mov	r0, r6
   88578:	4639      	mov	r1, r7
   8857a:	f001 fc3f 	bl	89dfc <__aeabi_dsub>
   8857e:	f108 0830 	add.w	r8, r8, #48	; 0x30
   88582:	f805 8b01 	strb.w	r8, [r5], #1
   88586:	4555      	cmp	r5, sl
   88588:	4606      	mov	r6, r0
   8858a:	460f      	mov	r7, r1
   8858c:	d1e4      	bne.n	88558 <_dtoa_r+0xc40>
   8858e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
   88592:	2200      	movs	r2, #0
   88594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   88598:	4b1c      	ldr	r3, [pc, #112]	; (8860c <_dtoa_r+0xcf4>)
   8859a:	f001 fc31 	bl	89e00 <__adddf3>
   8859e:	4632      	mov	r2, r6
   885a0:	463b      	mov	r3, r7
   885a2:	f002 f855 	bl	8a650 <__aeabi_dcmplt>
   885a6:	2800      	cmp	r0, #0
   885a8:	d071      	beq.n	8868e <_dtoa_r+0xd76>
   885aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   885ac:	9305      	str	r3, [sp, #20]
   885ae:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   885b2:	e47b      	b.n	87eac <_dtoa_r+0x594>
   885b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   885b6:	9a06      	ldr	r2, [sp, #24]
   885b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   885bc:	920a      	str	r2, [sp, #40]	; 0x28
   885be:	441a      	add	r2, r3
   885c0:	449a      	add	sl, r3
   885c2:	9206      	str	r2, [sp, #24]
   885c4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   885c8:	e493      	b.n	87ef2 <_dtoa_r+0x5da>
   885ca:	2300      	movs	r3, #0
   885cc:	e66f      	b.n	882ae <_dtoa_r+0x996>
   885ce:	4639      	mov	r1, r7
   885d0:	2205      	movs	r2, #5
   885d2:	4620      	mov	r0, r4
   885d4:	f000 fdb4 	bl	89140 <__multadd>
   885d8:	4601      	mov	r1, r0
   885da:	4607      	mov	r7, r0
   885dc:	4658      	mov	r0, fp
   885de:	f000 ff9b 	bl	89518 <__mcmp>
   885e2:	2800      	cmp	r0, #0
   885e4:	f73f aea7 	bgt.w	88336 <_dtoa_r+0xa1e>
   885e8:	e71a      	b.n	88420 <_dtoa_r+0xb08>
   885ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   885ee:	2702      	movs	r7, #2
   885f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   885f4:	f7ff baf8 	b.w	87be8 <_dtoa_r+0x2d0>
   885f8:	40140000 	.word	0x40140000
   885fc:	0008ab10 	.word	0x0008ab10
   88600:	0008aae8 	.word	0x0008aae8
   88604:	401c0000 	.word	0x401c0000
   88608:	40240000 	.word	0x40240000
   8860c:	3fe00000 	.word	0x3fe00000
   88610:	9b08      	ldr	r3, [sp, #32]
   88612:	2b00      	cmp	r3, #0
   88614:	f43f af15 	beq.w	88442 <_dtoa_r+0xb2a>
   88618:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8861a:	2b00      	cmp	r3, #0
   8861c:	f77f ab9f 	ble.w	87d5e <_dtoa_r+0x446>
   88620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   88624:	2200      	movs	r2, #0
   88626:	4b45      	ldr	r3, [pc, #276]	; (8873c <_dtoa_r+0xe24>)
   88628:	f001 fda0 	bl	8a16c <__aeabi_dmul>
   8862c:	4605      	mov	r5, r0
   8862e:	460e      	mov	r6, r1
   88630:	1c78      	adds	r0, r7, #1
   88632:	e9cd 5602 	strd	r5, r6, [sp, #8]
   88636:	f001 fd2f 	bl	8a098 <__aeabi_i2d>
   8863a:	462a      	mov	r2, r5
   8863c:	4633      	mov	r3, r6
   8863e:	f001 fd95 	bl	8a16c <__aeabi_dmul>
   88642:	2200      	movs	r2, #0
   88644:	4b3e      	ldr	r3, [pc, #248]	; (88740 <_dtoa_r+0xe28>)
   88646:	f001 fbdb 	bl	89e00 <__adddf3>
   8864a:	9a05      	ldr	r2, [sp, #20]
   8864c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8864e:	3a01      	subs	r2, #1
   88650:	4605      	mov	r5, r0
   88652:	9215      	str	r2, [sp, #84]	; 0x54
   88654:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   88658:	9310      	str	r3, [sp, #64]	; 0x40
   8865a:	f7ff bae6 	b.w	87c2a <_dtoa_r+0x312>
   8865e:	4659      	mov	r1, fp
   88660:	2201      	movs	r2, #1
   88662:	4620      	mov	r0, r4
   88664:	9302      	str	r3, [sp, #8]
   88666:	f000 fefd 	bl	89464 <__lshift>
   8866a:	4639      	mov	r1, r7
   8866c:	4683      	mov	fp, r0
   8866e:	f000 ff53 	bl	89518 <__mcmp>
   88672:	2800      	cmp	r0, #0
   88674:	9b02      	ldr	r3, [sp, #8]
   88676:	dd36      	ble.n	886e6 <_dtoa_r+0xdce>
   88678:	2b39      	cmp	r3, #57	; 0x39
   8867a:	d002      	beq.n	88682 <_dtoa_r+0xd6a>
   8867c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8867e:	3331      	adds	r3, #49	; 0x31
   88680:	e728      	b.n	884d4 <_dtoa_r+0xbbc>
   88682:	2239      	movs	r2, #57	; 0x39
   88684:	9602      	str	r6, [sp, #8]
   88686:	f888 2000 	strb.w	r2, [r8]
   8868a:	4656      	mov	r6, sl
   8868c:	e584      	b.n	88198 <_dtoa_r+0x880>
   8868e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   88692:	2000      	movs	r0, #0
   88694:	492b      	ldr	r1, [pc, #172]	; (88744 <_dtoa_r+0xe2c>)
   88696:	f001 fbb1 	bl	89dfc <__aeabi_dsub>
   8869a:	4632      	mov	r2, r6
   8869c:	463b      	mov	r3, r7
   8869e:	f001 fff5 	bl	8a68c <__aeabi_dcmpgt>
   886a2:	b910      	cbnz	r0, 886aa <_dtoa_r+0xd92>
   886a4:	f7ff bb5b 	b.w	87d5e <_dtoa_r+0x446>
   886a8:	4615      	mov	r5, r2
   886aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   886ae:	1e6a      	subs	r2, r5, #1
   886b0:	2b30      	cmp	r3, #48	; 0x30
   886b2:	d0f9      	beq.n	886a8 <_dtoa_r+0xd90>
   886b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   886b6:	9305      	str	r3, [sp, #20]
   886b8:	e584      	b.n	881c4 <_dtoa_r+0x8ac>
   886ba:	4643      	mov	r3, r8
   886bc:	46a0      	mov	r8, r4
   886be:	461c      	mov	r4, r3
   886c0:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
   886c4:	f8dd 9008 	ldr.w	r9, [sp, #8]
   886c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   886ca:	9305      	str	r3, [sp, #20]
   886cc:	f7ff bbee 	b.w	87eac <_dtoa_r+0x594>
   886d0:	464b      	mov	r3, r9
   886d2:	2b39      	cmp	r3, #57	; 0x39
   886d4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   886d8:	f108 0501 	add.w	r5, r8, #1
   886dc:	d0d1      	beq.n	88682 <_dtoa_r+0xd6a>
   886de:	9a02      	ldr	r2, [sp, #8]
   886e0:	2a00      	cmp	r2, #0
   886e2:	dccb      	bgt.n	8867c <_dtoa_r+0xd64>
   886e4:	e6f6      	b.n	884d4 <_dtoa_r+0xbbc>
   886e6:	f47f aef5 	bne.w	884d4 <_dtoa_r+0xbbc>
   886ea:	07da      	lsls	r2, r3, #31
   886ec:	f57f aef2 	bpl.w	884d4 <_dtoa_r+0xbbc>
   886f0:	e7c2      	b.n	88678 <_dtoa_r+0xd60>
   886f2:	4631      	mov	r1, r6
   886f4:	2300      	movs	r3, #0
   886f6:	220a      	movs	r2, #10
   886f8:	4620      	mov	r0, r4
   886fa:	f000 fd21 	bl	89140 <__multadd>
   886fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   88700:	4606      	mov	r6, r0
   88702:	2b00      	cmp	r3, #0
   88704:	dd0c      	ble.n	88720 <_dtoa_r+0xe08>
   88706:	9308      	str	r3, [sp, #32]
   88708:	e481      	b.n	8800e <_dtoa_r+0x6f6>
   8870a:	2700      	movs	r7, #0
   8870c:	463e      	mov	r6, r7
   8870e:	e687      	b.n	88420 <_dtoa_r+0xb08>
   88710:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88712:	2b02      	cmp	r3, #2
   88714:	dc0e      	bgt.n	88734 <_dtoa_r+0xe1c>
   88716:	9b14      	ldr	r3, [sp, #80]	; 0x50
   88718:	e501      	b.n	8811e <_dtoa_r+0x806>
   8871a:	2702      	movs	r7, #2
   8871c:	f7ff ba64 	b.w	87be8 <_dtoa_r+0x2d0>
   88720:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88722:	2b02      	cmp	r3, #2
   88724:	dc06      	bgt.n	88734 <_dtoa_r+0xe1c>
   88726:	9b14      	ldr	r3, [sp, #80]	; 0x50
   88728:	e7ed      	b.n	88706 <_dtoa_r+0xdee>
   8872a:	f43f ac53 	beq.w	87fd4 <_dtoa_r+0x6bc>
   8872e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   88732:	e448      	b.n	87fc6 <_dtoa_r+0x6ae>
   88734:	9b14      	ldr	r3, [sp, #80]	; 0x50
   88736:	9308      	str	r3, [sp, #32]
   88738:	e66e      	b.n	88418 <_dtoa_r+0xb00>
   8873a:	bf00      	nop
   8873c:	40240000 	.word	0x40240000
   88740:	401c0000 	.word	0x401c0000
   88744:	3fe00000 	.word	0x3fe00000

00088748 <__libc_fini_array>:
   88748:	b538      	push	{r3, r4, r5, lr}
   8874a:	4c0a      	ldr	r4, [pc, #40]	; (88774 <__libc_fini_array+0x2c>)
   8874c:	4d0a      	ldr	r5, [pc, #40]	; (88778 <__libc_fini_array+0x30>)
   8874e:	1b64      	subs	r4, r4, r5
   88750:	10a4      	asrs	r4, r4, #2
   88752:	d00a      	beq.n	8876a <__libc_fini_array+0x22>
   88754:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   88758:	3b01      	subs	r3, #1
   8875a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8875e:	3c01      	subs	r4, #1
   88760:	f855 3904 	ldr.w	r3, [r5], #-4
   88764:	4798      	blx	r3
   88766:	2c00      	cmp	r4, #0
   88768:	d1f9      	bne.n	8875e <__libc_fini_array+0x16>
   8876a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8876e:	f002 bac5 	b.w	8acfc <_fini>
   88772:	bf00      	nop
   88774:	0008ad0c 	.word	0x0008ad0c
   88778:	0008ad08 	.word	0x0008ad08

0008877c <_malloc_trim_r>:
   8877c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8877e:	460c      	mov	r4, r1
   88780:	4f23      	ldr	r7, [pc, #140]	; (88810 <_malloc_trim_r+0x94>)
   88782:	4606      	mov	r6, r0
   88784:	f000 fca0 	bl	890c8 <__malloc_lock>
   88788:	68bb      	ldr	r3, [r7, #8]
   8878a:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8878e:	685d      	ldr	r5, [r3, #4]
   88790:	310f      	adds	r1, #15
   88792:	f025 0503 	bic.w	r5, r5, #3
   88796:	4429      	add	r1, r5
   88798:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8879c:	f021 010f 	bic.w	r1, r1, #15
   887a0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   887a4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   887a8:	db07      	blt.n	887ba <_malloc_trim_r+0x3e>
   887aa:	2100      	movs	r1, #0
   887ac:	4630      	mov	r0, r6
   887ae:	f001 f993 	bl	89ad8 <_sbrk_r>
   887b2:	68bb      	ldr	r3, [r7, #8]
   887b4:	442b      	add	r3, r5
   887b6:	4298      	cmp	r0, r3
   887b8:	d004      	beq.n	887c4 <_malloc_trim_r+0x48>
   887ba:	4630      	mov	r0, r6
   887bc:	f000 fc8a 	bl	890d4 <__malloc_unlock>
   887c0:	2000      	movs	r0, #0
   887c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   887c4:	4261      	negs	r1, r4
   887c6:	4630      	mov	r0, r6
   887c8:	f001 f986 	bl	89ad8 <_sbrk_r>
   887cc:	3001      	adds	r0, #1
   887ce:	d00d      	beq.n	887ec <_malloc_trim_r+0x70>
   887d0:	4b10      	ldr	r3, [pc, #64]	; (88814 <_malloc_trim_r+0x98>)
   887d2:	68ba      	ldr	r2, [r7, #8]
   887d4:	6819      	ldr	r1, [r3, #0]
   887d6:	1b2d      	subs	r5, r5, r4
   887d8:	f045 0501 	orr.w	r5, r5, #1
   887dc:	4630      	mov	r0, r6
   887de:	1b09      	subs	r1, r1, r4
   887e0:	6055      	str	r5, [r2, #4]
   887e2:	6019      	str	r1, [r3, #0]
   887e4:	f000 fc76 	bl	890d4 <__malloc_unlock>
   887e8:	2001      	movs	r0, #1
   887ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   887ec:	2100      	movs	r1, #0
   887ee:	4630      	mov	r0, r6
   887f0:	f001 f972 	bl	89ad8 <_sbrk_r>
   887f4:	68ba      	ldr	r2, [r7, #8]
   887f6:	1a83      	subs	r3, r0, r2
   887f8:	2b0f      	cmp	r3, #15
   887fa:	ddde      	ble.n	887ba <_malloc_trim_r+0x3e>
   887fc:	4906      	ldr	r1, [pc, #24]	; (88818 <_malloc_trim_r+0x9c>)
   887fe:	f043 0301 	orr.w	r3, r3, #1
   88802:	680c      	ldr	r4, [r1, #0]
   88804:	4903      	ldr	r1, [pc, #12]	; (88814 <_malloc_trim_r+0x98>)
   88806:	1b00      	subs	r0, r0, r4
   88808:	6053      	str	r3, [r2, #4]
   8880a:	6008      	str	r0, [r1, #0]
   8880c:	e7d5      	b.n	887ba <_malloc_trim_r+0x3e>
   8880e:	bf00      	nop
   88810:	20000950 	.word	0x20000950
   88814:	200012e4 	.word	0x200012e4
   88818:	20000d58 	.word	0x20000d58

0008881c <_free_r>:
   8881c:	2900      	cmp	r1, #0
   8881e:	d053      	beq.n	888c8 <_free_r+0xac>
   88820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88822:	460d      	mov	r5, r1
   88824:	4606      	mov	r6, r0
   88826:	f000 fc4f 	bl	890c8 <__malloc_lock>
   8882a:	f855 cc04 	ldr.w	ip, [r5, #-4]
   8882e:	4f71      	ldr	r7, [pc, #452]	; (889f4 <_free_r+0x1d8>)
   88830:	f1a5 0108 	sub.w	r1, r5, #8
   88834:	f02c 0301 	bic.w	r3, ip, #1
   88838:	18ca      	adds	r2, r1, r3
   8883a:	68b8      	ldr	r0, [r7, #8]
   8883c:	6854      	ldr	r4, [r2, #4]
   8883e:	4290      	cmp	r0, r2
   88840:	f024 0403 	bic.w	r4, r4, #3
   88844:	d053      	beq.n	888ee <_free_r+0xd2>
   88846:	f01c 0f01 	tst.w	ip, #1
   8884a:	6054      	str	r4, [r2, #4]
   8884c:	eb02 0004 	add.w	r0, r2, r4
   88850:	d13b      	bne.n	888ca <_free_r+0xae>
   88852:	f855 cc08 	ldr.w	ip, [r5, #-8]
   88856:	6840      	ldr	r0, [r0, #4]
   88858:	eba1 010c 	sub.w	r1, r1, ip
   8885c:	688d      	ldr	r5, [r1, #8]
   8885e:	f107 0e08 	add.w	lr, r7, #8
   88862:	4575      	cmp	r5, lr
   88864:	4463      	add	r3, ip
   88866:	f000 0001 	and.w	r0, r0, #1
   8886a:	d075      	beq.n	88958 <_free_r+0x13c>
   8886c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   88870:	f8c5 c00c 	str.w	ip, [r5, #12]
   88874:	f8cc 5008 	str.w	r5, [ip, #8]
   88878:	b360      	cbz	r0, 888d4 <_free_r+0xb8>
   8887a:	f043 0201 	orr.w	r2, r3, #1
   8887e:	604a      	str	r2, [r1, #4]
   88880:	50cb      	str	r3, [r1, r3]
   88882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   88886:	d350      	bcc.n	8892a <_free_r+0x10e>
   88888:	0a5a      	lsrs	r2, r3, #9
   8888a:	2a04      	cmp	r2, #4
   8888c:	d870      	bhi.n	88970 <_free_r+0x154>
   8888e:	099a      	lsrs	r2, r3, #6
   88890:	f102 0539 	add.w	r5, r2, #57	; 0x39
   88894:	00ed      	lsls	r5, r5, #3
   88896:	f102 0038 	add.w	r0, r2, #56	; 0x38
   8889a:	197c      	adds	r4, r7, r5
   8889c:	597a      	ldr	r2, [r7, r5]
   8889e:	3c08      	subs	r4, #8
   888a0:	4294      	cmp	r4, r2
   888a2:	d078      	beq.n	88996 <_free_r+0x17a>
   888a4:	6850      	ldr	r0, [r2, #4]
   888a6:	f020 0003 	bic.w	r0, r0, #3
   888aa:	4298      	cmp	r0, r3
   888ac:	d971      	bls.n	88992 <_free_r+0x176>
   888ae:	6892      	ldr	r2, [r2, #8]
   888b0:	4294      	cmp	r4, r2
   888b2:	d1f7      	bne.n	888a4 <_free_r+0x88>
   888b4:	68e3      	ldr	r3, [r4, #12]
   888b6:	e9c1 4302 	strd	r4, r3, [r1, #8]
   888ba:	4630      	mov	r0, r6
   888bc:	6099      	str	r1, [r3, #8]
   888be:	60e1      	str	r1, [r4, #12]
   888c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   888c4:	f000 bc06 	b.w	890d4 <__malloc_unlock>
   888c8:	4770      	bx	lr
   888ca:	6840      	ldr	r0, [r0, #4]
   888cc:	f000 0001 	and.w	r0, r0, #1
   888d0:	2800      	cmp	r0, #0
   888d2:	d1d2      	bne.n	8887a <_free_r+0x5e>
   888d4:	6890      	ldr	r0, [r2, #8]
   888d6:	4d48      	ldr	r5, [pc, #288]	; (889f8 <_free_r+0x1dc>)
   888d8:	4423      	add	r3, r4
   888da:	42a8      	cmp	r0, r5
   888dc:	f043 0401 	orr.w	r4, r3, #1
   888e0:	d062      	beq.n	889a8 <_free_r+0x18c>
   888e2:	68d2      	ldr	r2, [r2, #12]
   888e4:	60c2      	str	r2, [r0, #12]
   888e6:	6090      	str	r0, [r2, #8]
   888e8:	604c      	str	r4, [r1, #4]
   888ea:	50cb      	str	r3, [r1, r3]
   888ec:	e7c9      	b.n	88882 <_free_r+0x66>
   888ee:	f01c 0f01 	tst.w	ip, #1
   888f2:	4423      	add	r3, r4
   888f4:	d107      	bne.n	88906 <_free_r+0xea>
   888f6:	f855 4c08 	ldr.w	r4, [r5, #-8]
   888fa:	1b09      	subs	r1, r1, r4
   888fc:	e9d1 0202 	ldrd	r0, r2, [r1, #8]
   88900:	4423      	add	r3, r4
   88902:	60c2      	str	r2, [r0, #12]
   88904:	6090      	str	r0, [r2, #8]
   88906:	4a3d      	ldr	r2, [pc, #244]	; (889fc <_free_r+0x1e0>)
   88908:	f043 0001 	orr.w	r0, r3, #1
   8890c:	6812      	ldr	r2, [r2, #0]
   8890e:	6048      	str	r0, [r1, #4]
   88910:	429a      	cmp	r2, r3
   88912:	60b9      	str	r1, [r7, #8]
   88914:	d804      	bhi.n	88920 <_free_r+0x104>
   88916:	4b3a      	ldr	r3, [pc, #232]	; (88a00 <_free_r+0x1e4>)
   88918:	4630      	mov	r0, r6
   8891a:	6819      	ldr	r1, [r3, #0]
   8891c:	f7ff ff2e 	bl	8877c <_malloc_trim_r>
   88920:	4630      	mov	r0, r6
   88922:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   88926:	f000 bbd5 	b.w	890d4 <__malloc_unlock>
   8892a:	2201      	movs	r2, #1
   8892c:	08db      	lsrs	r3, r3, #3
   8892e:	687c      	ldr	r4, [r7, #4]
   88930:	1098      	asrs	r0, r3, #2
   88932:	4413      	add	r3, r2
   88934:	4082      	lsls	r2, r0
   88936:	4322      	orrs	r2, r4
   88938:	eb07 00c3 	add.w	r0, r7, r3, lsl #3
   8893c:	f857 4033 	ldr.w	r4, [r7, r3, lsl #3]
   88940:	3808      	subs	r0, #8
   88942:	e9c1 4002 	strd	r4, r0, [r1, #8]
   88946:	607a      	str	r2, [r7, #4]
   88948:	4630      	mov	r0, r6
   8894a:	f847 1033 	str.w	r1, [r7, r3, lsl #3]
   8894e:	60e1      	str	r1, [r4, #12]
   88950:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   88954:	f000 bbbe 	b.w	890d4 <__malloc_unlock>
   88958:	2800      	cmp	r0, #0
   8895a:	d145      	bne.n	889e8 <_free_r+0x1cc>
   8895c:	e9d2 0202 	ldrd	r0, r2, [r2, #8]
   88960:	4423      	add	r3, r4
   88962:	f043 0401 	orr.w	r4, r3, #1
   88966:	60c2      	str	r2, [r0, #12]
   88968:	6090      	str	r0, [r2, #8]
   8896a:	604c      	str	r4, [r1, #4]
   8896c:	50cb      	str	r3, [r1, r3]
   8896e:	e7d7      	b.n	88920 <_free_r+0x104>
   88970:	2a14      	cmp	r2, #20
   88972:	d908      	bls.n	88986 <_free_r+0x16a>
   88974:	2a54      	cmp	r2, #84	; 0x54
   88976:	d81e      	bhi.n	889b6 <_free_r+0x19a>
   88978:	0b1a      	lsrs	r2, r3, #12
   8897a:	f102 056f 	add.w	r5, r2, #111	; 0x6f
   8897e:	00ed      	lsls	r5, r5, #3
   88980:	f102 006e 	add.w	r0, r2, #110	; 0x6e
   88984:	e789      	b.n	8889a <_free_r+0x7e>
   88986:	f102 055c 	add.w	r5, r2, #92	; 0x5c
   8898a:	00ed      	lsls	r5, r5, #3
   8898c:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   88990:	e783      	b.n	8889a <_free_r+0x7e>
   88992:	4614      	mov	r4, r2
   88994:	e78e      	b.n	888b4 <_free_r+0x98>
   88996:	2301      	movs	r3, #1
   88998:	1082      	asrs	r2, r0, #2
   8899a:	6878      	ldr	r0, [r7, #4]
   8899c:	fa03 f202 	lsl.w	r2, r3, r2
   889a0:	4302      	orrs	r2, r0
   889a2:	607a      	str	r2, [r7, #4]
   889a4:	4623      	mov	r3, r4
   889a6:	e786      	b.n	888b6 <_free_r+0x9a>
   889a8:	e9c7 1104 	strd	r1, r1, [r7, #16]
   889ac:	e9c1 0002 	strd	r0, r0, [r1, #8]
   889b0:	604c      	str	r4, [r1, #4]
   889b2:	50cb      	str	r3, [r1, r3]
   889b4:	e7b4      	b.n	88920 <_free_r+0x104>
   889b6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   889ba:	d806      	bhi.n	889ca <_free_r+0x1ae>
   889bc:	0bda      	lsrs	r2, r3, #15
   889be:	f102 0578 	add.w	r5, r2, #120	; 0x78
   889c2:	00ed      	lsls	r5, r5, #3
   889c4:	f102 0077 	add.w	r0, r2, #119	; 0x77
   889c8:	e767      	b.n	8889a <_free_r+0x7e>
   889ca:	f240 5054 	movw	r0, #1364	; 0x554
   889ce:	4282      	cmp	r2, r0
   889d0:	d806      	bhi.n	889e0 <_free_r+0x1c4>
   889d2:	0c9a      	lsrs	r2, r3, #18
   889d4:	f102 057d 	add.w	r5, r2, #125	; 0x7d
   889d8:	00ed      	lsls	r5, r5, #3
   889da:	f102 007c 	add.w	r0, r2, #124	; 0x7c
   889de:	e75c      	b.n	8889a <_free_r+0x7e>
   889e0:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
   889e4:	207e      	movs	r0, #126	; 0x7e
   889e6:	e758      	b.n	8889a <_free_r+0x7e>
   889e8:	f043 0001 	orr.w	r0, r3, #1
   889ec:	6048      	str	r0, [r1, #4]
   889ee:	6013      	str	r3, [r2, #0]
   889f0:	e796      	b.n	88920 <_free_r+0x104>
   889f2:	bf00      	nop
   889f4:	20000950 	.word	0x20000950
   889f8:	20000958 	.word	0x20000958
   889fc:	20000d5c 	.word	0x20000d5c
   88a00:	20001314 	.word	0x20001314

00088a04 <_localeconv_r>:
   88a04:	4a04      	ldr	r2, [pc, #16]	; (88a18 <_localeconv_r+0x14>)
   88a06:	4b05      	ldr	r3, [pc, #20]	; (88a1c <_localeconv_r+0x18>)
   88a08:	6812      	ldr	r2, [r2, #0]
   88a0a:	6b50      	ldr	r0, [r2, #52]	; 0x34
   88a0c:	2800      	cmp	r0, #0
   88a0e:	bf08      	it	eq
   88a10:	4618      	moveq	r0, r3
   88a12:	30f0      	adds	r0, #240	; 0xf0
   88a14:	4770      	bx	lr
   88a16:	bf00      	nop
   88a18:	200003b0 	.word	0x200003b0
   88a1c:	200007e4 	.word	0x200007e4

00088a20 <__retarget_lock_acquire_recursive>:
   88a20:	4770      	bx	lr
   88a22:	bf00      	nop

00088a24 <__retarget_lock_release_recursive>:
   88a24:	4770      	bx	lr
   88a26:	bf00      	nop

00088a28 <_malloc_r>:
   88a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88a2c:	f101 050b 	add.w	r5, r1, #11
   88a30:	2d16      	cmp	r5, #22
   88a32:	b083      	sub	sp, #12
   88a34:	4606      	mov	r6, r0
   88a36:	d823      	bhi.n	88a80 <_malloc_r+0x58>
   88a38:	2910      	cmp	r1, #16
   88a3a:	f200 80b6 	bhi.w	88baa <_malloc_r+0x182>
   88a3e:	f000 fb43 	bl	890c8 <__malloc_lock>
   88a42:	2510      	movs	r5, #16
   88a44:	2318      	movs	r3, #24
   88a46:	2002      	movs	r0, #2
   88a48:	4fcc      	ldr	r7, [pc, #816]	; (88d7c <_malloc_r+0x354>)
   88a4a:	443b      	add	r3, r7
   88a4c:	685c      	ldr	r4, [r3, #4]
   88a4e:	f1a3 0208 	sub.w	r2, r3, #8
   88a52:	4294      	cmp	r4, r2
   88a54:	f000 8156 	beq.w	88d04 <_malloc_r+0x2dc>
   88a58:	6863      	ldr	r3, [r4, #4]
   88a5a:	68e1      	ldr	r1, [r4, #12]
   88a5c:	f023 0303 	bic.w	r3, r3, #3
   88a60:	4423      	add	r3, r4
   88a62:	685a      	ldr	r2, [r3, #4]
   88a64:	68a5      	ldr	r5, [r4, #8]
   88a66:	f042 0201 	orr.w	r2, r2, #1
   88a6a:	60e9      	str	r1, [r5, #12]
   88a6c:	4630      	mov	r0, r6
   88a6e:	608d      	str	r5, [r1, #8]
   88a70:	605a      	str	r2, [r3, #4]
   88a72:	f000 fb2f 	bl	890d4 <__malloc_unlock>
   88a76:	3408      	adds	r4, #8
   88a78:	4620      	mov	r0, r4
   88a7a:	b003      	add	sp, #12
   88a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88a80:	f035 0507 	bics.w	r5, r5, #7
   88a84:	f100 8091 	bmi.w	88baa <_malloc_r+0x182>
   88a88:	42a9      	cmp	r1, r5
   88a8a:	f200 808e 	bhi.w	88baa <_malloc_r+0x182>
   88a8e:	f000 fb1b 	bl	890c8 <__malloc_lock>
   88a92:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   88a96:	f0c0 8164 	bcc.w	88d62 <_malloc_r+0x33a>
   88a9a:	0a6b      	lsrs	r3, r5, #9
   88a9c:	f000 808c 	beq.w	88bb8 <_malloc_r+0x190>
   88aa0:	2b04      	cmp	r3, #4
   88aa2:	f200 8136 	bhi.w	88d12 <_malloc_r+0x2ea>
   88aa6:	09ab      	lsrs	r3, r5, #6
   88aa8:	f103 0039 	add.w	r0, r3, #57	; 0x39
   88aac:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   88ab0:	00c1      	lsls	r1, r0, #3
   88ab2:	4fb2      	ldr	r7, [pc, #712]	; (88d7c <_malloc_r+0x354>)
   88ab4:	4439      	add	r1, r7
   88ab6:	684c      	ldr	r4, [r1, #4]
   88ab8:	3908      	subs	r1, #8
   88aba:	42a1      	cmp	r1, r4
   88abc:	d106      	bne.n	88acc <_malloc_r+0xa4>
   88abe:	e00c      	b.n	88ada <_malloc_r+0xb2>
   88ac0:	2a00      	cmp	r2, #0
   88ac2:	f280 811b 	bge.w	88cfc <_malloc_r+0x2d4>
   88ac6:	68e4      	ldr	r4, [r4, #12]
   88ac8:	42a1      	cmp	r1, r4
   88aca:	d006      	beq.n	88ada <_malloc_r+0xb2>
   88acc:	6863      	ldr	r3, [r4, #4]
   88ace:	f023 0303 	bic.w	r3, r3, #3
   88ad2:	1b5a      	subs	r2, r3, r5
   88ad4:	2a0f      	cmp	r2, #15
   88ad6:	ddf3      	ble.n	88ac0 <_malloc_r+0x98>
   88ad8:	4660      	mov	r0, ip
   88ada:	693c      	ldr	r4, [r7, #16]
   88adc:	f8df c2b0 	ldr.w	ip, [pc, #688]	; 88d90 <_malloc_r+0x368>
   88ae0:	4564      	cmp	r4, ip
   88ae2:	d06f      	beq.n	88bc4 <_malloc_r+0x19c>
   88ae4:	6863      	ldr	r3, [r4, #4]
   88ae6:	f023 0303 	bic.w	r3, r3, #3
   88aea:	1b5a      	subs	r2, r3, r5
   88aec:	2a0f      	cmp	r2, #15
   88aee:	f300 8126 	bgt.w	88d3e <_malloc_r+0x316>
   88af2:	2a00      	cmp	r2, #0
   88af4:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   88af8:	f280 8117 	bge.w	88d2a <_malloc_r+0x302>
   88afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   88b00:	f080 8159 	bcs.w	88db6 <_malloc_r+0x38e>
   88b04:	2201      	movs	r2, #1
   88b06:	08db      	lsrs	r3, r3, #3
   88b08:	1099      	asrs	r1, r3, #2
   88b0a:	4413      	add	r3, r2
   88b0c:	408a      	lsls	r2, r1
   88b0e:	6879      	ldr	r1, [r7, #4]
   88b10:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
   88b14:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
   88b18:	430a      	orrs	r2, r1
   88b1a:	f1a8 0108 	sub.w	r1, r8, #8
   88b1e:	e9c4 e102 	strd	lr, r1, [r4, #8]
   88b22:	607a      	str	r2, [r7, #4]
   88b24:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   88b28:	f8ce 400c 	str.w	r4, [lr, #12]
   88b2c:	2401      	movs	r4, #1
   88b2e:	1083      	asrs	r3, r0, #2
   88b30:	409c      	lsls	r4, r3
   88b32:	4294      	cmp	r4, r2
   88b34:	d84c      	bhi.n	88bd0 <_malloc_r+0x1a8>
   88b36:	4214      	tst	r4, r2
   88b38:	d106      	bne.n	88b48 <_malloc_r+0x120>
   88b3a:	f020 0003 	bic.w	r0, r0, #3
   88b3e:	0064      	lsls	r4, r4, #1
   88b40:	4214      	tst	r4, r2
   88b42:	f100 0004 	add.w	r0, r0, #4
   88b46:	d0fa      	beq.n	88b3e <_malloc_r+0x116>
   88b48:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   88b4c:	46ce      	mov	lr, r9
   88b4e:	4680      	mov	r8, r0
   88b50:	f8de 300c 	ldr.w	r3, [lr, #12]
   88b54:	459e      	cmp	lr, r3
   88b56:	d107      	bne.n	88b68 <_malloc_r+0x140>
   88b58:	e107      	b.n	88d6a <_malloc_r+0x342>
   88b5a:	2a00      	cmp	r2, #0
   88b5c:	f280 811c 	bge.w	88d98 <_malloc_r+0x370>
   88b60:	68db      	ldr	r3, [r3, #12]
   88b62:	459e      	cmp	lr, r3
   88b64:	f000 8101 	beq.w	88d6a <_malloc_r+0x342>
   88b68:	6859      	ldr	r1, [r3, #4]
   88b6a:	f021 0103 	bic.w	r1, r1, #3
   88b6e:	1b4a      	subs	r2, r1, r5
   88b70:	2a0f      	cmp	r2, #15
   88b72:	ddf2      	ble.n	88b5a <_malloc_r+0x132>
   88b74:	f045 0801 	orr.w	r8, r5, #1
   88b78:	4630      	mov	r0, r6
   88b7a:	e9d3 e402 	ldrd	lr, r4, [r3, #8]
   88b7e:	441d      	add	r5, r3
   88b80:	f042 0601 	orr.w	r6, r2, #1
   88b84:	f8c3 8004 	str.w	r8, [r3, #4]
   88b88:	f8ce 400c 	str.w	r4, [lr, #12]
   88b8c:	f8c4 e008 	str.w	lr, [r4, #8]
   88b90:	e9c7 5504 	strd	r5, r5, [r7, #16]
   88b94:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   88b98:	606e      	str	r6, [r5, #4]
   88b9a:	505a      	str	r2, [r3, r1]
   88b9c:	9301      	str	r3, [sp, #4]
   88b9e:	f000 fa99 	bl	890d4 <__malloc_unlock>
   88ba2:	9b01      	ldr	r3, [sp, #4]
   88ba4:	f103 0408 	add.w	r4, r3, #8
   88ba8:	e766      	b.n	88a78 <_malloc_r+0x50>
   88baa:	2400      	movs	r4, #0
   88bac:	230c      	movs	r3, #12
   88bae:	4620      	mov	r0, r4
   88bb0:	6033      	str	r3, [r6, #0]
   88bb2:	b003      	add	sp, #12
   88bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88bb8:	f44f 7100 	mov.w	r1, #512	; 0x200
   88bbc:	2040      	movs	r0, #64	; 0x40
   88bbe:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   88bc2:	e776      	b.n	88ab2 <_malloc_r+0x8a>
   88bc4:	2401      	movs	r4, #1
   88bc6:	687a      	ldr	r2, [r7, #4]
   88bc8:	1083      	asrs	r3, r0, #2
   88bca:	409c      	lsls	r4, r3
   88bcc:	4294      	cmp	r4, r2
   88bce:	d9b2      	bls.n	88b36 <_malloc_r+0x10e>
   88bd0:	68bc      	ldr	r4, [r7, #8]
   88bd2:	6863      	ldr	r3, [r4, #4]
   88bd4:	f023 0903 	bic.w	r9, r3, #3
   88bd8:	45a9      	cmp	r9, r5
   88bda:	d303      	bcc.n	88be4 <_malloc_r+0x1bc>
   88bdc:	eba9 0305 	sub.w	r3, r9, r5
   88be0:	2b0f      	cmp	r3, #15
   88be2:	dc7b      	bgt.n	88cdc <_malloc_r+0x2b4>
   88be4:	4b66      	ldr	r3, [pc, #408]	; (88d80 <_malloc_r+0x358>)
   88be6:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 88d94 <_malloc_r+0x36c>
   88bea:	681a      	ldr	r2, [r3, #0]
   88bec:	f8da 3000 	ldr.w	r3, [sl]
   88bf0:	eb05 0802 	add.w	r8, r5, r2
   88bf4:	3301      	adds	r3, #1
   88bf6:	f000 813a 	beq.w	88e6e <_malloc_r+0x446>
   88bfa:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
   88bfe:	f108 080f 	add.w	r8, r8, #15
   88c02:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
   88c06:	f028 080f 	bic.w	r8, r8, #15
   88c0a:	4641      	mov	r1, r8
   88c0c:	4630      	mov	r0, r6
   88c0e:	f000 ff63 	bl	89ad8 <_sbrk_r>
   88c12:	f1b0 3fff 	cmp.w	r0, #4294967295
   88c16:	4683      	mov	fp, r0
   88c18:	f000 80f6 	beq.w	88e08 <_malloc_r+0x3e0>
   88c1c:	eb04 0009 	add.w	r0, r4, r9
   88c20:	4558      	cmp	r0, fp
   88c22:	f200 80ef 	bhi.w	88e04 <_malloc_r+0x3dc>
   88c26:	4a57      	ldr	r2, [pc, #348]	; (88d84 <_malloc_r+0x35c>)
   88c28:	6813      	ldr	r3, [r2, #0]
   88c2a:	4443      	add	r3, r8
   88c2c:	6013      	str	r3, [r2, #0]
   88c2e:	f000 813f 	beq.w	88eb0 <_malloc_r+0x488>
   88c32:	f8da 1000 	ldr.w	r1, [sl]
   88c36:	3101      	adds	r1, #1
   88c38:	bf1b      	ittet	ne
   88c3a:	ebab 0000 	subne.w	r0, fp, r0
   88c3e:	181b      	addne	r3, r3, r0
   88c40:	f8ca b000 	streq.w	fp, [sl]
   88c44:	6013      	strne	r3, [r2, #0]
   88c46:	f01b 0307 	ands.w	r3, fp, #7
   88c4a:	f000 8126 	beq.w	88e9a <_malloc_r+0x472>
   88c4e:	f1c3 0108 	rsb	r1, r3, #8
   88c52:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   88c56:	448b      	add	fp, r1
   88c58:	3308      	adds	r3, #8
   88c5a:	44d8      	add	r8, fp
   88c5c:	f3c8 080b 	ubfx	r8, r8, #0, #12
   88c60:	eba3 0808 	sub.w	r8, r3, r8
   88c64:	4641      	mov	r1, r8
   88c66:	4630      	mov	r0, r6
   88c68:	9201      	str	r2, [sp, #4]
   88c6a:	f000 ff35 	bl	89ad8 <_sbrk_r>
   88c6e:	1c43      	adds	r3, r0, #1
   88c70:	9a01      	ldr	r2, [sp, #4]
   88c72:	f000 8138 	beq.w	88ee6 <_malloc_r+0x4be>
   88c76:	eba0 010b 	sub.w	r1, r0, fp
   88c7a:	4441      	add	r1, r8
   88c7c:	f041 0101 	orr.w	r1, r1, #1
   88c80:	6813      	ldr	r3, [r2, #0]
   88c82:	42bc      	cmp	r4, r7
   88c84:	4443      	add	r3, r8
   88c86:	f8c7 b008 	str.w	fp, [r7, #8]
   88c8a:	6013      	str	r3, [r2, #0]
   88c8c:	f8cb 1004 	str.w	r1, [fp, #4]
   88c90:	d015      	beq.n	88cbe <_malloc_r+0x296>
   88c92:	f1b9 0f0f 	cmp.w	r9, #15
   88c96:	f240 8122 	bls.w	88ede <_malloc_r+0x4b6>
   88c9a:	f04f 0e05 	mov.w	lr, #5
   88c9e:	6861      	ldr	r1, [r4, #4]
   88ca0:	f1a9 000c 	sub.w	r0, r9, #12
   88ca4:	f020 0007 	bic.w	r0, r0, #7
   88ca8:	f001 0101 	and.w	r1, r1, #1
   88cac:	4301      	orrs	r1, r0
   88cae:	eb04 0c00 	add.w	ip, r4, r0
   88cb2:	280f      	cmp	r0, #15
   88cb4:	6061      	str	r1, [r4, #4]
   88cb6:	e9cc ee01 	strd	lr, lr, [ip, #4]
   88cba:	f200 812c 	bhi.w	88f16 <_malloc_r+0x4ee>
   88cbe:	4a32      	ldr	r2, [pc, #200]	; (88d88 <_malloc_r+0x360>)
   88cc0:	4832      	ldr	r0, [pc, #200]	; (88d8c <_malloc_r+0x364>)
   88cc2:	6811      	ldr	r1, [r2, #0]
   88cc4:	68bc      	ldr	r4, [r7, #8]
   88cc6:	428b      	cmp	r3, r1
   88cc8:	6801      	ldr	r1, [r0, #0]
   88cca:	bf88      	it	hi
   88ccc:	6013      	strhi	r3, [r2, #0]
   88cce:	6862      	ldr	r2, [r4, #4]
   88cd0:	428b      	cmp	r3, r1
   88cd2:	f022 0203 	bic.w	r2, r2, #3
   88cd6:	bf88      	it	hi
   88cd8:	6003      	strhi	r3, [r0, #0]
   88cda:	e099      	b.n	88e10 <_malloc_r+0x3e8>
   88cdc:	f045 0201 	orr.w	r2, r5, #1
   88ce0:	f043 0301 	orr.w	r3, r3, #1
   88ce4:	4425      	add	r5, r4
   88ce6:	6062      	str	r2, [r4, #4]
   88ce8:	4630      	mov	r0, r6
   88cea:	60bd      	str	r5, [r7, #8]
   88cec:	3408      	adds	r4, #8
   88cee:	606b      	str	r3, [r5, #4]
   88cf0:	f000 f9f0 	bl	890d4 <__malloc_unlock>
   88cf4:	4620      	mov	r0, r4
   88cf6:	b003      	add	sp, #12
   88cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88cfc:	4423      	add	r3, r4
   88cfe:	685a      	ldr	r2, [r3, #4]
   88d00:	68e1      	ldr	r1, [r4, #12]
   88d02:	e6af      	b.n	88a64 <_malloc_r+0x3c>
   88d04:	68dc      	ldr	r4, [r3, #12]
   88d06:	42a3      	cmp	r3, r4
   88d08:	bf08      	it	eq
   88d0a:	3002      	addeq	r0, #2
   88d0c:	f43f aee5 	beq.w	88ada <_malloc_r+0xb2>
   88d10:	e6a2      	b.n	88a58 <_malloc_r+0x30>
   88d12:	2b14      	cmp	r3, #20
   88d14:	d970      	bls.n	88df8 <_malloc_r+0x3d0>
   88d16:	2b54      	cmp	r3, #84	; 0x54
   88d18:	f200 80ac 	bhi.w	88e74 <_malloc_r+0x44c>
   88d1c:	0b2b      	lsrs	r3, r5, #12
   88d1e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   88d22:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   88d26:	00c1      	lsls	r1, r0, #3
   88d28:	e6c3      	b.n	88ab2 <_malloc_r+0x8a>
   88d2a:	4423      	add	r3, r4
   88d2c:	685a      	ldr	r2, [r3, #4]
   88d2e:	4630      	mov	r0, r6
   88d30:	f042 0201 	orr.w	r2, r2, #1
   88d34:	605a      	str	r2, [r3, #4]
   88d36:	3408      	adds	r4, #8
   88d38:	f000 f9cc 	bl	890d4 <__malloc_unlock>
   88d3c:	e69c      	b.n	88a78 <_malloc_r+0x50>
   88d3e:	f045 0e01 	orr.w	lr, r5, #1
   88d42:	f042 0101 	orr.w	r1, r2, #1
   88d46:	4425      	add	r5, r4
   88d48:	f8c4 e004 	str.w	lr, [r4, #4]
   88d4c:	4630      	mov	r0, r6
   88d4e:	e9c7 5504 	strd	r5, r5, [r7, #16]
   88d52:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   88d56:	6069      	str	r1, [r5, #4]
   88d58:	50e2      	str	r2, [r4, r3]
   88d5a:	f000 f9bb 	bl	890d4 <__malloc_unlock>
   88d5e:	3408      	adds	r4, #8
   88d60:	e68a      	b.n	88a78 <_malloc_r+0x50>
   88d62:	08e8      	lsrs	r0, r5, #3
   88d64:	f105 0308 	add.w	r3, r5, #8
   88d68:	e66e      	b.n	88a48 <_malloc_r+0x20>
   88d6a:	f108 0801 	add.w	r8, r8, #1
   88d6e:	f018 0f03 	tst.w	r8, #3
   88d72:	f10e 0e08 	add.w	lr, lr, #8
   88d76:	f47f aeeb 	bne.w	88b50 <_malloc_r+0x128>
   88d7a:	e060      	b.n	88e3e <_malloc_r+0x416>
   88d7c:	20000950 	.word	0x20000950
   88d80:	20001314 	.word	0x20001314
   88d84:	200012e4 	.word	0x200012e4
   88d88:	2000130c 	.word	0x2000130c
   88d8c:	20001310 	.word	0x20001310
   88d90:	20000958 	.word	0x20000958
   88d94:	20000d58 	.word	0x20000d58
   88d98:	461c      	mov	r4, r3
   88d9a:	4419      	add	r1, r3
   88d9c:	684a      	ldr	r2, [r1, #4]
   88d9e:	68db      	ldr	r3, [r3, #12]
   88da0:	f854 5f08 	ldr.w	r5, [r4, #8]!
   88da4:	f042 0201 	orr.w	r2, r2, #1
   88da8:	604a      	str	r2, [r1, #4]
   88daa:	4630      	mov	r0, r6
   88dac:	60eb      	str	r3, [r5, #12]
   88dae:	609d      	str	r5, [r3, #8]
   88db0:	f000 f990 	bl	890d4 <__malloc_unlock>
   88db4:	e660      	b.n	88a78 <_malloc_r+0x50>
   88db6:	0a5a      	lsrs	r2, r3, #9
   88db8:	2a04      	cmp	r2, #4
   88dba:	d935      	bls.n	88e28 <_malloc_r+0x400>
   88dbc:	2a14      	cmp	r2, #20
   88dbe:	d86f      	bhi.n	88ea0 <_malloc_r+0x478>
   88dc0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   88dc4:	00c9      	lsls	r1, r1, #3
   88dc6:	325b      	adds	r2, #91	; 0x5b
   88dc8:	eb07 0e01 	add.w	lr, r7, r1
   88dcc:	5879      	ldr	r1, [r7, r1]
   88dce:	f1ae 0e08 	sub.w	lr, lr, #8
   88dd2:	458e      	cmp	lr, r1
   88dd4:	d058      	beq.n	88e88 <_malloc_r+0x460>
   88dd6:	684a      	ldr	r2, [r1, #4]
   88dd8:	f022 0203 	bic.w	r2, r2, #3
   88ddc:	429a      	cmp	r2, r3
   88dde:	d902      	bls.n	88de6 <_malloc_r+0x3be>
   88de0:	6889      	ldr	r1, [r1, #8]
   88de2:	458e      	cmp	lr, r1
   88de4:	d1f7      	bne.n	88dd6 <_malloc_r+0x3ae>
   88de6:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   88dea:	687a      	ldr	r2, [r7, #4]
   88dec:	e9c4 1e02 	strd	r1, lr, [r4, #8]
   88df0:	f8ce 4008 	str.w	r4, [lr, #8]
   88df4:	60cc      	str	r4, [r1, #12]
   88df6:	e699      	b.n	88b2c <_malloc_r+0x104>
   88df8:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   88dfc:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   88e00:	00c1      	lsls	r1, r0, #3
   88e02:	e656      	b.n	88ab2 <_malloc_r+0x8a>
   88e04:	42bc      	cmp	r4, r7
   88e06:	d072      	beq.n	88eee <_malloc_r+0x4c6>
   88e08:	68bc      	ldr	r4, [r7, #8]
   88e0a:	6862      	ldr	r2, [r4, #4]
   88e0c:	f022 0203 	bic.w	r2, r2, #3
   88e10:	4295      	cmp	r5, r2
   88e12:	eba2 0305 	sub.w	r3, r2, r5
   88e16:	d802      	bhi.n	88e1e <_malloc_r+0x3f6>
   88e18:	2b0f      	cmp	r3, #15
   88e1a:	f73f af5f 	bgt.w	88cdc <_malloc_r+0x2b4>
   88e1e:	4630      	mov	r0, r6
   88e20:	f000 f958 	bl	890d4 <__malloc_unlock>
   88e24:	2400      	movs	r4, #0
   88e26:	e627      	b.n	88a78 <_malloc_r+0x50>
   88e28:	099a      	lsrs	r2, r3, #6
   88e2a:	f102 0139 	add.w	r1, r2, #57	; 0x39
   88e2e:	00c9      	lsls	r1, r1, #3
   88e30:	3238      	adds	r2, #56	; 0x38
   88e32:	e7c9      	b.n	88dc8 <_malloc_r+0x3a0>
   88e34:	f8d9 9000 	ldr.w	r9, [r9]
   88e38:	4599      	cmp	r9, r3
   88e3a:	f040 8083 	bne.w	88f44 <_malloc_r+0x51c>
   88e3e:	f010 0f03 	tst.w	r0, #3
   88e42:	f1a9 0308 	sub.w	r3, r9, #8
   88e46:	f100 30ff 	add.w	r0, r0, #4294967295
   88e4a:	d1f3      	bne.n	88e34 <_malloc_r+0x40c>
   88e4c:	687b      	ldr	r3, [r7, #4]
   88e4e:	ea23 0304 	bic.w	r3, r3, r4
   88e52:	607b      	str	r3, [r7, #4]
   88e54:	0064      	lsls	r4, r4, #1
   88e56:	429c      	cmp	r4, r3
   88e58:	f63f aeba 	bhi.w	88bd0 <_malloc_r+0x1a8>
   88e5c:	b91c      	cbnz	r4, 88e66 <_malloc_r+0x43e>
   88e5e:	e6b7      	b.n	88bd0 <_malloc_r+0x1a8>
   88e60:	0064      	lsls	r4, r4, #1
   88e62:	f108 0804 	add.w	r8, r8, #4
   88e66:	421c      	tst	r4, r3
   88e68:	d0fa      	beq.n	88e60 <_malloc_r+0x438>
   88e6a:	4640      	mov	r0, r8
   88e6c:	e66c      	b.n	88b48 <_malloc_r+0x120>
   88e6e:	f108 0810 	add.w	r8, r8, #16
   88e72:	e6ca      	b.n	88c0a <_malloc_r+0x1e2>
   88e74:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   88e78:	d826      	bhi.n	88ec8 <_malloc_r+0x4a0>
   88e7a:	0beb      	lsrs	r3, r5, #15
   88e7c:	f103 0078 	add.w	r0, r3, #120	; 0x78
   88e80:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   88e84:	00c1      	lsls	r1, r0, #3
   88e86:	e614      	b.n	88ab2 <_malloc_r+0x8a>
   88e88:	f04f 0801 	mov.w	r8, #1
   88e8c:	687b      	ldr	r3, [r7, #4]
   88e8e:	1092      	asrs	r2, r2, #2
   88e90:	fa08 f202 	lsl.w	r2, r8, r2
   88e94:	431a      	orrs	r2, r3
   88e96:	607a      	str	r2, [r7, #4]
   88e98:	e7a8      	b.n	88dec <_malloc_r+0x3c4>
   88e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   88e9e:	e6dc      	b.n	88c5a <_malloc_r+0x232>
   88ea0:	2a54      	cmp	r2, #84	; 0x54
   88ea2:	d829      	bhi.n	88ef8 <_malloc_r+0x4d0>
   88ea4:	0b1a      	lsrs	r2, r3, #12
   88ea6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   88eaa:	00c9      	lsls	r1, r1, #3
   88eac:	326e      	adds	r2, #110	; 0x6e
   88eae:	e78b      	b.n	88dc8 <_malloc_r+0x3a0>
   88eb0:	f3c0 010b 	ubfx	r1, r0, #0, #12
   88eb4:	2900      	cmp	r1, #0
   88eb6:	f47f aebc 	bne.w	88c32 <_malloc_r+0x20a>
   88eba:	eb09 0208 	add.w	r2, r9, r8
   88ebe:	68b9      	ldr	r1, [r7, #8]
   88ec0:	f042 0201 	orr.w	r2, r2, #1
   88ec4:	604a      	str	r2, [r1, #4]
   88ec6:	e6fa      	b.n	88cbe <_malloc_r+0x296>
   88ec8:	f240 5254 	movw	r2, #1364	; 0x554
   88ecc:	4293      	cmp	r3, r2
   88ece:	d81c      	bhi.n	88f0a <_malloc_r+0x4e2>
   88ed0:	0cab      	lsrs	r3, r5, #18
   88ed2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   88ed6:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   88eda:	00c1      	lsls	r1, r0, #3
   88edc:	e5e9      	b.n	88ab2 <_malloc_r+0x8a>
   88ede:	2301      	movs	r3, #1
   88ee0:	f8cb 3004 	str.w	r3, [fp, #4]
   88ee4:	e79b      	b.n	88e1e <_malloc_r+0x3f6>
   88ee6:	2101      	movs	r1, #1
   88ee8:	f04f 0800 	mov.w	r8, #0
   88eec:	e6c8      	b.n	88c80 <_malloc_r+0x258>
   88eee:	4a16      	ldr	r2, [pc, #88]	; (88f48 <_malloc_r+0x520>)
   88ef0:	6813      	ldr	r3, [r2, #0]
   88ef2:	4443      	add	r3, r8
   88ef4:	6013      	str	r3, [r2, #0]
   88ef6:	e69c      	b.n	88c32 <_malloc_r+0x20a>
   88ef8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   88efc:	d814      	bhi.n	88f28 <_malloc_r+0x500>
   88efe:	0bda      	lsrs	r2, r3, #15
   88f00:	f102 0178 	add.w	r1, r2, #120	; 0x78
   88f04:	00c9      	lsls	r1, r1, #3
   88f06:	3277      	adds	r2, #119	; 0x77
   88f08:	e75e      	b.n	88dc8 <_malloc_r+0x3a0>
   88f0a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   88f0e:	207f      	movs	r0, #127	; 0x7f
   88f10:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   88f14:	e5cd      	b.n	88ab2 <_malloc_r+0x8a>
   88f16:	f104 0108 	add.w	r1, r4, #8
   88f1a:	4630      	mov	r0, r6
   88f1c:	9201      	str	r2, [sp, #4]
   88f1e:	f7ff fc7d 	bl	8881c <_free_r>
   88f22:	9a01      	ldr	r2, [sp, #4]
   88f24:	6813      	ldr	r3, [r2, #0]
   88f26:	e6ca      	b.n	88cbe <_malloc_r+0x296>
   88f28:	f240 5154 	movw	r1, #1364	; 0x554
   88f2c:	428a      	cmp	r2, r1
   88f2e:	d805      	bhi.n	88f3c <_malloc_r+0x514>
   88f30:	0c9a      	lsrs	r2, r3, #18
   88f32:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   88f36:	00c9      	lsls	r1, r1, #3
   88f38:	327c      	adds	r2, #124	; 0x7c
   88f3a:	e745      	b.n	88dc8 <_malloc_r+0x3a0>
   88f3c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   88f40:	227e      	movs	r2, #126	; 0x7e
   88f42:	e741      	b.n	88dc8 <_malloc_r+0x3a0>
   88f44:	687b      	ldr	r3, [r7, #4]
   88f46:	e785      	b.n	88e54 <_malloc_r+0x42c>
   88f48:	200012e4 	.word	0x200012e4

00088f4c <__ascii_mbtowc>:
   88f4c:	b082      	sub	sp, #8
   88f4e:	b149      	cbz	r1, 88f64 <__ascii_mbtowc+0x18>
   88f50:	b15a      	cbz	r2, 88f6a <__ascii_mbtowc+0x1e>
   88f52:	b16b      	cbz	r3, 88f70 <__ascii_mbtowc+0x24>
   88f54:	7813      	ldrb	r3, [r2, #0]
   88f56:	600b      	str	r3, [r1, #0]
   88f58:	7812      	ldrb	r2, [r2, #0]
   88f5a:	1c10      	adds	r0, r2, #0
   88f5c:	bf18      	it	ne
   88f5e:	2001      	movne	r0, #1
   88f60:	b002      	add	sp, #8
   88f62:	4770      	bx	lr
   88f64:	a901      	add	r1, sp, #4
   88f66:	2a00      	cmp	r2, #0
   88f68:	d1f3      	bne.n	88f52 <__ascii_mbtowc+0x6>
   88f6a:	4610      	mov	r0, r2
   88f6c:	b002      	add	sp, #8
   88f6e:	4770      	bx	lr
   88f70:	f06f 0001 	mvn.w	r0, #1
   88f74:	e7f4      	b.n	88f60 <__ascii_mbtowc+0x14>
   88f76:	bf00      	nop

00088f78 <memchr>:
   88f78:	0783      	lsls	r3, r0, #30
   88f7a:	b470      	push	{r4, r5, r6}
   88f7c:	b2cd      	uxtb	r5, r1
   88f7e:	d03d      	beq.n	88ffc <memchr+0x84>
   88f80:	1e54      	subs	r4, r2, #1
   88f82:	b30a      	cbz	r2, 88fc8 <memchr+0x50>
   88f84:	7803      	ldrb	r3, [r0, #0]
   88f86:	42ab      	cmp	r3, r5
   88f88:	d01f      	beq.n	88fca <memchr+0x52>
   88f8a:	1c43      	adds	r3, r0, #1
   88f8c:	e005      	b.n	88f9a <memchr+0x22>
   88f8e:	f114 34ff 	adds.w	r4, r4, #4294967295
   88f92:	d319      	bcc.n	88fc8 <memchr+0x50>
   88f94:	7802      	ldrb	r2, [r0, #0]
   88f96:	42aa      	cmp	r2, r5
   88f98:	d017      	beq.n	88fca <memchr+0x52>
   88f9a:	f013 0f03 	tst.w	r3, #3
   88f9e:	4618      	mov	r0, r3
   88fa0:	f103 0301 	add.w	r3, r3, #1
   88fa4:	d1f3      	bne.n	88f8e <memchr+0x16>
   88fa6:	2c03      	cmp	r4, #3
   88fa8:	d811      	bhi.n	88fce <memchr+0x56>
   88faa:	b34c      	cbz	r4, 89000 <memchr+0x88>
   88fac:	7803      	ldrb	r3, [r0, #0]
   88fae:	42ab      	cmp	r3, r5
   88fb0:	d00b      	beq.n	88fca <memchr+0x52>
   88fb2:	4404      	add	r4, r0
   88fb4:	1c43      	adds	r3, r0, #1
   88fb6:	e002      	b.n	88fbe <memchr+0x46>
   88fb8:	7802      	ldrb	r2, [r0, #0]
   88fba:	42aa      	cmp	r2, r5
   88fbc:	d005      	beq.n	88fca <memchr+0x52>
   88fbe:	429c      	cmp	r4, r3
   88fc0:	4618      	mov	r0, r3
   88fc2:	f103 0301 	add.w	r3, r3, #1
   88fc6:	d1f7      	bne.n	88fb8 <memchr+0x40>
   88fc8:	2000      	movs	r0, #0
   88fca:	bc70      	pop	{r4, r5, r6}
   88fcc:	4770      	bx	lr
   88fce:	4606      	mov	r6, r0
   88fd0:	020a      	lsls	r2, r1, #8
   88fd2:	b292      	uxth	r2, r2
   88fd4:	432a      	orrs	r2, r5
   88fd6:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   88fda:	6833      	ldr	r3, [r6, #0]
   88fdc:	4630      	mov	r0, r6
   88fde:	4053      	eors	r3, r2
   88fe0:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   88fe4:	ea21 0303 	bic.w	r3, r1, r3
   88fe8:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   88fec:	f106 0604 	add.w	r6, r6, #4
   88ff0:	d1dc      	bne.n	88fac <memchr+0x34>
   88ff2:	3c04      	subs	r4, #4
   88ff4:	2c03      	cmp	r4, #3
   88ff6:	4630      	mov	r0, r6
   88ff8:	d8ef      	bhi.n	88fda <memchr+0x62>
   88ffa:	e7d6      	b.n	88faa <memchr+0x32>
   88ffc:	4614      	mov	r4, r2
   88ffe:	e7d2      	b.n	88fa6 <memchr+0x2e>
   89000:	4620      	mov	r0, r4
   89002:	e7e2      	b.n	88fca <memchr+0x52>

00089004 <memmove>:
   89004:	4288      	cmp	r0, r1
   89006:	b4f0      	push	{r4, r5, r6, r7}
   89008:	d90d      	bls.n	89026 <memmove+0x22>
   8900a:	188b      	adds	r3, r1, r2
   8900c:	4283      	cmp	r3, r0
   8900e:	d90a      	bls.n	89026 <memmove+0x22>
   89010:	1884      	adds	r4, r0, r2
   89012:	b132      	cbz	r2, 89022 <memmove+0x1e>
   89014:	4622      	mov	r2, r4
   89016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8901a:	4299      	cmp	r1, r3
   8901c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   89020:	d1f9      	bne.n	89016 <memmove+0x12>
   89022:	bcf0      	pop	{r4, r5, r6, r7}
   89024:	4770      	bx	lr
   89026:	2a0f      	cmp	r2, #15
   89028:	d948      	bls.n	890bc <memmove+0xb8>
   8902a:	ea40 0301 	orr.w	r3, r0, r1
   8902e:	079b      	lsls	r3, r3, #30
   89030:	d146      	bne.n	890c0 <memmove+0xbc>
   89032:	f1a2 0310 	sub.w	r3, r2, #16
   89036:	091b      	lsrs	r3, r3, #4
   89038:	f101 0720 	add.w	r7, r1, #32
   8903c:	eb07 1703 	add.w	r7, r7, r3, lsl #4
   89040:	f101 0410 	add.w	r4, r1, #16
   89044:	f100 0510 	add.w	r5, r0, #16
   89048:	f854 6c10 	ldr.w	r6, [r4, #-16]
   8904c:	3410      	adds	r4, #16
   8904e:	f845 6c10 	str.w	r6, [r5, #-16]
   89052:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   89056:	3510      	adds	r5, #16
   89058:	f845 6c1c 	str.w	r6, [r5, #-28]
   8905c:	f854 6c18 	ldr.w	r6, [r4, #-24]
   89060:	f845 6c18 	str.w	r6, [r5, #-24]
   89064:	f854 6c14 	ldr.w	r6, [r4, #-20]
   89068:	42bc      	cmp	r4, r7
   8906a:	f845 6c14 	str.w	r6, [r5, #-20]
   8906e:	d1eb      	bne.n	89048 <memmove+0x44>
   89070:	3301      	adds	r3, #1
   89072:	f002 050f 	and.w	r5, r2, #15
   89076:	011b      	lsls	r3, r3, #4
   89078:	2d03      	cmp	r5, #3
   8907a:	4419      	add	r1, r3
   8907c:	4403      	add	r3, r0
   8907e:	d921      	bls.n	890c4 <memmove+0xc0>
   89080:	460f      	mov	r7, r1
   89082:	462c      	mov	r4, r5
   89084:	1f1e      	subs	r6, r3, #4
   89086:	f857 cb04 	ldr.w	ip, [r7], #4
   8908a:	3c04      	subs	r4, #4
   8908c:	2c03      	cmp	r4, #3
   8908e:	f846 cf04 	str.w	ip, [r6, #4]!
   89092:	d8f8      	bhi.n	89086 <memmove+0x82>
   89094:	1f2c      	subs	r4, r5, #4
   89096:	f024 0403 	bic.w	r4, r4, #3
   8909a:	3404      	adds	r4, #4
   8909c:	4423      	add	r3, r4
   8909e:	4421      	add	r1, r4
   890a0:	f002 0203 	and.w	r2, r2, #3
   890a4:	2a00      	cmp	r2, #0
   890a6:	d0bc      	beq.n	89022 <memmove+0x1e>
   890a8:	3b01      	subs	r3, #1
   890aa:	440a      	add	r2, r1
   890ac:	f811 4b01 	ldrb.w	r4, [r1], #1
   890b0:	4291      	cmp	r1, r2
   890b2:	f803 4f01 	strb.w	r4, [r3, #1]!
   890b6:	d1f9      	bne.n	890ac <memmove+0xa8>
   890b8:	bcf0      	pop	{r4, r5, r6, r7}
   890ba:	4770      	bx	lr
   890bc:	4603      	mov	r3, r0
   890be:	e7f1      	b.n	890a4 <memmove+0xa0>
   890c0:	4603      	mov	r3, r0
   890c2:	e7f1      	b.n	890a8 <memmove+0xa4>
   890c4:	462a      	mov	r2, r5
   890c6:	e7ed      	b.n	890a4 <memmove+0xa0>

000890c8 <__malloc_lock>:
   890c8:	4801      	ldr	r0, [pc, #4]	; (890d0 <__malloc_lock+0x8>)
   890ca:	f7ff bca9 	b.w	88a20 <__retarget_lock_acquire_recursive>
   890ce:	bf00      	nop
   890d0:	20001348 	.word	0x20001348

000890d4 <__malloc_unlock>:
   890d4:	4801      	ldr	r0, [pc, #4]	; (890dc <__malloc_unlock+0x8>)
   890d6:	f7ff bca5 	b.w	88a24 <__retarget_lock_release_recursive>
   890da:	bf00      	nop
   890dc:	20001348 	.word	0x20001348

000890e0 <_Balloc>:
   890e0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   890e2:	b570      	push	{r4, r5, r6, lr}
   890e4:	4605      	mov	r5, r0
   890e6:	460c      	mov	r4, r1
   890e8:	b14b      	cbz	r3, 890fe <_Balloc+0x1e>
   890ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   890ee:	b180      	cbz	r0, 89112 <_Balloc+0x32>
   890f0:	6802      	ldr	r2, [r0, #0]
   890f2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   890f6:	2300      	movs	r3, #0
   890f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   890fc:	bd70      	pop	{r4, r5, r6, pc}
   890fe:	2221      	movs	r2, #33	; 0x21
   89100:	2104      	movs	r1, #4
   89102:	f000 fe41 	bl	89d88 <_calloc_r>
   89106:	4603      	mov	r3, r0
   89108:	64e8      	str	r0, [r5, #76]	; 0x4c
   8910a:	2800      	cmp	r0, #0
   8910c:	d1ed      	bne.n	890ea <_Balloc+0xa>
   8910e:	2000      	movs	r0, #0
   89110:	bd70      	pop	{r4, r5, r6, pc}
   89112:	2101      	movs	r1, #1
   89114:	fa01 f604 	lsl.w	r6, r1, r4
   89118:	1d72      	adds	r2, r6, #5
   8911a:	4628      	mov	r0, r5
   8911c:	0092      	lsls	r2, r2, #2
   8911e:	f000 fe33 	bl	89d88 <_calloc_r>
   89122:	2800      	cmp	r0, #0
   89124:	d0f3      	beq.n	8910e <_Balloc+0x2e>
   89126:	e9c0 4601 	strd	r4, r6, [r0, #4]
   8912a:	e7e4      	b.n	890f6 <_Balloc+0x16>

0008912c <_Bfree>:
   8912c:	b131      	cbz	r1, 8913c <_Bfree+0x10>
   8912e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   89130:	684a      	ldr	r2, [r1, #4]
   89132:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   89136:	6008      	str	r0, [r1, #0]
   89138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8913c:	4770      	bx	lr
   8913e:	bf00      	nop

00089140 <__multadd>:
   89140:	b5f0      	push	{r4, r5, r6, r7, lr}
   89142:	f04f 0c00 	mov.w	ip, #0
   89146:	460c      	mov	r4, r1
   89148:	4605      	mov	r5, r0
   8914a:	690e      	ldr	r6, [r1, #16]
   8914c:	b083      	sub	sp, #12
   8914e:	f101 0714 	add.w	r7, r1, #20
   89152:	6838      	ldr	r0, [r7, #0]
   89154:	f10c 0c01 	add.w	ip, ip, #1
   89158:	b281      	uxth	r1, r0
   8915a:	fb02 3301 	mla	r3, r2, r1, r3
   8915e:	0c01      	lsrs	r1, r0, #16
   89160:	0c18      	lsrs	r0, r3, #16
   89162:	fb02 0101 	mla	r1, r2, r1, r0
   89166:	b29b      	uxth	r3, r3
   89168:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   8916c:	4566      	cmp	r6, ip
   8916e:	f847 3b04 	str.w	r3, [r7], #4
   89172:	ea4f 4311 	mov.w	r3, r1, lsr #16
   89176:	dcec      	bgt.n	89152 <__multadd+0x12>
   89178:	b13b      	cbz	r3, 8918a <__multadd+0x4a>
   8917a:	68a2      	ldr	r2, [r4, #8]
   8917c:	42b2      	cmp	r2, r6
   8917e:	dd07      	ble.n	89190 <__multadd+0x50>
   89180:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   89184:	3601      	adds	r6, #1
   89186:	6153      	str	r3, [r2, #20]
   89188:	6126      	str	r6, [r4, #16]
   8918a:	4620      	mov	r0, r4
   8918c:	b003      	add	sp, #12
   8918e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   89190:	6861      	ldr	r1, [r4, #4]
   89192:	4628      	mov	r0, r5
   89194:	3101      	adds	r1, #1
   89196:	9301      	str	r3, [sp, #4]
   89198:	f7ff ffa2 	bl	890e0 <_Balloc>
   8919c:	4607      	mov	r7, r0
   8919e:	6922      	ldr	r2, [r4, #16]
   891a0:	f104 010c 	add.w	r1, r4, #12
   891a4:	3202      	adds	r2, #2
   891a6:	0092      	lsls	r2, r2, #2
   891a8:	300c      	adds	r0, #12
   891aa:	f7fc fd2d 	bl	85c08 <memcpy>
   891ae:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   891b0:	6861      	ldr	r1, [r4, #4]
   891b2:	9b01      	ldr	r3, [sp, #4]
   891b4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   891b8:	6020      	str	r0, [r4, #0]
   891ba:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   891be:	463c      	mov	r4, r7
   891c0:	e7de      	b.n	89180 <__multadd+0x40>
   891c2:	bf00      	nop

000891c4 <__hi0bits>:
   891c4:	0c02      	lsrs	r2, r0, #16
   891c6:	0412      	lsls	r2, r2, #16
   891c8:	4603      	mov	r3, r0
   891ca:	b9c2      	cbnz	r2, 891fe <__hi0bits+0x3a>
   891cc:	0403      	lsls	r3, r0, #16
   891ce:	2010      	movs	r0, #16
   891d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   891d4:	bf04      	itt	eq
   891d6:	021b      	lsleq	r3, r3, #8
   891d8:	3008      	addeq	r0, #8
   891da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   891de:	bf04      	itt	eq
   891e0:	011b      	lsleq	r3, r3, #4
   891e2:	3004      	addeq	r0, #4
   891e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   891e8:	bf04      	itt	eq
   891ea:	009b      	lsleq	r3, r3, #2
   891ec:	3002      	addeq	r0, #2
   891ee:	2b00      	cmp	r3, #0
   891f0:	db04      	blt.n	891fc <__hi0bits+0x38>
   891f2:	005b      	lsls	r3, r3, #1
   891f4:	d501      	bpl.n	891fa <__hi0bits+0x36>
   891f6:	3001      	adds	r0, #1
   891f8:	4770      	bx	lr
   891fa:	2020      	movs	r0, #32
   891fc:	4770      	bx	lr
   891fe:	2000      	movs	r0, #0
   89200:	e7e6      	b.n	891d0 <__hi0bits+0xc>
   89202:	bf00      	nop

00089204 <__lo0bits>:
   89204:	6803      	ldr	r3, [r0, #0]
   89206:	4601      	mov	r1, r0
   89208:	f013 0207 	ands.w	r2, r3, #7
   8920c:	d007      	beq.n	8921e <__lo0bits+0x1a>
   8920e:	07da      	lsls	r2, r3, #31
   89210:	d41f      	bmi.n	89252 <__lo0bits+0x4e>
   89212:	0798      	lsls	r0, r3, #30
   89214:	d51f      	bpl.n	89256 <__lo0bits+0x52>
   89216:	085b      	lsrs	r3, r3, #1
   89218:	600b      	str	r3, [r1, #0]
   8921a:	2001      	movs	r0, #1
   8921c:	4770      	bx	lr
   8921e:	b298      	uxth	r0, r3
   89220:	b1a0      	cbz	r0, 8924c <__lo0bits+0x48>
   89222:	4610      	mov	r0, r2
   89224:	f013 0fff 	tst.w	r3, #255	; 0xff
   89228:	bf04      	itt	eq
   8922a:	0a1b      	lsreq	r3, r3, #8
   8922c:	3008      	addeq	r0, #8
   8922e:	071a      	lsls	r2, r3, #28
   89230:	bf04      	itt	eq
   89232:	091b      	lsreq	r3, r3, #4
   89234:	3004      	addeq	r0, #4
   89236:	079a      	lsls	r2, r3, #30
   89238:	bf04      	itt	eq
   8923a:	089b      	lsreq	r3, r3, #2
   8923c:	3002      	addeq	r0, #2
   8923e:	07da      	lsls	r2, r3, #31
   89240:	d402      	bmi.n	89248 <__lo0bits+0x44>
   89242:	085b      	lsrs	r3, r3, #1
   89244:	d00b      	beq.n	8925e <__lo0bits+0x5a>
   89246:	3001      	adds	r0, #1
   89248:	600b      	str	r3, [r1, #0]
   8924a:	4770      	bx	lr
   8924c:	0c1b      	lsrs	r3, r3, #16
   8924e:	2010      	movs	r0, #16
   89250:	e7e8      	b.n	89224 <__lo0bits+0x20>
   89252:	2000      	movs	r0, #0
   89254:	4770      	bx	lr
   89256:	089b      	lsrs	r3, r3, #2
   89258:	600b      	str	r3, [r1, #0]
   8925a:	2002      	movs	r0, #2
   8925c:	4770      	bx	lr
   8925e:	2020      	movs	r0, #32
   89260:	4770      	bx	lr
   89262:	bf00      	nop

00089264 <__i2b>:
   89264:	b510      	push	{r4, lr}
   89266:	460c      	mov	r4, r1
   89268:	2101      	movs	r1, #1
   8926a:	f7ff ff39 	bl	890e0 <_Balloc>
   8926e:	2201      	movs	r2, #1
   89270:	e9c0 2404 	strd	r2, r4, [r0, #16]
   89274:	bd10      	pop	{r4, pc}
   89276:	bf00      	nop

00089278 <__multiply>:
   89278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8927c:	690d      	ldr	r5, [r1, #16]
   8927e:	6914      	ldr	r4, [r2, #16]
   89280:	b085      	sub	sp, #20
   89282:	42a5      	cmp	r5, r4
   89284:	460e      	mov	r6, r1
   89286:	4691      	mov	r9, r2
   89288:	da04      	bge.n	89294 <__multiply+0x1c>
   8928a:	462a      	mov	r2, r5
   8928c:	464e      	mov	r6, r9
   8928e:	4625      	mov	r5, r4
   89290:	4689      	mov	r9, r1
   89292:	4614      	mov	r4, r2
   89294:	68b3      	ldr	r3, [r6, #8]
   89296:	eb05 0804 	add.w	r8, r5, r4
   8929a:	6871      	ldr	r1, [r6, #4]
   8929c:	4543      	cmp	r3, r8
   8929e:	bfb8      	it	lt
   892a0:	3101      	addlt	r1, #1
   892a2:	f7ff ff1d 	bl	890e0 <_Balloc>
   892a6:	f100 0b14 	add.w	fp, r0, #20
   892aa:	eb0b 0a88 	add.w	sl, fp, r8, lsl #2
   892ae:	45d3      	cmp	fp, sl
   892b0:	9001      	str	r0, [sp, #4]
   892b2:	d205      	bcs.n	892c0 <__multiply+0x48>
   892b4:	465b      	mov	r3, fp
   892b6:	2200      	movs	r2, #0
   892b8:	f843 2b04 	str.w	r2, [r3], #4
   892bc:	459a      	cmp	sl, r3
   892be:	d8fb      	bhi.n	892b8 <__multiply+0x40>
   892c0:	f109 0314 	add.w	r3, r9, #20
   892c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   892c8:	f106 0214 	add.w	r2, r6, #20
   892cc:	42a3      	cmp	r3, r4
   892ce:	eb02 0e85 	add.w	lr, r2, r5, lsl #2
   892d2:	d262      	bcs.n	8939a <__multiply+0x122>
   892d4:	eba4 0409 	sub.w	r4, r4, r9
   892d8:	3c15      	subs	r4, #21
   892da:	f024 0403 	bic.w	r4, r4, #3
   892de:	4423      	add	r3, r4
   892e0:	e9cd a802 	strd	sl, r8, [sp, #8]
   892e4:	f109 0910 	add.w	r9, r9, #16
   892e8:	4690      	mov	r8, r2
   892ea:	469a      	mov	sl, r3
   892ec:	e005      	b.n	892fa <__multiply+0x82>
   892ee:	0c09      	lsrs	r1, r1, #16
   892f0:	d12c      	bne.n	8934c <__multiply+0xd4>
   892f2:	45ca      	cmp	sl, r9
   892f4:	f10b 0b04 	add.w	fp, fp, #4
   892f8:	d04d      	beq.n	89396 <__multiply+0x11e>
   892fa:	f859 1f04 	ldr.w	r1, [r9, #4]!
   892fe:	fa1f fc81 	uxth.w	ip, r1
   89302:	f1bc 0f00 	cmp.w	ip, #0
   89306:	d0f2      	beq.n	892ee <__multiply+0x76>
   89308:	4647      	mov	r7, r8
   8930a:	465e      	mov	r6, fp
   8930c:	2100      	movs	r1, #0
   8930e:	e000      	b.n	89312 <__multiply+0x9a>
   89310:	4606      	mov	r6, r0
   89312:	4630      	mov	r0, r6
   89314:	f857 2b04 	ldr.w	r2, [r7], #4
   89318:	6834      	ldr	r4, [r6, #0]
   8931a:	b293      	uxth	r3, r2
   8931c:	b2a5      	uxth	r5, r4
   8931e:	0c12      	lsrs	r2, r2, #16
   89320:	fb0c 5303 	mla	r3, ip, r3, r5
   89324:	0c24      	lsrs	r4, r4, #16
   89326:	fb0c 4202 	mla	r2, ip, r2, r4
   8932a:	440b      	add	r3, r1
   8932c:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   89330:	b29b      	uxth	r3, r3
   89332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   89336:	45be      	cmp	lr, r7
   89338:	ea4f 4111 	mov.w	r1, r1, lsr #16
   8933c:	f840 3b04 	str.w	r3, [r0], #4
   89340:	d8e6      	bhi.n	89310 <__multiply+0x98>
   89342:	6071      	str	r1, [r6, #4]
   89344:	f8d9 1000 	ldr.w	r1, [r9]
   89348:	0c09      	lsrs	r1, r1, #16
   8934a:	d0d2      	beq.n	892f2 <__multiply+0x7a>
   8934c:	f8db 3000 	ldr.w	r3, [fp]
   89350:	4640      	mov	r0, r8
   89352:	461e      	mov	r6, r3
   89354:	465d      	mov	r5, fp
   89356:	2200      	movs	r2, #0
   89358:	e000      	b.n	8935c <__multiply+0xe4>
   8935a:	4625      	mov	r5, r4
   8935c:	462c      	mov	r4, r5
   8935e:	8807      	ldrh	r7, [r0, #0]
   89360:	0c36      	lsrs	r6, r6, #16
   89362:	fb01 6607 	mla	r6, r1, r7, r6
   89366:	b29b      	uxth	r3, r3
   89368:	4432      	add	r2, r6
   8936a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8936e:	f844 3b04 	str.w	r3, [r4], #4
   89372:	f850 3b04 	ldr.w	r3, [r0], #4
   89376:	686e      	ldr	r6, [r5, #4]
   89378:	0c1b      	lsrs	r3, r3, #16
   8937a:	b2b7      	uxth	r7, r6
   8937c:	fb01 7303 	mla	r3, r1, r3, r7
   89380:	4586      	cmp	lr, r0
   89382:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   89386:	ea4f 4213 	mov.w	r2, r3, lsr #16
   8938a:	d8e6      	bhi.n	8935a <__multiply+0xe2>
   8938c:	45ca      	cmp	sl, r9
   8938e:	606b      	str	r3, [r5, #4]
   89390:	f10b 0b04 	add.w	fp, fp, #4
   89394:	d1b1      	bne.n	892fa <__multiply+0x82>
   89396:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   8939a:	f1b8 0f00 	cmp.w	r8, #0
   8939e:	dd0b      	ble.n	893b8 <__multiply+0x140>
   893a0:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   893a4:	f1aa 0a04 	sub.w	sl, sl, #4
   893a8:	b11b      	cbz	r3, 893b2 <__multiply+0x13a>
   893aa:	e005      	b.n	893b8 <__multiply+0x140>
   893ac:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   893b0:	b913      	cbnz	r3, 893b8 <__multiply+0x140>
   893b2:	f1b8 0801 	subs.w	r8, r8, #1
   893b6:	d1f9      	bne.n	893ac <__multiply+0x134>
   893b8:	9801      	ldr	r0, [sp, #4]
   893ba:	f8c0 8010 	str.w	r8, [r0, #16]
   893be:	b005      	add	sp, #20
   893c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000893c4 <__pow5mult>:
   893c4:	f012 0303 	ands.w	r3, r2, #3
   893c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   893cc:	4614      	mov	r4, r2
   893ce:	4607      	mov	r7, r0
   893d0:	d12e      	bne.n	89430 <__pow5mult+0x6c>
   893d2:	460d      	mov	r5, r1
   893d4:	10a4      	asrs	r4, r4, #2
   893d6:	d01c      	beq.n	89412 <__pow5mult+0x4e>
   893d8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   893da:	b396      	cbz	r6, 89442 <__pow5mult+0x7e>
   893dc:	07e3      	lsls	r3, r4, #31
   893de:	f04f 0800 	mov.w	r8, #0
   893e2:	d406      	bmi.n	893f2 <__pow5mult+0x2e>
   893e4:	1064      	asrs	r4, r4, #1
   893e6:	d014      	beq.n	89412 <__pow5mult+0x4e>
   893e8:	6830      	ldr	r0, [r6, #0]
   893ea:	b1a8      	cbz	r0, 89418 <__pow5mult+0x54>
   893ec:	4606      	mov	r6, r0
   893ee:	07e3      	lsls	r3, r4, #31
   893f0:	d5f8      	bpl.n	893e4 <__pow5mult+0x20>
   893f2:	4632      	mov	r2, r6
   893f4:	4629      	mov	r1, r5
   893f6:	4638      	mov	r0, r7
   893f8:	f7ff ff3e 	bl	89278 <__multiply>
   893fc:	b1b5      	cbz	r5, 8942c <__pow5mult+0x68>
   893fe:	686a      	ldr	r2, [r5, #4]
   89400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   89402:	1064      	asrs	r4, r4, #1
   89404:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   89408:	6029      	str	r1, [r5, #0]
   8940a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8940e:	4605      	mov	r5, r0
   89410:	d1ea      	bne.n	893e8 <__pow5mult+0x24>
   89412:	4628      	mov	r0, r5
   89414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89418:	4632      	mov	r2, r6
   8941a:	4631      	mov	r1, r6
   8941c:	4638      	mov	r0, r7
   8941e:	f7ff ff2b 	bl	89278 <__multiply>
   89422:	6030      	str	r0, [r6, #0]
   89424:	f8c0 8000 	str.w	r8, [r0]
   89428:	4606      	mov	r6, r0
   8942a:	e7e0      	b.n	893ee <__pow5mult+0x2a>
   8942c:	4605      	mov	r5, r0
   8942e:	e7d9      	b.n	893e4 <__pow5mult+0x20>
   89430:	4a0b      	ldr	r2, [pc, #44]	; (89460 <__pow5mult+0x9c>)
   89432:	3b01      	subs	r3, #1
   89434:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   89438:	2300      	movs	r3, #0
   8943a:	f7ff fe81 	bl	89140 <__multadd>
   8943e:	4605      	mov	r5, r0
   89440:	e7c8      	b.n	893d4 <__pow5mult+0x10>
   89442:	2101      	movs	r1, #1
   89444:	4638      	mov	r0, r7
   89446:	f7ff fe4b 	bl	890e0 <_Balloc>
   8944a:	f240 2171 	movw	r1, #625	; 0x271
   8944e:	2201      	movs	r2, #1
   89450:	2300      	movs	r3, #0
   89452:	e9c0 2104 	strd	r2, r1, [r0, #16]
   89456:	4606      	mov	r6, r0
   89458:	64b8      	str	r0, [r7, #72]	; 0x48
   8945a:	6003      	str	r3, [r0, #0]
   8945c:	e7be      	b.n	893dc <__pow5mult+0x18>
   8945e:	bf00      	nop
   89460:	0008abd8 	.word	0x0008abd8

00089464 <__lshift>:
   89464:	690b      	ldr	r3, [r1, #16]
   89466:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8946a:	1154      	asrs	r4, r2, #5
   8946c:	eb04 0803 	add.w	r8, r4, r3
   89470:	688b      	ldr	r3, [r1, #8]
   89472:	f108 0501 	add.w	r5, r8, #1
   89476:	429d      	cmp	r5, r3
   89478:	460e      	mov	r6, r1
   8947a:	4691      	mov	r9, r2
   8947c:	4607      	mov	r7, r0
   8947e:	6849      	ldr	r1, [r1, #4]
   89480:	dd04      	ble.n	8948c <__lshift+0x28>
   89482:	005b      	lsls	r3, r3, #1
   89484:	429d      	cmp	r5, r3
   89486:	f101 0101 	add.w	r1, r1, #1
   8948a:	dcfa      	bgt.n	89482 <__lshift+0x1e>
   8948c:	4638      	mov	r0, r7
   8948e:	f7ff fe27 	bl	890e0 <_Balloc>
   89492:	2c00      	cmp	r4, #0
   89494:	f100 0314 	add.w	r3, r0, #20
   89498:	dd3c      	ble.n	89514 <__lshift+0xb0>
   8949a:	2200      	movs	r2, #0
   8949c:	eb03 0184 	add.w	r1, r3, r4, lsl #2
   894a0:	f843 2b04 	str.w	r2, [r3], #4
   894a4:	428b      	cmp	r3, r1
   894a6:	d1fb      	bne.n	894a0 <__lshift+0x3c>
   894a8:	6934      	ldr	r4, [r6, #16]
   894aa:	f106 0314 	add.w	r3, r6, #20
   894ae:	f019 091f 	ands.w	r9, r9, #31
   894b2:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
   894b6:	d025      	beq.n	89504 <__lshift+0xa0>
   894b8:	f1c9 0220 	rsb	r2, r9, #32
   894bc:	f04f 0a00 	mov.w	sl, #0
   894c0:	e000      	b.n	894c4 <__lshift+0x60>
   894c2:	4671      	mov	r1, lr
   894c4:	468e      	mov	lr, r1
   894c6:	681c      	ldr	r4, [r3, #0]
   894c8:	fa04 f409 	lsl.w	r4, r4, r9
   894cc:	ea44 040a 	orr.w	r4, r4, sl
   894d0:	f84e 4b04 	str.w	r4, [lr], #4
   894d4:	f853 4b04 	ldr.w	r4, [r3], #4
   894d8:	4563      	cmp	r3, ip
   894da:	fa24 fa02 	lsr.w	sl, r4, r2
   894de:	d3f0      	bcc.n	894c2 <__lshift+0x5e>
   894e0:	f8c1 a004 	str.w	sl, [r1, #4]
   894e4:	f1ba 0f00 	cmp.w	sl, #0
   894e8:	d001      	beq.n	894ee <__lshift+0x8a>
   894ea:	f108 0502 	add.w	r5, r8, #2
   894ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   894f0:	6872      	ldr	r2, [r6, #4]
   894f2:	3d01      	subs	r5, #1
   894f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   894f8:	6105      	str	r5, [r0, #16]
   894fa:	6031      	str	r1, [r6, #0]
   894fc:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   89500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89504:	3904      	subs	r1, #4
   89506:	f853 2b04 	ldr.w	r2, [r3], #4
   8950a:	459c      	cmp	ip, r3
   8950c:	f841 2f04 	str.w	r2, [r1, #4]!
   89510:	d8f9      	bhi.n	89506 <__lshift+0xa2>
   89512:	e7ec      	b.n	894ee <__lshift+0x8a>
   89514:	4619      	mov	r1, r3
   89516:	e7c7      	b.n	894a8 <__lshift+0x44>

00089518 <__mcmp>:
   89518:	b430      	push	{r4, r5}
   8951a:	690b      	ldr	r3, [r1, #16]
   8951c:	4605      	mov	r5, r0
   8951e:	6900      	ldr	r0, [r0, #16]
   89520:	1ac0      	subs	r0, r0, r3
   89522:	d10f      	bne.n	89544 <__mcmp+0x2c>
   89524:	009b      	lsls	r3, r3, #2
   89526:	3514      	adds	r5, #20
   89528:	3114      	adds	r1, #20
   8952a:	4419      	add	r1, r3
   8952c:	442b      	add	r3, r5
   8952e:	e001      	b.n	89534 <__mcmp+0x1c>
   89530:	429d      	cmp	r5, r3
   89532:	d207      	bcs.n	89544 <__mcmp+0x2c>
   89534:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   89538:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8953c:	4294      	cmp	r4, r2
   8953e:	d0f7      	beq.n	89530 <__mcmp+0x18>
   89540:	d302      	bcc.n	89548 <__mcmp+0x30>
   89542:	2001      	movs	r0, #1
   89544:	bc30      	pop	{r4, r5}
   89546:	4770      	bx	lr
   89548:	f04f 30ff 	mov.w	r0, #4294967295
   8954c:	e7fa      	b.n	89544 <__mcmp+0x2c>
   8954e:	bf00      	nop

00089550 <__mdiff>:
   89550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89554:	690c      	ldr	r4, [r1, #16]
   89556:	6913      	ldr	r3, [r2, #16]
   89558:	4689      	mov	r9, r1
   8955a:	1ae4      	subs	r4, r4, r3
   8955c:	2c00      	cmp	r4, #0
   8955e:	4692      	mov	sl, r2
   89560:	f101 0714 	add.w	r7, r1, #20
   89564:	f102 0b14 	add.w	fp, r2, #20
   89568:	d114      	bne.n	89594 <__mdiff+0x44>
   8956a:	009b      	lsls	r3, r3, #2
   8956c:	18fa      	adds	r2, r7, r3
   8956e:	445b      	add	r3, fp
   89570:	e001      	b.n	89576 <__mdiff+0x26>
   89572:	42ba      	cmp	r2, r7
   89574:	d962      	bls.n	8963c <__mdiff+0xec>
   89576:	f852 5d04 	ldr.w	r5, [r2, #-4]!
   8957a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   8957e:	428d      	cmp	r5, r1
   89580:	d0f7      	beq.n	89572 <__mdiff+0x22>
   89582:	d209      	bcs.n	89598 <__mdiff+0x48>
   89584:	463a      	mov	r2, r7
   89586:	464b      	mov	r3, r9
   89588:	465f      	mov	r7, fp
   8958a:	46d1      	mov	r9, sl
   8958c:	4693      	mov	fp, r2
   8958e:	469a      	mov	sl, r3
   89590:	2401      	movs	r4, #1
   89592:	e001      	b.n	89598 <__mdiff+0x48>
   89594:	dbf6      	blt.n	89584 <__mdiff+0x34>
   89596:	2400      	movs	r4, #0
   89598:	f8d9 1004 	ldr.w	r1, [r9, #4]
   8959c:	f7ff fda0 	bl	890e0 <_Balloc>
   895a0:	465e      	mov	r6, fp
   895a2:	f04f 0800 	mov.w	r8, #0
   895a6:	f8d9 c010 	ldr.w	ip, [r9, #16]
   895aa:	f8da 3010 	ldr.w	r3, [sl, #16]
   895ae:	463d      	mov	r5, r7
   895b0:	60c4      	str	r4, [r0, #12]
   895b2:	eb0b 0e83 	add.w	lr, fp, r3, lsl #2
   895b6:	eb07 078c 	add.w	r7, r7, ip, lsl #2
   895ba:	f100 0414 	add.w	r4, r0, #20
   895be:	f855 9b04 	ldr.w	r9, [r5], #4
   895c2:	f856 2b04 	ldr.w	r2, [r6], #4
   895c6:	fa1f f389 	uxth.w	r3, r9
   895ca:	4443      	add	r3, r8
   895cc:	fa1f f882 	uxth.w	r8, r2
   895d0:	0c12      	lsrs	r2, r2, #16
   895d2:	eba3 0308 	sub.w	r3, r3, r8
   895d6:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   895da:	eb02 4223 	add.w	r2, r2, r3, asr #16
   895de:	b29b      	uxth	r3, r3
   895e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   895e4:	45b6      	cmp	lr, r6
   895e6:	f844 3b04 	str.w	r3, [r4], #4
   895ea:	ea4f 4822 	mov.w	r8, r2, asr #16
   895ee:	d8e6      	bhi.n	895be <__mdiff+0x6e>
   895f0:	42af      	cmp	r7, r5
   895f2:	d917      	bls.n	89624 <__mdiff+0xd4>
   895f4:	46a6      	mov	lr, r4
   895f6:	462e      	mov	r6, r5
   895f8:	f856 3b04 	ldr.w	r3, [r6], #4
   895fc:	b299      	uxth	r1, r3
   895fe:	4441      	add	r1, r8
   89600:	140a      	asrs	r2, r1, #16
   89602:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   89606:	b289      	uxth	r1, r1
   89608:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   8960c:	42b7      	cmp	r7, r6
   8960e:	f84e 3b04 	str.w	r3, [lr], #4
   89612:	ea4f 4822 	mov.w	r8, r2, asr #16
   89616:	d8ef      	bhi.n	895f8 <__mdiff+0xa8>
   89618:	43ed      	mvns	r5, r5
   8961a:	442f      	add	r7, r5
   8961c:	f027 0703 	bic.w	r7, r7, #3
   89620:	3704      	adds	r7, #4
   89622:	443c      	add	r4, r7
   89624:	3c04      	subs	r4, #4
   89626:	b92b      	cbnz	r3, 89634 <__mdiff+0xe4>
   89628:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8962c:	f10c 3cff 	add.w	ip, ip, #4294967295
   89630:	2b00      	cmp	r3, #0
   89632:	d0f9      	beq.n	89628 <__mdiff+0xd8>
   89634:	f8c0 c010 	str.w	ip, [r0, #16]
   89638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8963c:	2100      	movs	r1, #0
   8963e:	f7ff fd4f 	bl	890e0 <_Balloc>
   89642:	2201      	movs	r2, #1
   89644:	2300      	movs	r3, #0
   89646:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8964a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8964e:	bf00      	nop

00089650 <__d2b>:
   89650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89654:	461c      	mov	r4, r3
   89656:	b082      	sub	sp, #8
   89658:	2101      	movs	r1, #1
   8965a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   8965e:	4690      	mov	r8, r2
   89660:	f7ff fd3e 	bl	890e0 <_Balloc>
   89664:	4623      	mov	r3, r4
   89666:	f3c4 540a 	ubfx	r4, r4, #20, #11
   8966a:	4607      	mov	r7, r0
   8966c:	f3c3 0313 	ubfx	r3, r3, #0, #20
   89670:	b10c      	cbz	r4, 89676 <__d2b+0x26>
   89672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   89676:	f1b8 0200 	subs.w	r2, r8, #0
   8967a:	9301      	str	r3, [sp, #4]
   8967c:	d01e      	beq.n	896bc <__d2b+0x6c>
   8967e:	a802      	add	r0, sp, #8
   89680:	f840 2d08 	str.w	r2, [r0, #-8]!
   89684:	f7ff fdbe 	bl	89204 <__lo0bits>
   89688:	bb70      	cbnz	r0, 896e8 <__d2b+0x98>
   8968a:	e9dd 2300 	ldrd	r2, r3, [sp]
   8968e:	617a      	str	r2, [r7, #20]
   89690:	2b00      	cmp	r3, #0
   89692:	bf0c      	ite	eq
   89694:	2101      	moveq	r1, #1
   89696:	2102      	movne	r1, #2
   89698:	61bb      	str	r3, [r7, #24]
   8969a:	6139      	str	r1, [r7, #16]
   8969c:	b9cc      	cbnz	r4, 896d2 <__d2b+0x82>
   8969e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   896a2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   896a6:	6030      	str	r0, [r6, #0]
   896a8:	6918      	ldr	r0, [r3, #16]
   896aa:	f7ff fd8b 	bl	891c4 <__hi0bits>
   896ae:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   896b2:	6028      	str	r0, [r5, #0]
   896b4:	4638      	mov	r0, r7
   896b6:	b002      	add	sp, #8
   896b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   896bc:	a801      	add	r0, sp, #4
   896be:	f7ff fda1 	bl	89204 <__lo0bits>
   896c2:	2201      	movs	r2, #1
   896c4:	9b01      	ldr	r3, [sp, #4]
   896c6:	4611      	mov	r1, r2
   896c8:	3020      	adds	r0, #32
   896ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
   896ce:	2c00      	cmp	r4, #0
   896d0:	d0e5      	beq.n	8969e <__d2b+0x4e>
   896d2:	f2a4 4333 	subw	r3, r4, #1075	; 0x433
   896d6:	4403      	add	r3, r0
   896d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   896dc:	6033      	str	r3, [r6, #0]
   896de:	6028      	str	r0, [r5, #0]
   896e0:	4638      	mov	r0, r7
   896e2:	b002      	add	sp, #8
   896e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   896e8:	9b01      	ldr	r3, [sp, #4]
   896ea:	f1c0 0220 	rsb	r2, r0, #32
   896ee:	9900      	ldr	r1, [sp, #0]
   896f0:	fa03 f202 	lsl.w	r2, r3, r2
   896f4:	430a      	orrs	r2, r1
   896f6:	40c3      	lsrs	r3, r0
   896f8:	9301      	str	r3, [sp, #4]
   896fa:	617a      	str	r2, [r7, #20]
   896fc:	e7c8      	b.n	89690 <__d2b+0x40>
   896fe:	bf00      	nop

00089700 <_realloc_r>:
   89700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89704:	4692      	mov	sl, r2
   89706:	b083      	sub	sp, #12
   89708:	2900      	cmp	r1, #0
   8970a:	f000 80a1 	beq.w	89850 <_realloc_r+0x150>
   8970e:	460d      	mov	r5, r1
   89710:	4680      	mov	r8, r0
   89712:	f10a 040b 	add.w	r4, sl, #11
   89716:	f7ff fcd7 	bl	890c8 <__malloc_lock>
   8971a:	f855 2c04 	ldr.w	r2, [r5, #-4]
   8971e:	2c16      	cmp	r4, #22
   89720:	f022 0603 	bic.w	r6, r2, #3
   89724:	f1a5 0708 	sub.w	r7, r5, #8
   89728:	d83e      	bhi.n	897a8 <_realloc_r+0xa8>
   8972a:	2410      	movs	r4, #16
   8972c:	4621      	mov	r1, r4
   8972e:	45a2      	cmp	sl, r4
   89730:	d83f      	bhi.n	897b2 <_realloc_r+0xb2>
   89732:	428e      	cmp	r6, r1
   89734:	eb07 0906 	add.w	r9, r7, r6
   89738:	da74      	bge.n	89824 <_realloc_r+0x124>
   8973a:	4bc8      	ldr	r3, [pc, #800]	; (89a5c <_realloc_r+0x35c>)
   8973c:	6898      	ldr	r0, [r3, #8]
   8973e:	4548      	cmp	r0, r9
   89740:	f000 80aa 	beq.w	89898 <_realloc_r+0x198>
   89744:	f8d9 0004 	ldr.w	r0, [r9, #4]
   89748:	f020 0301 	bic.w	r3, r0, #1
   8974c:	444b      	add	r3, r9
   8974e:	685b      	ldr	r3, [r3, #4]
   89750:	07db      	lsls	r3, r3, #31
   89752:	f140 8083 	bpl.w	8985c <_realloc_r+0x15c>
   89756:	07d2      	lsls	r2, r2, #31
   89758:	d534      	bpl.n	897c4 <_realloc_r+0xc4>
   8975a:	4651      	mov	r1, sl
   8975c:	4640      	mov	r0, r8
   8975e:	f7ff f963 	bl	88a28 <_malloc_r>
   89762:	4682      	mov	sl, r0
   89764:	b1e0      	cbz	r0, 897a0 <_realloc_r+0xa0>
   89766:	f855 3c04 	ldr.w	r3, [r5, #-4]
   8976a:	f1a0 0208 	sub.w	r2, r0, #8
   8976e:	f023 0301 	bic.w	r3, r3, #1
   89772:	443b      	add	r3, r7
   89774:	4293      	cmp	r3, r2
   89776:	f000 810e 	beq.w	89996 <_realloc_r+0x296>
   8977a:	1f32      	subs	r2, r6, #4
   8977c:	2a24      	cmp	r2, #36	; 0x24
   8977e:	f200 8114 	bhi.w	899aa <_realloc_r+0x2aa>
   89782:	2a13      	cmp	r2, #19
   89784:	6829      	ldr	r1, [r5, #0]
   89786:	f200 80fb 	bhi.w	89980 <_realloc_r+0x280>
   8978a:	4603      	mov	r3, r0
   8978c:	462a      	mov	r2, r5
   8978e:	6019      	str	r1, [r3, #0]
   89790:	6851      	ldr	r1, [r2, #4]
   89792:	6059      	str	r1, [r3, #4]
   89794:	6892      	ldr	r2, [r2, #8]
   89796:	609a      	str	r2, [r3, #8]
   89798:	4629      	mov	r1, r5
   8979a:	4640      	mov	r0, r8
   8979c:	f7ff f83e 	bl	8881c <_free_r>
   897a0:	4640      	mov	r0, r8
   897a2:	f7ff fc97 	bl	890d4 <__malloc_unlock>
   897a6:	e04f      	b.n	89848 <_realloc_r+0x148>
   897a8:	f024 0407 	bic.w	r4, r4, #7
   897ac:	2c00      	cmp	r4, #0
   897ae:	4621      	mov	r1, r4
   897b0:	dabd      	bge.n	8972e <_realloc_r+0x2e>
   897b2:	f04f 0a00 	mov.w	sl, #0
   897b6:	230c      	movs	r3, #12
   897b8:	4650      	mov	r0, sl
   897ba:	f8c8 3000 	str.w	r3, [r8]
   897be:	b003      	add	sp, #12
   897c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   897c4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   897c8:	eba7 0b03 	sub.w	fp, r7, r3
   897cc:	f8db 2004 	ldr.w	r2, [fp, #4]
   897d0:	f022 0203 	bic.w	r2, r2, #3
   897d4:	18b3      	adds	r3, r6, r2
   897d6:	428b      	cmp	r3, r1
   897d8:	dbbf      	blt.n	8975a <_realloc_r+0x5a>
   897da:	46da      	mov	sl, fp
   897dc:	f8db 100c 	ldr.w	r1, [fp, #12]
   897e0:	f85a 0f08 	ldr.w	r0, [sl, #8]!
   897e4:	1f32      	subs	r2, r6, #4
   897e6:	2a24      	cmp	r2, #36	; 0x24
   897e8:	60c1      	str	r1, [r0, #12]
   897ea:	eb0b 0903 	add.w	r9, fp, r3
   897ee:	6088      	str	r0, [r1, #8]
   897f0:	f200 80be 	bhi.w	89970 <_realloc_r+0x270>
   897f4:	2a13      	cmp	r2, #19
   897f6:	6829      	ldr	r1, [r5, #0]
   897f8:	f240 80d5 	bls.w	899a6 <_realloc_r+0x2a6>
   897fc:	f8cb 1008 	str.w	r1, [fp, #8]
   89800:	6869      	ldr	r1, [r5, #4]
   89802:	2a1b      	cmp	r2, #27
   89804:	f8cb 100c 	str.w	r1, [fp, #12]
   89808:	68a9      	ldr	r1, [r5, #8]
   8980a:	f200 80e5 	bhi.w	899d8 <_realloc_r+0x2d8>
   8980e:	f10b 0210 	add.w	r2, fp, #16
   89812:	3508      	adds	r5, #8
   89814:	6011      	str	r1, [r2, #0]
   89816:	6869      	ldr	r1, [r5, #4]
   89818:	461e      	mov	r6, r3
   8981a:	6051      	str	r1, [r2, #4]
   8981c:	68ab      	ldr	r3, [r5, #8]
   8981e:	465f      	mov	r7, fp
   89820:	4655      	mov	r5, sl
   89822:	6093      	str	r3, [r2, #8]
   89824:	687a      	ldr	r2, [r7, #4]
   89826:	1b33      	subs	r3, r6, r4
   89828:	2b0f      	cmp	r3, #15
   8982a:	f002 0201 	and.w	r2, r2, #1
   8982e:	d822      	bhi.n	89876 <_realloc_r+0x176>
   89830:	4332      	orrs	r2, r6
   89832:	607a      	str	r2, [r7, #4]
   89834:	f8d9 3004 	ldr.w	r3, [r9, #4]
   89838:	f043 0301 	orr.w	r3, r3, #1
   8983c:	f8c9 3004 	str.w	r3, [r9, #4]
   89840:	4640      	mov	r0, r8
   89842:	f7ff fc47 	bl	890d4 <__malloc_unlock>
   89846:	46aa      	mov	sl, r5
   89848:	4650      	mov	r0, sl
   8984a:	b003      	add	sp, #12
   8984c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89850:	4611      	mov	r1, r2
   89852:	b003      	add	sp, #12
   89854:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89858:	f7ff b8e6 	b.w	88a28 <_malloc_r>
   8985c:	f020 0003 	bic.w	r0, r0, #3
   89860:	1833      	adds	r3, r6, r0
   89862:	428b      	cmp	r3, r1
   89864:	db63      	blt.n	8992e <_realloc_r+0x22e>
   89866:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
   8986a:	461e      	mov	r6, r3
   8986c:	60ca      	str	r2, [r1, #12]
   8986e:	eb07 0903 	add.w	r9, r7, r3
   89872:	6091      	str	r1, [r2, #8]
   89874:	e7d6      	b.n	89824 <_realloc_r+0x124>
   89876:	1939      	adds	r1, r7, r4
   89878:	4322      	orrs	r2, r4
   8987a:	f043 0301 	orr.w	r3, r3, #1
   8987e:	607a      	str	r2, [r7, #4]
   89880:	604b      	str	r3, [r1, #4]
   89882:	f8d9 3004 	ldr.w	r3, [r9, #4]
   89886:	3108      	adds	r1, #8
   89888:	f043 0301 	orr.w	r3, r3, #1
   8988c:	f8c9 3004 	str.w	r3, [r9, #4]
   89890:	4640      	mov	r0, r8
   89892:	f7fe ffc3 	bl	8881c <_free_r>
   89896:	e7d3      	b.n	89840 <_realloc_r+0x140>
   89898:	f8d0 9004 	ldr.w	r9, [r0, #4]
   8989c:	f104 0010 	add.w	r0, r4, #16
   898a0:	f029 0903 	bic.w	r9, r9, #3
   898a4:	44b1      	add	r9, r6
   898a6:	4581      	cmp	r9, r0
   898a8:	f280 8083 	bge.w	899b2 <_realloc_r+0x2b2>
   898ac:	07d2      	lsls	r2, r2, #31
   898ae:	f53f af54 	bmi.w	8975a <_realloc_r+0x5a>
   898b2:	f855 2c08 	ldr.w	r2, [r5, #-8]
   898b6:	eba7 0b02 	sub.w	fp, r7, r2
   898ba:	f8db 2004 	ldr.w	r2, [fp, #4]
   898be:	f022 0203 	bic.w	r2, r2, #3
   898c2:	4491      	add	r9, r2
   898c4:	4548      	cmp	r0, r9
   898c6:	dc85      	bgt.n	897d4 <_realloc_r+0xd4>
   898c8:	46da      	mov	sl, fp
   898ca:	f8db 100c 	ldr.w	r1, [fp, #12]
   898ce:	f85a 0f08 	ldr.w	r0, [sl, #8]!
   898d2:	1f32      	subs	r2, r6, #4
   898d4:	2a24      	cmp	r2, #36	; 0x24
   898d6:	60c1      	str	r1, [r0, #12]
   898d8:	6088      	str	r0, [r1, #8]
   898da:	f200 80ab 	bhi.w	89a34 <_realloc_r+0x334>
   898de:	2a13      	cmp	r2, #19
   898e0:	6829      	ldr	r1, [r5, #0]
   898e2:	f240 80a5 	bls.w	89a30 <_realloc_r+0x330>
   898e6:	f8cb 1008 	str.w	r1, [fp, #8]
   898ea:	6869      	ldr	r1, [r5, #4]
   898ec:	2a1b      	cmp	r2, #27
   898ee:	f8cb 100c 	str.w	r1, [fp, #12]
   898f2:	68a9      	ldr	r1, [r5, #8]
   898f4:	f200 80a5 	bhi.w	89a42 <_realloc_r+0x342>
   898f8:	f10b 0210 	add.w	r2, fp, #16
   898fc:	3508      	adds	r5, #8
   898fe:	6011      	str	r1, [r2, #0]
   89900:	6869      	ldr	r1, [r5, #4]
   89902:	6051      	str	r1, [r2, #4]
   89904:	68a9      	ldr	r1, [r5, #8]
   89906:	6091      	str	r1, [r2, #8]
   89908:	eba9 0204 	sub.w	r2, r9, r4
   8990c:	eb0b 0104 	add.w	r1, fp, r4
   89910:	f042 0201 	orr.w	r2, r2, #1
   89914:	6099      	str	r1, [r3, #8]
   89916:	604a      	str	r2, [r1, #4]
   89918:	f8db 3004 	ldr.w	r3, [fp, #4]
   8991c:	4640      	mov	r0, r8
   8991e:	f003 0301 	and.w	r3, r3, #1
   89922:	431c      	orrs	r4, r3
   89924:	f8cb 4004 	str.w	r4, [fp, #4]
   89928:	f7ff fbd4 	bl	890d4 <__malloc_unlock>
   8992c:	e78c      	b.n	89848 <_realloc_r+0x148>
   8992e:	07d3      	lsls	r3, r2, #31
   89930:	f53f af13 	bmi.w	8975a <_realloc_r+0x5a>
   89934:	f855 3c08 	ldr.w	r3, [r5, #-8]
   89938:	eba7 0b03 	sub.w	fp, r7, r3
   8993c:	f8db 2004 	ldr.w	r2, [fp, #4]
   89940:	f022 0203 	bic.w	r2, r2, #3
   89944:	4410      	add	r0, r2
   89946:	1983      	adds	r3, r0, r6
   89948:	428b      	cmp	r3, r1
   8994a:	f6ff af43 	blt.w	897d4 <_realloc_r+0xd4>
   8994e:	e9d9 0102 	ldrd	r0, r1, [r9, #8]
   89952:	46da      	mov	sl, fp
   89954:	60c1      	str	r1, [r0, #12]
   89956:	6088      	str	r0, [r1, #8]
   89958:	f85a 0f08 	ldr.w	r0, [sl, #8]!
   8995c:	f8db 100c 	ldr.w	r1, [fp, #12]
   89960:	1f32      	subs	r2, r6, #4
   89962:	2a24      	cmp	r2, #36	; 0x24
   89964:	60c1      	str	r1, [r0, #12]
   89966:	eb0b 0903 	add.w	r9, fp, r3
   8996a:	6088      	str	r0, [r1, #8]
   8996c:	f67f af42 	bls.w	897f4 <_realloc_r+0xf4>
   89970:	4629      	mov	r1, r5
   89972:	4650      	mov	r0, sl
   89974:	461e      	mov	r6, r3
   89976:	465f      	mov	r7, fp
   89978:	f7ff fb44 	bl	89004 <memmove>
   8997c:	4655      	mov	r5, sl
   8997e:	e751      	b.n	89824 <_realloc_r+0x124>
   89980:	6001      	str	r1, [r0, #0]
   89982:	686b      	ldr	r3, [r5, #4]
   89984:	2a1b      	cmp	r2, #27
   89986:	6043      	str	r3, [r0, #4]
   89988:	d832      	bhi.n	899f0 <_realloc_r+0x2f0>
   8998a:	f105 0208 	add.w	r2, r5, #8
   8998e:	f100 0308 	add.w	r3, r0, #8
   89992:	68a9      	ldr	r1, [r5, #8]
   89994:	e6fb      	b.n	8978e <_realloc_r+0x8e>
   89996:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8999a:	f023 0303 	bic.w	r3, r3, #3
   8999e:	441e      	add	r6, r3
   899a0:	eb07 0906 	add.w	r9, r7, r6
   899a4:	e73e      	b.n	89824 <_realloc_r+0x124>
   899a6:	4652      	mov	r2, sl
   899a8:	e734      	b.n	89814 <_realloc_r+0x114>
   899aa:	4629      	mov	r1, r5
   899ac:	f7ff fb2a 	bl	89004 <memmove>
   899b0:	e6f2      	b.n	89798 <_realloc_r+0x98>
   899b2:	eba9 0904 	sub.w	r9, r9, r4
   899b6:	4427      	add	r7, r4
   899b8:	f049 0201 	orr.w	r2, r9, #1
   899bc:	609f      	str	r7, [r3, #8]
   899be:	607a      	str	r2, [r7, #4]
   899c0:	f855 3c04 	ldr.w	r3, [r5, #-4]
   899c4:	4640      	mov	r0, r8
   899c6:	f003 0301 	and.w	r3, r3, #1
   899ca:	431c      	orrs	r4, r3
   899cc:	f845 4c04 	str.w	r4, [r5, #-4]
   899d0:	f7ff fb80 	bl	890d4 <__malloc_unlock>
   899d4:	46aa      	mov	sl, r5
   899d6:	e737      	b.n	89848 <_realloc_r+0x148>
   899d8:	f8cb 1010 	str.w	r1, [fp, #16]
   899dc:	68e9      	ldr	r1, [r5, #12]
   899de:	2a24      	cmp	r2, #36	; 0x24
   899e0:	f8cb 1014 	str.w	r1, [fp, #20]
   899e4:	6929      	ldr	r1, [r5, #16]
   899e6:	d00f      	beq.n	89a08 <_realloc_r+0x308>
   899e8:	f10b 0218 	add.w	r2, fp, #24
   899ec:	3510      	adds	r5, #16
   899ee:	e711      	b.n	89814 <_realloc_r+0x114>
   899f0:	68ab      	ldr	r3, [r5, #8]
   899f2:	2a24      	cmp	r2, #36	; 0x24
   899f4:	6083      	str	r3, [r0, #8]
   899f6:	68eb      	ldr	r3, [r5, #12]
   899f8:	60c3      	str	r3, [r0, #12]
   899fa:	d00f      	beq.n	89a1c <_realloc_r+0x31c>
   899fc:	f105 0210 	add.w	r2, r5, #16
   89a00:	f100 0310 	add.w	r3, r0, #16
   89a04:	6929      	ldr	r1, [r5, #16]
   89a06:	e6c2      	b.n	8978e <_realloc_r+0x8e>
   89a08:	f8cb 1018 	str.w	r1, [fp, #24]
   89a0c:	6969      	ldr	r1, [r5, #20]
   89a0e:	f10b 0220 	add.w	r2, fp, #32
   89a12:	f8cb 101c 	str.w	r1, [fp, #28]
   89a16:	69a9      	ldr	r1, [r5, #24]
   89a18:	3518      	adds	r5, #24
   89a1a:	e6fb      	b.n	89814 <_realloc_r+0x114>
   89a1c:	692b      	ldr	r3, [r5, #16]
   89a1e:	f105 0218 	add.w	r2, r5, #24
   89a22:	6103      	str	r3, [r0, #16]
   89a24:	6969      	ldr	r1, [r5, #20]
   89a26:	f100 0318 	add.w	r3, r0, #24
   89a2a:	6141      	str	r1, [r0, #20]
   89a2c:	69a9      	ldr	r1, [r5, #24]
   89a2e:	e6ae      	b.n	8978e <_realloc_r+0x8e>
   89a30:	4652      	mov	r2, sl
   89a32:	e764      	b.n	898fe <_realloc_r+0x1fe>
   89a34:	4629      	mov	r1, r5
   89a36:	4650      	mov	r0, sl
   89a38:	9301      	str	r3, [sp, #4]
   89a3a:	f7ff fae3 	bl	89004 <memmove>
   89a3e:	9b01      	ldr	r3, [sp, #4]
   89a40:	e762      	b.n	89908 <_realloc_r+0x208>
   89a42:	f8cb 1010 	str.w	r1, [fp, #16]
   89a46:	68e9      	ldr	r1, [r5, #12]
   89a48:	2a24      	cmp	r2, #36	; 0x24
   89a4a:	f8cb 1014 	str.w	r1, [fp, #20]
   89a4e:	6929      	ldr	r1, [r5, #16]
   89a50:	d006      	beq.n	89a60 <_realloc_r+0x360>
   89a52:	f10b 0218 	add.w	r2, fp, #24
   89a56:	3510      	adds	r5, #16
   89a58:	e751      	b.n	898fe <_realloc_r+0x1fe>
   89a5a:	bf00      	nop
   89a5c:	20000950 	.word	0x20000950
   89a60:	f8cb 1018 	str.w	r1, [fp, #24]
   89a64:	6969      	ldr	r1, [r5, #20]
   89a66:	f10b 0220 	add.w	r2, fp, #32
   89a6a:	f8cb 101c 	str.w	r1, [fp, #28]
   89a6e:	69a9      	ldr	r1, [r5, #24]
   89a70:	3518      	adds	r5, #24
   89a72:	e744      	b.n	898fe <_realloc_r+0x1fe>

00089a74 <frexp>:
   89a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89a76:	4617      	mov	r7, r2
   89a78:	2200      	movs	r2, #0
   89a7a:	f8df c058 	ldr.w	ip, [pc, #88]	; 89ad4 <frexp+0x60>
   89a7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   89a82:	4563      	cmp	r3, ip
   89a84:	4604      	mov	r4, r0
   89a86:	460d      	mov	r5, r1
   89a88:	603a      	str	r2, [r7, #0]
   89a8a:	dc1e      	bgt.n	89aca <frexp+0x56>
   89a8c:	4684      	mov	ip, r0
   89a8e:	ea53 0c0c 	orrs.w	ip, r3, ip
   89a92:	d01a      	beq.n	89aca <frexp+0x56>
   89a94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   89a98:	460e      	mov	r6, r1
   89a9a:	da09      	bge.n	89ab0 <frexp+0x3c>
   89a9c:	2200      	movs	r2, #0
   89a9e:	4b0c      	ldr	r3, [pc, #48]	; (89ad0 <frexp+0x5c>)
   89aa0:	f000 fb64 	bl	8a16c <__aeabi_dmul>
   89aa4:	f06f 0235 	mvn.w	r2, #53	; 0x35
   89aa8:	4604      	mov	r4, r0
   89aaa:	460e      	mov	r6, r1
   89aac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   89ab0:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   89ab4:	151b      	asrs	r3, r3, #20
   89ab6:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   89aba:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   89abe:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   89ac2:	4413      	add	r3, r2
   89ac4:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   89ac8:	603b      	str	r3, [r7, #0]
   89aca:	4620      	mov	r0, r4
   89acc:	4629      	mov	r1, r5
   89ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89ad0:	43500000 	.word	0x43500000
   89ad4:	7fefffff 	.word	0x7fefffff

00089ad8 <_sbrk_r>:
   89ad8:	b538      	push	{r3, r4, r5, lr}
   89ada:	2300      	movs	r3, #0
   89adc:	4c06      	ldr	r4, [pc, #24]	; (89af8 <_sbrk_r+0x20>)
   89ade:	4605      	mov	r5, r0
   89ae0:	4608      	mov	r0, r1
   89ae2:	6023      	str	r3, [r4, #0]
   89ae4:	f7f8 feba 	bl	8285c <_sbrk>
   89ae8:	1c43      	adds	r3, r0, #1
   89aea:	d000      	beq.n	89aee <_sbrk_r+0x16>
   89aec:	bd38      	pop	{r3, r4, r5, pc}
   89aee:	6823      	ldr	r3, [r4, #0]
   89af0:	2b00      	cmp	r3, #0
   89af2:	d0fb      	beq.n	89aec <_sbrk_r+0x14>
   89af4:	602b      	str	r3, [r5, #0]
   89af6:	bd38      	pop	{r3, r4, r5, pc}
   89af8:	2000135c 	.word	0x2000135c

00089afc <strlen>:
   89afc:	f020 0103 	bic.w	r1, r0, #3
   89b00:	f010 0003 	ands.w	r0, r0, #3
   89b04:	f1c0 0000 	rsb	r0, r0, #0
   89b08:	f851 3b04 	ldr.w	r3, [r1], #4
   89b0c:	f100 0c04 	add.w	ip, r0, #4
   89b10:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   89b14:	f06f 0200 	mvn.w	r2, #0
   89b18:	bf1c      	itt	ne
   89b1a:	fa22 f20c 	lsrne.w	r2, r2, ip
   89b1e:	4313      	orrne	r3, r2
   89b20:	f04f 0c01 	mov.w	ip, #1
   89b24:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   89b28:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   89b2c:	eba3 020c 	sub.w	r2, r3, ip
   89b30:	ea22 0203 	bic.w	r2, r2, r3
   89b34:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   89b38:	bf04      	itt	eq
   89b3a:	f851 3b04 	ldreq.w	r3, [r1], #4
   89b3e:	3004      	addeq	r0, #4
   89b40:	d0f4      	beq.n	89b2c <strlen+0x30>
   89b42:	f1c2 0100 	rsb	r1, r2, #0
   89b46:	ea02 0201 	and.w	r2, r2, r1
   89b4a:	fab2 f282 	clz	r2, r2
   89b4e:	f1c2 021f 	rsb	r2, r2, #31
   89b52:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   89b56:	4770      	bx	lr

00089b58 <strncpy>:
   89b58:	ea40 0301 	orr.w	r3, r0, r1
   89b5c:	079b      	lsls	r3, r3, #30
   89b5e:	b470      	push	{r4, r5, r6}
   89b60:	d12a      	bne.n	89bb8 <strncpy+0x60>
   89b62:	2a03      	cmp	r2, #3
   89b64:	d928      	bls.n	89bb8 <strncpy+0x60>
   89b66:	460c      	mov	r4, r1
   89b68:	4603      	mov	r3, r0
   89b6a:	4621      	mov	r1, r4
   89b6c:	f854 6b04 	ldr.w	r6, [r4], #4
   89b70:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   89b74:	ea25 0506 	bic.w	r5, r5, r6
   89b78:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   89b7c:	d106      	bne.n	89b8c <strncpy+0x34>
   89b7e:	3a04      	subs	r2, #4
   89b80:	2a03      	cmp	r2, #3
   89b82:	f843 6b04 	str.w	r6, [r3], #4
   89b86:	4621      	mov	r1, r4
   89b88:	d8ef      	bhi.n	89b6a <strncpy+0x12>
   89b8a:	b19a      	cbz	r2, 89bb4 <strncpy+0x5c>
   89b8c:	780c      	ldrb	r4, [r1, #0]
   89b8e:	3a01      	subs	r2, #1
   89b90:	701c      	strb	r4, [r3, #0]
   89b92:	3301      	adds	r3, #1
   89b94:	b13c      	cbz	r4, 89ba6 <strncpy+0x4e>
   89b96:	b16a      	cbz	r2, 89bb4 <strncpy+0x5c>
   89b98:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   89b9c:	3a01      	subs	r2, #1
   89b9e:	f803 4b01 	strb.w	r4, [r3], #1
   89ba2:	2c00      	cmp	r4, #0
   89ba4:	d1f7      	bne.n	89b96 <strncpy+0x3e>
   89ba6:	b12a      	cbz	r2, 89bb4 <strncpy+0x5c>
   89ba8:	2100      	movs	r1, #0
   89baa:	441a      	add	r2, r3
   89bac:	f803 1b01 	strb.w	r1, [r3], #1
   89bb0:	4293      	cmp	r3, r2
   89bb2:	d1fb      	bne.n	89bac <strncpy+0x54>
   89bb4:	bc70      	pop	{r4, r5, r6}
   89bb6:	4770      	bx	lr
   89bb8:	4603      	mov	r3, r0
   89bba:	e7e6      	b.n	89b8a <strncpy+0x32>

00089bbc <__ssprint_r>:
   89bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89bc0:	6893      	ldr	r3, [r2, #8]
   89bc2:	b083      	sub	sp, #12
   89bc4:	4690      	mov	r8, r2
   89bc6:	2b00      	cmp	r3, #0
   89bc8:	d06c      	beq.n	89ca4 <__ssprint_r+0xe8>
   89bca:	6817      	ldr	r7, [r2, #0]
   89bcc:	4682      	mov	sl, r0
   89bce:	460c      	mov	r4, r1
   89bd0:	6808      	ldr	r0, [r1, #0]
   89bd2:	3708      	adds	r7, #8
   89bd4:	688d      	ldr	r5, [r1, #8]
   89bd6:	e042      	b.n	89c5e <__ssprint_r+0xa2>
   89bd8:	89a3      	ldrh	r3, [r4, #12]
   89bda:	f413 6f90 	tst.w	r3, #1152	; 0x480
   89bde:	d02d      	beq.n	89c3c <__ssprint_r+0x80>
   89be0:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   89be4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   89be8:	eba0 0b01 	sub.w	fp, r0, r1
   89bec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   89bf0:	1c70      	adds	r0, r6, #1
   89bf2:	106d      	asrs	r5, r5, #1
   89bf4:	4458      	add	r0, fp
   89bf6:	42a8      	cmp	r0, r5
   89bf8:	462a      	mov	r2, r5
   89bfa:	bf84      	itt	hi
   89bfc:	4605      	movhi	r5, r0
   89bfe:	462a      	movhi	r2, r5
   89c00:	055b      	lsls	r3, r3, #21
   89c02:	d536      	bpl.n	89c72 <__ssprint_r+0xb6>
   89c04:	4611      	mov	r1, r2
   89c06:	4650      	mov	r0, sl
   89c08:	f7fe ff0e 	bl	88a28 <_malloc_r>
   89c0c:	2800      	cmp	r0, #0
   89c0e:	d03a      	beq.n	89c86 <__ssprint_r+0xca>
   89c10:	465a      	mov	r2, fp
   89c12:	6921      	ldr	r1, [r4, #16]
   89c14:	9001      	str	r0, [sp, #4]
   89c16:	f7fb fff7 	bl	85c08 <memcpy>
   89c1a:	89a2      	ldrh	r2, [r4, #12]
   89c1c:	9b01      	ldr	r3, [sp, #4]
   89c1e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   89c22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   89c26:	81a2      	strh	r2, [r4, #12]
   89c28:	eba5 020b 	sub.w	r2, r5, fp
   89c2c:	eb03 000b 	add.w	r0, r3, fp
   89c30:	6165      	str	r5, [r4, #20]
   89c32:	46b3      	mov	fp, r6
   89c34:	4635      	mov	r5, r6
   89c36:	6123      	str	r3, [r4, #16]
   89c38:	6020      	str	r0, [r4, #0]
   89c3a:	60a2      	str	r2, [r4, #8]
   89c3c:	465a      	mov	r2, fp
   89c3e:	4649      	mov	r1, r9
   89c40:	f7ff f9e0 	bl	89004 <memmove>
   89c44:	f8d8 3008 	ldr.w	r3, [r8, #8]
   89c48:	68a2      	ldr	r2, [r4, #8]
   89c4a:	6820      	ldr	r0, [r4, #0]
   89c4c:	1b55      	subs	r5, r2, r5
   89c4e:	4458      	add	r0, fp
   89c50:	1b9e      	subs	r6, r3, r6
   89c52:	60a5      	str	r5, [r4, #8]
   89c54:	6020      	str	r0, [r4, #0]
   89c56:	f8c8 6008 	str.w	r6, [r8, #8]
   89c5a:	b31e      	cbz	r6, 89ca4 <__ssprint_r+0xe8>
   89c5c:	3708      	adds	r7, #8
   89c5e:	e957 9602 	ldrd	r9, r6, [r7, #-8]
   89c62:	46ab      	mov	fp, r5
   89c64:	2e00      	cmp	r6, #0
   89c66:	d0f9      	beq.n	89c5c <__ssprint_r+0xa0>
   89c68:	42ae      	cmp	r6, r5
   89c6a:	d2b5      	bcs.n	89bd8 <__ssprint_r+0x1c>
   89c6c:	4635      	mov	r5, r6
   89c6e:	46b3      	mov	fp, r6
   89c70:	e7e4      	b.n	89c3c <__ssprint_r+0x80>
   89c72:	4650      	mov	r0, sl
   89c74:	f7ff fd44 	bl	89700 <_realloc_r>
   89c78:	4603      	mov	r3, r0
   89c7a:	2800      	cmp	r0, #0
   89c7c:	d1d4      	bne.n	89c28 <__ssprint_r+0x6c>
   89c7e:	6921      	ldr	r1, [r4, #16]
   89c80:	4650      	mov	r0, sl
   89c82:	f7fe fdcb 	bl	8881c <_free_r>
   89c86:	230c      	movs	r3, #12
   89c88:	2200      	movs	r2, #0
   89c8a:	f04f 30ff 	mov.w	r0, #4294967295
   89c8e:	f8ca 3000 	str.w	r3, [sl]
   89c92:	89a3      	ldrh	r3, [r4, #12]
   89c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89c98:	81a3      	strh	r3, [r4, #12]
   89c9a:	e9c8 2201 	strd	r2, r2, [r8, #4]
   89c9e:	b003      	add	sp, #12
   89ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89ca4:	2000      	movs	r0, #0
   89ca6:	f8c8 0004 	str.w	r0, [r8, #4]
   89caa:	b003      	add	sp, #12
   89cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00089cb0 <__ascii_wctomb>:
   89cb0:	b119      	cbz	r1, 89cba <__ascii_wctomb+0xa>
   89cb2:	2aff      	cmp	r2, #255	; 0xff
   89cb4:	d803      	bhi.n	89cbe <__ascii_wctomb+0xe>
   89cb6:	700a      	strb	r2, [r1, #0]
   89cb8:	2101      	movs	r1, #1
   89cba:	4608      	mov	r0, r1
   89cbc:	4770      	bx	lr
   89cbe:	238a      	movs	r3, #138	; 0x8a
   89cc0:	f04f 31ff 	mov.w	r1, #4294967295
   89cc4:	6003      	str	r3, [r0, #0]
   89cc6:	e7f8      	b.n	89cba <__ascii_wctomb+0xa>

00089cc8 <__register_exitproc>:
   89cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   89ccc:	4d2b      	ldr	r5, [pc, #172]	; (89d7c <__register_exitproc+0xb4>)
   89cce:	4606      	mov	r6, r0
   89cd0:	6828      	ldr	r0, [r5, #0]
   89cd2:	4698      	mov	r8, r3
   89cd4:	460f      	mov	r7, r1
   89cd6:	4691      	mov	r9, r2
   89cd8:	f7fe fea2 	bl	88a20 <__retarget_lock_acquire_recursive>
   89cdc:	4b28      	ldr	r3, [pc, #160]	; (89d80 <__register_exitproc+0xb8>)
   89cde:	681c      	ldr	r4, [r3, #0]
   89ce0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   89ce4:	2b00      	cmp	r3, #0
   89ce6:	d03d      	beq.n	89d64 <__register_exitproc+0x9c>
   89ce8:	685a      	ldr	r2, [r3, #4]
   89cea:	2a1f      	cmp	r2, #31
   89cec:	dc0d      	bgt.n	89d0a <__register_exitproc+0x42>
   89cee:	f102 0c01 	add.w	ip, r2, #1
   89cf2:	bb16      	cbnz	r6, 89d3a <__register_exitproc+0x72>
   89cf4:	3202      	adds	r2, #2
   89cf6:	f8c3 c004 	str.w	ip, [r3, #4]
   89cfa:	6828      	ldr	r0, [r5, #0]
   89cfc:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   89d00:	f7fe fe90 	bl	88a24 <__retarget_lock_release_recursive>
   89d04:	2000      	movs	r0, #0
   89d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   89d0a:	4b1e      	ldr	r3, [pc, #120]	; (89d84 <__register_exitproc+0xbc>)
   89d0c:	b37b      	cbz	r3, 89d6e <__register_exitproc+0xa6>
   89d0e:	f44f 70c8 	mov.w	r0, #400	; 0x190
   89d12:	f3af 8000 	nop.w
   89d16:	4603      	mov	r3, r0
   89d18:	b348      	cbz	r0, 89d6e <__register_exitproc+0xa6>
   89d1a:	2000      	movs	r0, #0
   89d1c:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   89d20:	f04f 0c01 	mov.w	ip, #1
   89d24:	e9c3 1000 	strd	r1, r0, [r3]
   89d28:	4602      	mov	r2, r0
   89d2a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   89d2e:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   89d32:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   89d36:	2e00      	cmp	r6, #0
   89d38:	d0dc      	beq.n	89cf4 <__register_exitproc+0x2c>
   89d3a:	2101      	movs	r1, #1
   89d3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   89d40:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   89d44:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   89d48:	4091      	lsls	r1, r2
   89d4a:	4308      	orrs	r0, r1
   89d4c:	2e02      	cmp	r6, #2
   89d4e:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   89d52:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   89d56:	d1cd      	bne.n	89cf4 <__register_exitproc+0x2c>
   89d58:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   89d5c:	4301      	orrs	r1, r0
   89d5e:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   89d62:	e7c7      	b.n	89cf4 <__register_exitproc+0x2c>
   89d64:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   89d68:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   89d6c:	e7bc      	b.n	89ce8 <__register_exitproc+0x20>
   89d6e:	6828      	ldr	r0, [r5, #0]
   89d70:	f7fe fe58 	bl	88a24 <__retarget_lock_release_recursive>
   89d74:	f04f 30ff 	mov.w	r0, #4294967295
   89d78:	e7c5      	b.n	89d06 <__register_exitproc+0x3e>
   89d7a:	bf00      	nop
   89d7c:	200007e0 	.word	0x200007e0
   89d80:	0008aa60 	.word	0x0008aa60
   89d84:	00000000 	.word	0x00000000

00089d88 <_calloc_r>:
   89d88:	b510      	push	{r4, lr}
   89d8a:	fb02 f101 	mul.w	r1, r2, r1
   89d8e:	f7fe fe4b 	bl	88a28 <_malloc_r>
   89d92:	4604      	mov	r4, r0
   89d94:	b1e8      	cbz	r0, 89dd2 <_calloc_r+0x4a>
   89d96:	f850 2c04 	ldr.w	r2, [r0, #-4]
   89d9a:	f022 0203 	bic.w	r2, r2, #3
   89d9e:	3a04      	subs	r2, #4
   89da0:	2a24      	cmp	r2, #36	; 0x24
   89da2:	d81f      	bhi.n	89de4 <_calloc_r+0x5c>
   89da4:	2a13      	cmp	r2, #19
   89da6:	d916      	bls.n	89dd6 <_calloc_r+0x4e>
   89da8:	2300      	movs	r3, #0
   89daa:	2a1b      	cmp	r2, #27
   89dac:	e9c0 3300 	strd	r3, r3, [r0]
   89db0:	d91d      	bls.n	89dee <_calloc_r+0x66>
   89db2:	2a24      	cmp	r2, #36	; 0x24
   89db4:	e9c0 3302 	strd	r3, r3, [r0, #8]
   89db8:	bf08      	it	eq
   89dba:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
   89dbe:	f04f 0300 	mov.w	r3, #0
   89dc2:	bf14      	ite	ne
   89dc4:	f100 0210 	addne.w	r2, r0, #16
   89dc8:	f100 0218 	addeq.w	r2, r0, #24
   89dcc:	e9c2 3300 	strd	r3, r3, [r2]
   89dd0:	6093      	str	r3, [r2, #8]
   89dd2:	4620      	mov	r0, r4
   89dd4:	bd10      	pop	{r4, pc}
   89dd6:	4602      	mov	r2, r0
   89dd8:	2300      	movs	r3, #0
   89dda:	4620      	mov	r0, r4
   89ddc:	e9c2 3300 	strd	r3, r3, [r2]
   89de0:	6093      	str	r3, [r2, #8]
   89de2:	bd10      	pop	{r4, pc}
   89de4:	2100      	movs	r1, #0
   89de6:	f7fb ff85 	bl	85cf4 <memset>
   89dea:	4620      	mov	r0, r4
   89dec:	bd10      	pop	{r4, pc}
   89dee:	f100 0208 	add.w	r2, r0, #8
   89df2:	e7f1      	b.n	89dd8 <_calloc_r+0x50>

00089df4 <__aeabi_drsub>:
   89df4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   89df8:	e002      	b.n	89e00 <__adddf3>
   89dfa:	bf00      	nop

00089dfc <__aeabi_dsub>:
   89dfc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00089e00 <__adddf3>:
   89e00:	b530      	push	{r4, r5, lr}
   89e02:	ea4f 0441 	mov.w	r4, r1, lsl #1
   89e06:	ea4f 0543 	mov.w	r5, r3, lsl #1
   89e0a:	ea94 0f05 	teq	r4, r5
   89e0e:	bf08      	it	eq
   89e10:	ea90 0f02 	teqeq	r0, r2
   89e14:	bf1f      	itttt	ne
   89e16:	ea54 0c00 	orrsne.w	ip, r4, r0
   89e1a:	ea55 0c02 	orrsne.w	ip, r5, r2
   89e1e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   89e22:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   89e26:	f000 80e2 	beq.w	89fee <__adddf3+0x1ee>
   89e2a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   89e2e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   89e32:	bfb8      	it	lt
   89e34:	426d      	neglt	r5, r5
   89e36:	dd0c      	ble.n	89e52 <__adddf3+0x52>
   89e38:	442c      	add	r4, r5
   89e3a:	ea80 0202 	eor.w	r2, r0, r2
   89e3e:	ea81 0303 	eor.w	r3, r1, r3
   89e42:	ea82 0000 	eor.w	r0, r2, r0
   89e46:	ea83 0101 	eor.w	r1, r3, r1
   89e4a:	ea80 0202 	eor.w	r2, r0, r2
   89e4e:	ea81 0303 	eor.w	r3, r1, r3
   89e52:	2d36      	cmp	r5, #54	; 0x36
   89e54:	bf88      	it	hi
   89e56:	bd30      	pophi	{r4, r5, pc}
   89e58:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   89e5c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   89e60:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   89e64:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   89e68:	d002      	beq.n	89e70 <__adddf3+0x70>
   89e6a:	4240      	negs	r0, r0
   89e6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   89e70:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   89e74:	ea4f 3303 	mov.w	r3, r3, lsl #12
   89e78:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   89e7c:	d002      	beq.n	89e84 <__adddf3+0x84>
   89e7e:	4252      	negs	r2, r2
   89e80:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   89e84:	ea94 0f05 	teq	r4, r5
   89e88:	f000 80a7 	beq.w	89fda <__adddf3+0x1da>
   89e8c:	f1a4 0401 	sub.w	r4, r4, #1
   89e90:	f1d5 0e20 	rsbs	lr, r5, #32
   89e94:	db0d      	blt.n	89eb2 <__adddf3+0xb2>
   89e96:	fa02 fc0e 	lsl.w	ip, r2, lr
   89e9a:	fa22 f205 	lsr.w	r2, r2, r5
   89e9e:	1880      	adds	r0, r0, r2
   89ea0:	f141 0100 	adc.w	r1, r1, #0
   89ea4:	fa03 f20e 	lsl.w	r2, r3, lr
   89ea8:	1880      	adds	r0, r0, r2
   89eaa:	fa43 f305 	asr.w	r3, r3, r5
   89eae:	4159      	adcs	r1, r3
   89eb0:	e00e      	b.n	89ed0 <__adddf3+0xd0>
   89eb2:	f1a5 0520 	sub.w	r5, r5, #32
   89eb6:	f10e 0e20 	add.w	lr, lr, #32
   89eba:	2a01      	cmp	r2, #1
   89ebc:	fa03 fc0e 	lsl.w	ip, r3, lr
   89ec0:	bf28      	it	cs
   89ec2:	f04c 0c02 	orrcs.w	ip, ip, #2
   89ec6:	fa43 f305 	asr.w	r3, r3, r5
   89eca:	18c0      	adds	r0, r0, r3
   89ecc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   89ed0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   89ed4:	d507      	bpl.n	89ee6 <__adddf3+0xe6>
   89ed6:	f04f 0e00 	mov.w	lr, #0
   89eda:	f1dc 0c00 	rsbs	ip, ip, #0
   89ede:	eb7e 0000 	sbcs.w	r0, lr, r0
   89ee2:	eb6e 0101 	sbc.w	r1, lr, r1
   89ee6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   89eea:	d31b      	bcc.n	89f24 <__adddf3+0x124>
   89eec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   89ef0:	d30c      	bcc.n	89f0c <__adddf3+0x10c>
   89ef2:	0849      	lsrs	r1, r1, #1
   89ef4:	ea5f 0030 	movs.w	r0, r0, rrx
   89ef8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   89efc:	f104 0401 	add.w	r4, r4, #1
   89f00:	ea4f 5244 	mov.w	r2, r4, lsl #21
   89f04:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   89f08:	f080 809a 	bcs.w	8a040 <__adddf3+0x240>
   89f0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   89f10:	bf08      	it	eq
   89f12:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   89f16:	f150 0000 	adcs.w	r0, r0, #0
   89f1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   89f1e:	ea41 0105 	orr.w	r1, r1, r5
   89f22:	bd30      	pop	{r4, r5, pc}
   89f24:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   89f28:	4140      	adcs	r0, r0
   89f2a:	eb41 0101 	adc.w	r1, r1, r1
   89f2e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   89f32:	f1a4 0401 	sub.w	r4, r4, #1
   89f36:	d1e9      	bne.n	89f0c <__adddf3+0x10c>
   89f38:	f091 0f00 	teq	r1, #0
   89f3c:	bf04      	itt	eq
   89f3e:	4601      	moveq	r1, r0
   89f40:	2000      	moveq	r0, #0
   89f42:	fab1 f381 	clz	r3, r1
   89f46:	bf08      	it	eq
   89f48:	3320      	addeq	r3, #32
   89f4a:	f1a3 030b 	sub.w	r3, r3, #11
   89f4e:	f1b3 0220 	subs.w	r2, r3, #32
   89f52:	da0c      	bge.n	89f6e <__adddf3+0x16e>
   89f54:	320c      	adds	r2, #12
   89f56:	dd08      	ble.n	89f6a <__adddf3+0x16a>
   89f58:	f102 0c14 	add.w	ip, r2, #20
   89f5c:	f1c2 020c 	rsb	r2, r2, #12
   89f60:	fa01 f00c 	lsl.w	r0, r1, ip
   89f64:	fa21 f102 	lsr.w	r1, r1, r2
   89f68:	e00c      	b.n	89f84 <__adddf3+0x184>
   89f6a:	f102 0214 	add.w	r2, r2, #20
   89f6e:	bfd8      	it	le
   89f70:	f1c2 0c20 	rsble	ip, r2, #32
   89f74:	fa01 f102 	lsl.w	r1, r1, r2
   89f78:	fa20 fc0c 	lsr.w	ip, r0, ip
   89f7c:	bfdc      	itt	le
   89f7e:	ea41 010c 	orrle.w	r1, r1, ip
   89f82:	4090      	lslle	r0, r2
   89f84:	1ae4      	subs	r4, r4, r3
   89f86:	bfa2      	ittt	ge
   89f88:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   89f8c:	4329      	orrge	r1, r5
   89f8e:	bd30      	popge	{r4, r5, pc}
   89f90:	ea6f 0404 	mvn.w	r4, r4
   89f94:	3c1f      	subs	r4, #31
   89f96:	da1c      	bge.n	89fd2 <__adddf3+0x1d2>
   89f98:	340c      	adds	r4, #12
   89f9a:	dc0e      	bgt.n	89fba <__adddf3+0x1ba>
   89f9c:	f104 0414 	add.w	r4, r4, #20
   89fa0:	f1c4 0220 	rsb	r2, r4, #32
   89fa4:	fa20 f004 	lsr.w	r0, r0, r4
   89fa8:	fa01 f302 	lsl.w	r3, r1, r2
   89fac:	ea40 0003 	orr.w	r0, r0, r3
   89fb0:	fa21 f304 	lsr.w	r3, r1, r4
   89fb4:	ea45 0103 	orr.w	r1, r5, r3
   89fb8:	bd30      	pop	{r4, r5, pc}
   89fba:	f1c4 040c 	rsb	r4, r4, #12
   89fbe:	f1c4 0220 	rsb	r2, r4, #32
   89fc2:	fa20 f002 	lsr.w	r0, r0, r2
   89fc6:	fa01 f304 	lsl.w	r3, r1, r4
   89fca:	ea40 0003 	orr.w	r0, r0, r3
   89fce:	4629      	mov	r1, r5
   89fd0:	bd30      	pop	{r4, r5, pc}
   89fd2:	fa21 f004 	lsr.w	r0, r1, r4
   89fd6:	4629      	mov	r1, r5
   89fd8:	bd30      	pop	{r4, r5, pc}
   89fda:	f094 0f00 	teq	r4, #0
   89fde:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   89fe2:	bf06      	itte	eq
   89fe4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   89fe8:	3401      	addeq	r4, #1
   89fea:	3d01      	subne	r5, #1
   89fec:	e74e      	b.n	89e8c <__adddf3+0x8c>
   89fee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   89ff2:	bf18      	it	ne
   89ff4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   89ff8:	d029      	beq.n	8a04e <__adddf3+0x24e>
   89ffa:	ea94 0f05 	teq	r4, r5
   89ffe:	bf08      	it	eq
   8a000:	ea90 0f02 	teqeq	r0, r2
   8a004:	d005      	beq.n	8a012 <__adddf3+0x212>
   8a006:	ea54 0c00 	orrs.w	ip, r4, r0
   8a00a:	bf04      	itt	eq
   8a00c:	4619      	moveq	r1, r3
   8a00e:	4610      	moveq	r0, r2
   8a010:	bd30      	pop	{r4, r5, pc}
   8a012:	ea91 0f03 	teq	r1, r3
   8a016:	bf1e      	ittt	ne
   8a018:	2100      	movne	r1, #0
   8a01a:	2000      	movne	r0, #0
   8a01c:	bd30      	popne	{r4, r5, pc}
   8a01e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8a022:	d105      	bne.n	8a030 <__adddf3+0x230>
   8a024:	0040      	lsls	r0, r0, #1
   8a026:	4149      	adcs	r1, r1
   8a028:	bf28      	it	cs
   8a02a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8a02e:	bd30      	pop	{r4, r5, pc}
   8a030:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8a034:	bf3c      	itt	cc
   8a036:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8a03a:	bd30      	popcc	{r4, r5, pc}
   8a03c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a040:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8a044:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8a048:	f04f 0000 	mov.w	r0, #0
   8a04c:	bd30      	pop	{r4, r5, pc}
   8a04e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8a052:	bf1a      	itte	ne
   8a054:	4619      	movne	r1, r3
   8a056:	4610      	movne	r0, r2
   8a058:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8a05c:	bf1c      	itt	ne
   8a05e:	460b      	movne	r3, r1
   8a060:	4602      	movne	r2, r0
   8a062:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8a066:	bf06      	itte	eq
   8a068:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8a06c:	ea91 0f03 	teqeq	r1, r3
   8a070:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8a074:	bd30      	pop	{r4, r5, pc}
   8a076:	bf00      	nop

0008a078 <__aeabi_ui2d>:
   8a078:	f090 0f00 	teq	r0, #0
   8a07c:	bf04      	itt	eq
   8a07e:	2100      	moveq	r1, #0
   8a080:	4770      	bxeq	lr
   8a082:	b530      	push	{r4, r5, lr}
   8a084:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8a088:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8a08c:	f04f 0500 	mov.w	r5, #0
   8a090:	f04f 0100 	mov.w	r1, #0
   8a094:	e750      	b.n	89f38 <__adddf3+0x138>
   8a096:	bf00      	nop

0008a098 <__aeabi_i2d>:
   8a098:	f090 0f00 	teq	r0, #0
   8a09c:	bf04      	itt	eq
   8a09e:	2100      	moveq	r1, #0
   8a0a0:	4770      	bxeq	lr
   8a0a2:	b530      	push	{r4, r5, lr}
   8a0a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8a0a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8a0ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8a0b0:	bf48      	it	mi
   8a0b2:	4240      	negmi	r0, r0
   8a0b4:	f04f 0100 	mov.w	r1, #0
   8a0b8:	e73e      	b.n	89f38 <__adddf3+0x138>
   8a0ba:	bf00      	nop

0008a0bc <__aeabi_f2d>:
   8a0bc:	0042      	lsls	r2, r0, #1
   8a0be:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8a0c2:	ea4f 0131 	mov.w	r1, r1, rrx
   8a0c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8a0ca:	bf1f      	itttt	ne
   8a0cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8a0d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8a0d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8a0d8:	4770      	bxne	lr
   8a0da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8a0de:	bf08      	it	eq
   8a0e0:	4770      	bxeq	lr
   8a0e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8a0e6:	bf04      	itt	eq
   8a0e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8a0ec:	4770      	bxeq	lr
   8a0ee:	b530      	push	{r4, r5, lr}
   8a0f0:	f44f 7460 	mov.w	r4, #896	; 0x380
   8a0f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a0f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8a0fc:	e71c      	b.n	89f38 <__adddf3+0x138>
   8a0fe:	bf00      	nop

0008a100 <__aeabi_ul2d>:
   8a100:	ea50 0201 	orrs.w	r2, r0, r1
   8a104:	bf08      	it	eq
   8a106:	4770      	bxeq	lr
   8a108:	b530      	push	{r4, r5, lr}
   8a10a:	f04f 0500 	mov.w	r5, #0
   8a10e:	e00a      	b.n	8a126 <__aeabi_l2d+0x16>

0008a110 <__aeabi_l2d>:
   8a110:	ea50 0201 	orrs.w	r2, r0, r1
   8a114:	bf08      	it	eq
   8a116:	4770      	bxeq	lr
   8a118:	b530      	push	{r4, r5, lr}
   8a11a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8a11e:	d502      	bpl.n	8a126 <__aeabi_l2d+0x16>
   8a120:	4240      	negs	r0, r0
   8a122:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8a126:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8a12a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8a12e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8a132:	f43f aed8 	beq.w	89ee6 <__adddf3+0xe6>
   8a136:	f04f 0203 	mov.w	r2, #3
   8a13a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8a13e:	bf18      	it	ne
   8a140:	3203      	addne	r2, #3
   8a142:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8a146:	bf18      	it	ne
   8a148:	3203      	addne	r2, #3
   8a14a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8a14e:	f1c2 0320 	rsb	r3, r2, #32
   8a152:	fa00 fc03 	lsl.w	ip, r0, r3
   8a156:	fa20 f002 	lsr.w	r0, r0, r2
   8a15a:	fa01 fe03 	lsl.w	lr, r1, r3
   8a15e:	ea40 000e 	orr.w	r0, r0, lr
   8a162:	fa21 f102 	lsr.w	r1, r1, r2
   8a166:	4414      	add	r4, r2
   8a168:	e6bd      	b.n	89ee6 <__adddf3+0xe6>
   8a16a:	bf00      	nop

0008a16c <__aeabi_dmul>:
   8a16c:	b570      	push	{r4, r5, r6, lr}
   8a16e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8a172:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8a176:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8a17a:	bf1d      	ittte	ne
   8a17c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8a180:	ea94 0f0c 	teqne	r4, ip
   8a184:	ea95 0f0c 	teqne	r5, ip
   8a188:	f000 f8de 	bleq	8a348 <__aeabi_dmul+0x1dc>
   8a18c:	442c      	add	r4, r5
   8a18e:	ea81 0603 	eor.w	r6, r1, r3
   8a192:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8a196:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8a19a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8a19e:	bf18      	it	ne
   8a1a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8a1a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8a1a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8a1ac:	d038      	beq.n	8a220 <__aeabi_dmul+0xb4>
   8a1ae:	fba0 ce02 	umull	ip, lr, r0, r2
   8a1b2:	f04f 0500 	mov.w	r5, #0
   8a1b6:	fbe1 e502 	umlal	lr, r5, r1, r2
   8a1ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8a1be:	fbe0 e503 	umlal	lr, r5, r0, r3
   8a1c2:	f04f 0600 	mov.w	r6, #0
   8a1c6:	fbe1 5603 	umlal	r5, r6, r1, r3
   8a1ca:	f09c 0f00 	teq	ip, #0
   8a1ce:	bf18      	it	ne
   8a1d0:	f04e 0e01 	orrne.w	lr, lr, #1
   8a1d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8a1d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8a1dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8a1e0:	d204      	bcs.n	8a1ec <__aeabi_dmul+0x80>
   8a1e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8a1e6:	416d      	adcs	r5, r5
   8a1e8:	eb46 0606 	adc.w	r6, r6, r6
   8a1ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8a1f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8a1f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8a1f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8a1fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8a200:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8a204:	bf88      	it	hi
   8a206:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8a20a:	d81e      	bhi.n	8a24a <__aeabi_dmul+0xde>
   8a20c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8a210:	bf08      	it	eq
   8a212:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8a216:	f150 0000 	adcs.w	r0, r0, #0
   8a21a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8a21e:	bd70      	pop	{r4, r5, r6, pc}
   8a220:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8a224:	ea46 0101 	orr.w	r1, r6, r1
   8a228:	ea40 0002 	orr.w	r0, r0, r2
   8a22c:	ea81 0103 	eor.w	r1, r1, r3
   8a230:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8a234:	bfc2      	ittt	gt
   8a236:	ebd4 050c 	rsbsgt	r5, r4, ip
   8a23a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8a23e:	bd70      	popgt	{r4, r5, r6, pc}
   8a240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8a244:	f04f 0e00 	mov.w	lr, #0
   8a248:	3c01      	subs	r4, #1
   8a24a:	f300 80ab 	bgt.w	8a3a4 <__aeabi_dmul+0x238>
   8a24e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8a252:	bfde      	ittt	le
   8a254:	2000      	movle	r0, #0
   8a256:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8a25a:	bd70      	pople	{r4, r5, r6, pc}
   8a25c:	f1c4 0400 	rsb	r4, r4, #0
   8a260:	3c20      	subs	r4, #32
   8a262:	da35      	bge.n	8a2d0 <__aeabi_dmul+0x164>
   8a264:	340c      	adds	r4, #12
   8a266:	dc1b      	bgt.n	8a2a0 <__aeabi_dmul+0x134>
   8a268:	f104 0414 	add.w	r4, r4, #20
   8a26c:	f1c4 0520 	rsb	r5, r4, #32
   8a270:	fa00 f305 	lsl.w	r3, r0, r5
   8a274:	fa20 f004 	lsr.w	r0, r0, r4
   8a278:	fa01 f205 	lsl.w	r2, r1, r5
   8a27c:	ea40 0002 	orr.w	r0, r0, r2
   8a280:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8a284:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8a288:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8a28c:	fa21 f604 	lsr.w	r6, r1, r4
   8a290:	eb42 0106 	adc.w	r1, r2, r6
   8a294:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8a298:	bf08      	it	eq
   8a29a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8a29e:	bd70      	pop	{r4, r5, r6, pc}
   8a2a0:	f1c4 040c 	rsb	r4, r4, #12
   8a2a4:	f1c4 0520 	rsb	r5, r4, #32
   8a2a8:	fa00 f304 	lsl.w	r3, r0, r4
   8a2ac:	fa20 f005 	lsr.w	r0, r0, r5
   8a2b0:	fa01 f204 	lsl.w	r2, r1, r4
   8a2b4:	ea40 0002 	orr.w	r0, r0, r2
   8a2b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8a2bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8a2c0:	f141 0100 	adc.w	r1, r1, #0
   8a2c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8a2c8:	bf08      	it	eq
   8a2ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8a2ce:	bd70      	pop	{r4, r5, r6, pc}
   8a2d0:	f1c4 0520 	rsb	r5, r4, #32
   8a2d4:	fa00 f205 	lsl.w	r2, r0, r5
   8a2d8:	ea4e 0e02 	orr.w	lr, lr, r2
   8a2dc:	fa20 f304 	lsr.w	r3, r0, r4
   8a2e0:	fa01 f205 	lsl.w	r2, r1, r5
   8a2e4:	ea43 0302 	orr.w	r3, r3, r2
   8a2e8:	fa21 f004 	lsr.w	r0, r1, r4
   8a2ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8a2f0:	fa21 f204 	lsr.w	r2, r1, r4
   8a2f4:	ea20 0002 	bic.w	r0, r0, r2
   8a2f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8a2fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8a300:	bf08      	it	eq
   8a302:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8a306:	bd70      	pop	{r4, r5, r6, pc}
   8a308:	f094 0f00 	teq	r4, #0
   8a30c:	d10f      	bne.n	8a32e <__aeabi_dmul+0x1c2>
   8a30e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8a312:	0040      	lsls	r0, r0, #1
   8a314:	eb41 0101 	adc.w	r1, r1, r1
   8a318:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8a31c:	bf08      	it	eq
   8a31e:	3c01      	subeq	r4, #1
   8a320:	d0f7      	beq.n	8a312 <__aeabi_dmul+0x1a6>
   8a322:	ea41 0106 	orr.w	r1, r1, r6
   8a326:	f095 0f00 	teq	r5, #0
   8a32a:	bf18      	it	ne
   8a32c:	4770      	bxne	lr
   8a32e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8a332:	0052      	lsls	r2, r2, #1
   8a334:	eb43 0303 	adc.w	r3, r3, r3
   8a338:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8a33c:	bf08      	it	eq
   8a33e:	3d01      	subeq	r5, #1
   8a340:	d0f7      	beq.n	8a332 <__aeabi_dmul+0x1c6>
   8a342:	ea43 0306 	orr.w	r3, r3, r6
   8a346:	4770      	bx	lr
   8a348:	ea94 0f0c 	teq	r4, ip
   8a34c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8a350:	bf18      	it	ne
   8a352:	ea95 0f0c 	teqne	r5, ip
   8a356:	d00c      	beq.n	8a372 <__aeabi_dmul+0x206>
   8a358:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8a35c:	bf18      	it	ne
   8a35e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8a362:	d1d1      	bne.n	8a308 <__aeabi_dmul+0x19c>
   8a364:	ea81 0103 	eor.w	r1, r1, r3
   8a368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8a36c:	f04f 0000 	mov.w	r0, #0
   8a370:	bd70      	pop	{r4, r5, r6, pc}
   8a372:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8a376:	bf06      	itte	eq
   8a378:	4610      	moveq	r0, r2
   8a37a:	4619      	moveq	r1, r3
   8a37c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8a380:	d019      	beq.n	8a3b6 <__aeabi_dmul+0x24a>
   8a382:	ea94 0f0c 	teq	r4, ip
   8a386:	d102      	bne.n	8a38e <__aeabi_dmul+0x222>
   8a388:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8a38c:	d113      	bne.n	8a3b6 <__aeabi_dmul+0x24a>
   8a38e:	ea95 0f0c 	teq	r5, ip
   8a392:	d105      	bne.n	8a3a0 <__aeabi_dmul+0x234>
   8a394:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8a398:	bf1c      	itt	ne
   8a39a:	4610      	movne	r0, r2
   8a39c:	4619      	movne	r1, r3
   8a39e:	d10a      	bne.n	8a3b6 <__aeabi_dmul+0x24a>
   8a3a0:	ea81 0103 	eor.w	r1, r1, r3
   8a3a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8a3a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8a3ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8a3b0:	f04f 0000 	mov.w	r0, #0
   8a3b4:	bd70      	pop	{r4, r5, r6, pc}
   8a3b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8a3ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8a3be:	bd70      	pop	{r4, r5, r6, pc}

0008a3c0 <__aeabi_ddiv>:
   8a3c0:	b570      	push	{r4, r5, r6, lr}
   8a3c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8a3c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8a3ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8a3ce:	bf1d      	ittte	ne
   8a3d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8a3d4:	ea94 0f0c 	teqne	r4, ip
   8a3d8:	ea95 0f0c 	teqne	r5, ip
   8a3dc:	f000 f8a7 	bleq	8a52e <__aeabi_ddiv+0x16e>
   8a3e0:	eba4 0405 	sub.w	r4, r4, r5
   8a3e4:	ea81 0e03 	eor.w	lr, r1, r3
   8a3e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8a3ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8a3f0:	f000 8088 	beq.w	8a504 <__aeabi_ddiv+0x144>
   8a3f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8a3f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8a3fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8a400:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8a404:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8a408:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8a40c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8a410:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8a414:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8a418:	429d      	cmp	r5, r3
   8a41a:	bf08      	it	eq
   8a41c:	4296      	cmpeq	r6, r2
   8a41e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8a422:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8a426:	d202      	bcs.n	8a42e <__aeabi_ddiv+0x6e>
   8a428:	085b      	lsrs	r3, r3, #1
   8a42a:	ea4f 0232 	mov.w	r2, r2, rrx
   8a42e:	1ab6      	subs	r6, r6, r2
   8a430:	eb65 0503 	sbc.w	r5, r5, r3
   8a434:	085b      	lsrs	r3, r3, #1
   8a436:	ea4f 0232 	mov.w	r2, r2, rrx
   8a43a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8a43e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8a442:	ebb6 0e02 	subs.w	lr, r6, r2
   8a446:	eb75 0e03 	sbcs.w	lr, r5, r3
   8a44a:	bf22      	ittt	cs
   8a44c:	1ab6      	subcs	r6, r6, r2
   8a44e:	4675      	movcs	r5, lr
   8a450:	ea40 000c 	orrcs.w	r0, r0, ip
   8a454:	085b      	lsrs	r3, r3, #1
   8a456:	ea4f 0232 	mov.w	r2, r2, rrx
   8a45a:	ebb6 0e02 	subs.w	lr, r6, r2
   8a45e:	eb75 0e03 	sbcs.w	lr, r5, r3
   8a462:	bf22      	ittt	cs
   8a464:	1ab6      	subcs	r6, r6, r2
   8a466:	4675      	movcs	r5, lr
   8a468:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8a46c:	085b      	lsrs	r3, r3, #1
   8a46e:	ea4f 0232 	mov.w	r2, r2, rrx
   8a472:	ebb6 0e02 	subs.w	lr, r6, r2
   8a476:	eb75 0e03 	sbcs.w	lr, r5, r3
   8a47a:	bf22      	ittt	cs
   8a47c:	1ab6      	subcs	r6, r6, r2
   8a47e:	4675      	movcs	r5, lr
   8a480:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8a484:	085b      	lsrs	r3, r3, #1
   8a486:	ea4f 0232 	mov.w	r2, r2, rrx
   8a48a:	ebb6 0e02 	subs.w	lr, r6, r2
   8a48e:	eb75 0e03 	sbcs.w	lr, r5, r3
   8a492:	bf22      	ittt	cs
   8a494:	1ab6      	subcs	r6, r6, r2
   8a496:	4675      	movcs	r5, lr
   8a498:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8a49c:	ea55 0e06 	orrs.w	lr, r5, r6
   8a4a0:	d018      	beq.n	8a4d4 <__aeabi_ddiv+0x114>
   8a4a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8a4a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8a4aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8a4ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8a4b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8a4b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8a4ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8a4be:	d1c0      	bne.n	8a442 <__aeabi_ddiv+0x82>
   8a4c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8a4c4:	d10b      	bne.n	8a4de <__aeabi_ddiv+0x11e>
   8a4c6:	ea41 0100 	orr.w	r1, r1, r0
   8a4ca:	f04f 0000 	mov.w	r0, #0
   8a4ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8a4d2:	e7b6      	b.n	8a442 <__aeabi_ddiv+0x82>
   8a4d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8a4d8:	bf04      	itt	eq
   8a4da:	4301      	orreq	r1, r0
   8a4dc:	2000      	moveq	r0, #0
   8a4de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8a4e2:	bf88      	it	hi
   8a4e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8a4e8:	f63f aeaf 	bhi.w	8a24a <__aeabi_dmul+0xde>
   8a4ec:	ebb5 0c03 	subs.w	ip, r5, r3
   8a4f0:	bf04      	itt	eq
   8a4f2:	ebb6 0c02 	subseq.w	ip, r6, r2
   8a4f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8a4fa:	f150 0000 	adcs.w	r0, r0, #0
   8a4fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8a502:	bd70      	pop	{r4, r5, r6, pc}
   8a504:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8a508:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8a50c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8a510:	bfc2      	ittt	gt
   8a512:	ebd4 050c 	rsbsgt	r5, r4, ip
   8a516:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8a51a:	bd70      	popgt	{r4, r5, r6, pc}
   8a51c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8a520:	f04f 0e00 	mov.w	lr, #0
   8a524:	3c01      	subs	r4, #1
   8a526:	e690      	b.n	8a24a <__aeabi_dmul+0xde>
   8a528:	ea45 0e06 	orr.w	lr, r5, r6
   8a52c:	e68d      	b.n	8a24a <__aeabi_dmul+0xde>
   8a52e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8a532:	ea94 0f0c 	teq	r4, ip
   8a536:	bf08      	it	eq
   8a538:	ea95 0f0c 	teqeq	r5, ip
   8a53c:	f43f af3b 	beq.w	8a3b6 <__aeabi_dmul+0x24a>
   8a540:	ea94 0f0c 	teq	r4, ip
   8a544:	d10a      	bne.n	8a55c <__aeabi_ddiv+0x19c>
   8a546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8a54a:	f47f af34 	bne.w	8a3b6 <__aeabi_dmul+0x24a>
   8a54e:	ea95 0f0c 	teq	r5, ip
   8a552:	f47f af25 	bne.w	8a3a0 <__aeabi_dmul+0x234>
   8a556:	4610      	mov	r0, r2
   8a558:	4619      	mov	r1, r3
   8a55a:	e72c      	b.n	8a3b6 <__aeabi_dmul+0x24a>
   8a55c:	ea95 0f0c 	teq	r5, ip
   8a560:	d106      	bne.n	8a570 <__aeabi_ddiv+0x1b0>
   8a562:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8a566:	f43f aefd 	beq.w	8a364 <__aeabi_dmul+0x1f8>
   8a56a:	4610      	mov	r0, r2
   8a56c:	4619      	mov	r1, r3
   8a56e:	e722      	b.n	8a3b6 <__aeabi_dmul+0x24a>
   8a570:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8a574:	bf18      	it	ne
   8a576:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8a57a:	f47f aec5 	bne.w	8a308 <__aeabi_dmul+0x19c>
   8a57e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8a582:	f47f af0d 	bne.w	8a3a0 <__aeabi_dmul+0x234>
   8a586:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8a58a:	f47f aeeb 	bne.w	8a364 <__aeabi_dmul+0x1f8>
   8a58e:	e712      	b.n	8a3b6 <__aeabi_dmul+0x24a>

0008a590 <__gedf2>:
   8a590:	f04f 3cff 	mov.w	ip, #4294967295
   8a594:	e006      	b.n	8a5a4 <__cmpdf2+0x4>
   8a596:	bf00      	nop

0008a598 <__ledf2>:
   8a598:	f04f 0c01 	mov.w	ip, #1
   8a59c:	e002      	b.n	8a5a4 <__cmpdf2+0x4>
   8a59e:	bf00      	nop

0008a5a0 <__cmpdf2>:
   8a5a0:	f04f 0c01 	mov.w	ip, #1
   8a5a4:	f84d cd04 	str.w	ip, [sp, #-4]!
   8a5a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8a5ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a5b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8a5b4:	bf18      	it	ne
   8a5b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8a5ba:	d01b      	beq.n	8a5f4 <__cmpdf2+0x54>
   8a5bc:	b001      	add	sp, #4
   8a5be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8a5c2:	bf0c      	ite	eq
   8a5c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8a5c8:	ea91 0f03 	teqne	r1, r3
   8a5cc:	bf02      	ittt	eq
   8a5ce:	ea90 0f02 	teqeq	r0, r2
   8a5d2:	2000      	moveq	r0, #0
   8a5d4:	4770      	bxeq	lr
   8a5d6:	f110 0f00 	cmn.w	r0, #0
   8a5da:	ea91 0f03 	teq	r1, r3
   8a5de:	bf58      	it	pl
   8a5e0:	4299      	cmppl	r1, r3
   8a5e2:	bf08      	it	eq
   8a5e4:	4290      	cmpeq	r0, r2
   8a5e6:	bf2c      	ite	cs
   8a5e8:	17d8      	asrcs	r0, r3, #31
   8a5ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8a5ee:	f040 0001 	orr.w	r0, r0, #1
   8a5f2:	4770      	bx	lr
   8a5f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8a5f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a5fc:	d102      	bne.n	8a604 <__cmpdf2+0x64>
   8a5fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8a602:	d107      	bne.n	8a614 <__cmpdf2+0x74>
   8a604:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8a608:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a60c:	d1d6      	bne.n	8a5bc <__cmpdf2+0x1c>
   8a60e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8a612:	d0d3      	beq.n	8a5bc <__cmpdf2+0x1c>
   8a614:	f85d 0b04 	ldr.w	r0, [sp], #4
   8a618:	4770      	bx	lr
   8a61a:	bf00      	nop

0008a61c <__aeabi_cdrcmple>:
   8a61c:	4684      	mov	ip, r0
   8a61e:	4610      	mov	r0, r2
   8a620:	4662      	mov	r2, ip
   8a622:	468c      	mov	ip, r1
   8a624:	4619      	mov	r1, r3
   8a626:	4663      	mov	r3, ip
   8a628:	e000      	b.n	8a62c <__aeabi_cdcmpeq>
   8a62a:	bf00      	nop

0008a62c <__aeabi_cdcmpeq>:
   8a62c:	b501      	push	{r0, lr}
   8a62e:	f7ff ffb7 	bl	8a5a0 <__cmpdf2>
   8a632:	2800      	cmp	r0, #0
   8a634:	bf48      	it	mi
   8a636:	f110 0f00 	cmnmi.w	r0, #0
   8a63a:	bd01      	pop	{r0, pc}

0008a63c <__aeabi_dcmpeq>:
   8a63c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a640:	f7ff fff4 	bl	8a62c <__aeabi_cdcmpeq>
   8a644:	bf0c      	ite	eq
   8a646:	2001      	moveq	r0, #1
   8a648:	2000      	movne	r0, #0
   8a64a:	f85d fb08 	ldr.w	pc, [sp], #8
   8a64e:	bf00      	nop

0008a650 <__aeabi_dcmplt>:
   8a650:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a654:	f7ff ffea 	bl	8a62c <__aeabi_cdcmpeq>
   8a658:	bf34      	ite	cc
   8a65a:	2001      	movcc	r0, #1
   8a65c:	2000      	movcs	r0, #0
   8a65e:	f85d fb08 	ldr.w	pc, [sp], #8
   8a662:	bf00      	nop

0008a664 <__aeabi_dcmple>:
   8a664:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a668:	f7ff ffe0 	bl	8a62c <__aeabi_cdcmpeq>
   8a66c:	bf94      	ite	ls
   8a66e:	2001      	movls	r0, #1
   8a670:	2000      	movhi	r0, #0
   8a672:	f85d fb08 	ldr.w	pc, [sp], #8
   8a676:	bf00      	nop

0008a678 <__aeabi_dcmpge>:
   8a678:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a67c:	f7ff ffce 	bl	8a61c <__aeabi_cdrcmple>
   8a680:	bf94      	ite	ls
   8a682:	2001      	movls	r0, #1
   8a684:	2000      	movhi	r0, #0
   8a686:	f85d fb08 	ldr.w	pc, [sp], #8
   8a68a:	bf00      	nop

0008a68c <__aeabi_dcmpgt>:
   8a68c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a690:	f7ff ffc4 	bl	8a61c <__aeabi_cdrcmple>
   8a694:	bf34      	ite	cc
   8a696:	2001      	movcc	r0, #1
   8a698:	2000      	movcs	r0, #0
   8a69a:	f85d fb08 	ldr.w	pc, [sp], #8
   8a69e:	bf00      	nop

0008a6a0 <__aeabi_dcmpun>:
   8a6a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8a6a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a6a8:	d102      	bne.n	8a6b0 <__aeabi_dcmpun+0x10>
   8a6aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8a6ae:	d10a      	bne.n	8a6c6 <__aeabi_dcmpun+0x26>
   8a6b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8a6b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a6b8:	d102      	bne.n	8a6c0 <__aeabi_dcmpun+0x20>
   8a6ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8a6be:	d102      	bne.n	8a6c6 <__aeabi_dcmpun+0x26>
   8a6c0:	f04f 0000 	mov.w	r0, #0
   8a6c4:	4770      	bx	lr
   8a6c6:	f04f 0001 	mov.w	r0, #1
   8a6ca:	4770      	bx	lr

0008a6cc <__aeabi_d2iz>:
   8a6cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8a6d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8a6d4:	d215      	bcs.n	8a702 <__aeabi_d2iz+0x36>
   8a6d6:	d511      	bpl.n	8a6fc <__aeabi_d2iz+0x30>
   8a6d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8a6dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8a6e0:	d912      	bls.n	8a708 <__aeabi_d2iz+0x3c>
   8a6e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8a6e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8a6ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8a6ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8a6f2:	fa23 f002 	lsr.w	r0, r3, r2
   8a6f6:	bf18      	it	ne
   8a6f8:	4240      	negne	r0, r0
   8a6fa:	4770      	bx	lr
   8a6fc:	f04f 0000 	mov.w	r0, #0
   8a700:	4770      	bx	lr
   8a702:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8a706:	d105      	bne.n	8a714 <__aeabi_d2iz+0x48>
   8a708:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8a70c:	bf08      	it	eq
   8a70e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8a712:	4770      	bx	lr
   8a714:	f04f 0000 	mov.w	r0, #0
   8a718:	4770      	bx	lr
   8a71a:	bf00      	nop

0008a71c <__aeabi_uldivmod>:
   8a71c:	b953      	cbnz	r3, 8a734 <__aeabi_uldivmod+0x18>
   8a71e:	b94a      	cbnz	r2, 8a734 <__aeabi_uldivmod+0x18>
   8a720:	2900      	cmp	r1, #0
   8a722:	bf08      	it	eq
   8a724:	2800      	cmpeq	r0, #0
   8a726:	bf1c      	itt	ne
   8a728:	f04f 31ff 	movne.w	r1, #4294967295
   8a72c:	f04f 30ff 	movne.w	r0, #4294967295
   8a730:	f000 b974 	b.w	8aa1c <__aeabi_idiv0>
   8a734:	f1ad 0c08 	sub.w	ip, sp, #8
   8a738:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8a73c:	f000 f806 	bl	8a74c <__udivmoddi4>
   8a740:	f8dd e004 	ldr.w	lr, [sp, #4]
   8a744:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8a748:	b004      	add	sp, #16
   8a74a:	4770      	bx	lr

0008a74c <__udivmoddi4>:
   8a74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8a750:	468c      	mov	ip, r1
   8a752:	4604      	mov	r4, r0
   8a754:	9e08      	ldr	r6, [sp, #32]
   8a756:	2b00      	cmp	r3, #0
   8a758:	d14b      	bne.n	8a7f2 <__udivmoddi4+0xa6>
   8a75a:	428a      	cmp	r2, r1
   8a75c:	4615      	mov	r5, r2
   8a75e:	d967      	bls.n	8a830 <__udivmoddi4+0xe4>
   8a760:	fab2 f282 	clz	r2, r2
   8a764:	b14a      	cbz	r2, 8a77a <__udivmoddi4+0x2e>
   8a766:	f1c2 0720 	rsb	r7, r2, #32
   8a76a:	fa01 f302 	lsl.w	r3, r1, r2
   8a76e:	fa20 f707 	lsr.w	r7, r0, r7
   8a772:	4095      	lsls	r5, r2
   8a774:	ea47 0c03 	orr.w	ip, r7, r3
   8a778:	4094      	lsls	r4, r2
   8a77a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   8a77e:	fbbc f7fe 	udiv	r7, ip, lr
   8a782:	fa1f f885 	uxth.w	r8, r5
   8a786:	fb0e c317 	mls	r3, lr, r7, ip
   8a78a:	fb07 f908 	mul.w	r9, r7, r8
   8a78e:	0c21      	lsrs	r1, r4, #16
   8a790:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   8a794:	4599      	cmp	r9, r3
   8a796:	d909      	bls.n	8a7ac <__udivmoddi4+0x60>
   8a798:	18eb      	adds	r3, r5, r3
   8a79a:	f107 31ff 	add.w	r1, r7, #4294967295
   8a79e:	f080 811c 	bcs.w	8a9da <__udivmoddi4+0x28e>
   8a7a2:	4599      	cmp	r9, r3
   8a7a4:	f240 8119 	bls.w	8a9da <__udivmoddi4+0x28e>
   8a7a8:	3f02      	subs	r7, #2
   8a7aa:	442b      	add	r3, r5
   8a7ac:	eba3 0309 	sub.w	r3, r3, r9
   8a7b0:	fbb3 f0fe 	udiv	r0, r3, lr
   8a7b4:	fb0e 3310 	mls	r3, lr, r0, r3
   8a7b8:	fb00 f108 	mul.w	r1, r0, r8
   8a7bc:	b2a4      	uxth	r4, r4
   8a7be:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   8a7c2:	42a1      	cmp	r1, r4
   8a7c4:	d909      	bls.n	8a7da <__udivmoddi4+0x8e>
   8a7c6:	192c      	adds	r4, r5, r4
   8a7c8:	f100 33ff 	add.w	r3, r0, #4294967295
   8a7cc:	f080 8107 	bcs.w	8a9de <__udivmoddi4+0x292>
   8a7d0:	42a1      	cmp	r1, r4
   8a7d2:	f240 8104 	bls.w	8a9de <__udivmoddi4+0x292>
   8a7d6:	3802      	subs	r0, #2
   8a7d8:	442c      	add	r4, r5
   8a7da:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   8a7de:	2700      	movs	r7, #0
   8a7e0:	1a64      	subs	r4, r4, r1
   8a7e2:	b11e      	cbz	r6, 8a7ec <__udivmoddi4+0xa0>
   8a7e4:	2300      	movs	r3, #0
   8a7e6:	40d4      	lsrs	r4, r2
   8a7e8:	e9c6 4300 	strd	r4, r3, [r6]
   8a7ec:	4639      	mov	r1, r7
   8a7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8a7f2:	428b      	cmp	r3, r1
   8a7f4:	d909      	bls.n	8a80a <__udivmoddi4+0xbe>
   8a7f6:	2e00      	cmp	r6, #0
   8a7f8:	f000 80ec 	beq.w	8a9d4 <__udivmoddi4+0x288>
   8a7fc:	2700      	movs	r7, #0
   8a7fe:	e9c6 0100 	strd	r0, r1, [r6]
   8a802:	4638      	mov	r0, r7
   8a804:	4639      	mov	r1, r7
   8a806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8a80a:	fab3 f783 	clz	r7, r3
   8a80e:	2f00      	cmp	r7, #0
   8a810:	d148      	bne.n	8a8a4 <__udivmoddi4+0x158>
   8a812:	428b      	cmp	r3, r1
   8a814:	d302      	bcc.n	8a81c <__udivmoddi4+0xd0>
   8a816:	4282      	cmp	r2, r0
   8a818:	f200 80fb 	bhi.w	8aa12 <__udivmoddi4+0x2c6>
   8a81c:	1a84      	subs	r4, r0, r2
   8a81e:	eb61 0303 	sbc.w	r3, r1, r3
   8a822:	2001      	movs	r0, #1
   8a824:	469c      	mov	ip, r3
   8a826:	2e00      	cmp	r6, #0
   8a828:	d0e0      	beq.n	8a7ec <__udivmoddi4+0xa0>
   8a82a:	e9c6 4c00 	strd	r4, ip, [r6]
   8a82e:	e7dd      	b.n	8a7ec <__udivmoddi4+0xa0>
   8a830:	b902      	cbnz	r2, 8a834 <__udivmoddi4+0xe8>
   8a832:	deff      	udf	#255	; 0xff
   8a834:	fab2 f282 	clz	r2, r2
   8a838:	2a00      	cmp	r2, #0
   8a83a:	f040 808f 	bne.w	8a95c <__udivmoddi4+0x210>
   8a83e:	2701      	movs	r7, #1
   8a840:	1b49      	subs	r1, r1, r5
   8a842:	ea4f 4815 	mov.w	r8, r5, lsr #16
   8a846:	fa1f f985 	uxth.w	r9, r5
   8a84a:	fbb1 fef8 	udiv	lr, r1, r8
   8a84e:	fb08 111e 	mls	r1, r8, lr, r1
   8a852:	fb09 f00e 	mul.w	r0, r9, lr
   8a856:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   8a85a:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
   8a85e:	4298      	cmp	r0, r3
   8a860:	d907      	bls.n	8a872 <__udivmoddi4+0x126>
   8a862:	18eb      	adds	r3, r5, r3
   8a864:	f10e 31ff 	add.w	r1, lr, #4294967295
   8a868:	d202      	bcs.n	8a870 <__udivmoddi4+0x124>
   8a86a:	4298      	cmp	r0, r3
   8a86c:	f200 80cd 	bhi.w	8aa0a <__udivmoddi4+0x2be>
   8a870:	468e      	mov	lr, r1
   8a872:	1a1b      	subs	r3, r3, r0
   8a874:	fbb3 f0f8 	udiv	r0, r3, r8
   8a878:	fb08 3310 	mls	r3, r8, r0, r3
   8a87c:	fb09 f900 	mul.w	r9, r9, r0
   8a880:	b2a4      	uxth	r4, r4
   8a882:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   8a886:	45a1      	cmp	r9, r4
   8a888:	d907      	bls.n	8a89a <__udivmoddi4+0x14e>
   8a88a:	192c      	adds	r4, r5, r4
   8a88c:	f100 33ff 	add.w	r3, r0, #4294967295
   8a890:	d202      	bcs.n	8a898 <__udivmoddi4+0x14c>
   8a892:	45a1      	cmp	r9, r4
   8a894:	f200 80b6 	bhi.w	8aa04 <__udivmoddi4+0x2b8>
   8a898:	4618      	mov	r0, r3
   8a89a:	eba4 0409 	sub.w	r4, r4, r9
   8a89e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
   8a8a2:	e79e      	b.n	8a7e2 <__udivmoddi4+0x96>
   8a8a4:	f1c7 0520 	rsb	r5, r7, #32
   8a8a8:	40bb      	lsls	r3, r7
   8a8aa:	fa22 fc05 	lsr.w	ip, r2, r5
   8a8ae:	ea4c 0c03 	orr.w	ip, ip, r3
   8a8b2:	fa21 f405 	lsr.w	r4, r1, r5
   8a8b6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   8a8ba:	fbb4 f9fe 	udiv	r9, r4, lr
   8a8be:	fa1f f88c 	uxth.w	r8, ip
   8a8c2:	fb0e 4419 	mls	r4, lr, r9, r4
   8a8c6:	fa20 f305 	lsr.w	r3, r0, r5
   8a8ca:	40b9      	lsls	r1, r7
   8a8cc:	fb09 fa08 	mul.w	sl, r9, r8
   8a8d0:	4319      	orrs	r1, r3
   8a8d2:	0c0b      	lsrs	r3, r1, #16
   8a8d4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   8a8d8:	45a2      	cmp	sl, r4
   8a8da:	fa02 f207 	lsl.w	r2, r2, r7
   8a8de:	fa00 f307 	lsl.w	r3, r0, r7
   8a8e2:	d90b      	bls.n	8a8fc <__udivmoddi4+0x1b0>
   8a8e4:	eb1c 0404 	adds.w	r4, ip, r4
   8a8e8:	f109 30ff 	add.w	r0, r9, #4294967295
   8a8ec:	f080 8088 	bcs.w	8aa00 <__udivmoddi4+0x2b4>
   8a8f0:	45a2      	cmp	sl, r4
   8a8f2:	f240 8085 	bls.w	8aa00 <__udivmoddi4+0x2b4>
   8a8f6:	f1a9 0902 	sub.w	r9, r9, #2
   8a8fa:	4464      	add	r4, ip
   8a8fc:	eba4 040a 	sub.w	r4, r4, sl
   8a900:	fbb4 f0fe 	udiv	r0, r4, lr
   8a904:	fb0e 4410 	mls	r4, lr, r0, r4
   8a908:	fb00 fa08 	mul.w	sl, r0, r8
   8a90c:	b289      	uxth	r1, r1
   8a90e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
   8a912:	45a2      	cmp	sl, r4
   8a914:	d908      	bls.n	8a928 <__udivmoddi4+0x1dc>
   8a916:	eb1c 0404 	adds.w	r4, ip, r4
   8a91a:	f100 31ff 	add.w	r1, r0, #4294967295
   8a91e:	d26b      	bcs.n	8a9f8 <__udivmoddi4+0x2ac>
   8a920:	45a2      	cmp	sl, r4
   8a922:	d969      	bls.n	8a9f8 <__udivmoddi4+0x2ac>
   8a924:	3802      	subs	r0, #2
   8a926:	4464      	add	r4, ip
   8a928:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8a92c:	fba0 8902 	umull	r8, r9, r0, r2
   8a930:	eba4 040a 	sub.w	r4, r4, sl
   8a934:	454c      	cmp	r4, r9
   8a936:	4641      	mov	r1, r8
   8a938:	46ce      	mov	lr, r9
   8a93a:	d354      	bcc.n	8a9e6 <__udivmoddi4+0x29a>
   8a93c:	d051      	beq.n	8a9e2 <__udivmoddi4+0x296>
   8a93e:	2e00      	cmp	r6, #0
   8a940:	d069      	beq.n	8aa16 <__udivmoddi4+0x2ca>
   8a942:	1a5a      	subs	r2, r3, r1
   8a944:	eb64 040e 	sbc.w	r4, r4, lr
   8a948:	fa04 f505 	lsl.w	r5, r4, r5
   8a94c:	fa22 f307 	lsr.w	r3, r2, r7
   8a950:	40fc      	lsrs	r4, r7
   8a952:	431d      	orrs	r5, r3
   8a954:	e9c6 5400 	strd	r5, r4, [r6]
   8a958:	2700      	movs	r7, #0
   8a95a:	e747      	b.n	8a7ec <__udivmoddi4+0xa0>
   8a95c:	4095      	lsls	r5, r2
   8a95e:	f1c2 0320 	rsb	r3, r2, #32
   8a962:	fa21 f003 	lsr.w	r0, r1, r3
   8a966:	ea4f 4815 	mov.w	r8, r5, lsr #16
   8a96a:	fbb0 f7f8 	udiv	r7, r0, r8
   8a96e:	fa1f f985 	uxth.w	r9, r5
   8a972:	fb08 0017 	mls	r0, r8, r7, r0
   8a976:	fa24 f303 	lsr.w	r3, r4, r3
   8a97a:	4091      	lsls	r1, r2
   8a97c:	fb07 fc09 	mul.w	ip, r7, r9
   8a980:	430b      	orrs	r3, r1
   8a982:	0c19      	lsrs	r1, r3, #16
   8a984:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   8a988:	458c      	cmp	ip, r1
   8a98a:	fa04 f402 	lsl.w	r4, r4, r2
   8a98e:	d907      	bls.n	8a9a0 <__udivmoddi4+0x254>
   8a990:	1869      	adds	r1, r5, r1
   8a992:	f107 30ff 	add.w	r0, r7, #4294967295
   8a996:	d231      	bcs.n	8a9fc <__udivmoddi4+0x2b0>
   8a998:	458c      	cmp	ip, r1
   8a99a:	d92f      	bls.n	8a9fc <__udivmoddi4+0x2b0>
   8a99c:	3f02      	subs	r7, #2
   8a99e:	4429      	add	r1, r5
   8a9a0:	eba1 010c 	sub.w	r1, r1, ip
   8a9a4:	fbb1 f0f8 	udiv	r0, r1, r8
   8a9a8:	fb08 1c10 	mls	ip, r8, r0, r1
   8a9ac:	fb00 fe09 	mul.w	lr, r0, r9
   8a9b0:	b299      	uxth	r1, r3
   8a9b2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
   8a9b6:	458e      	cmp	lr, r1
   8a9b8:	d907      	bls.n	8a9ca <__udivmoddi4+0x27e>
   8a9ba:	1869      	adds	r1, r5, r1
   8a9bc:	f100 33ff 	add.w	r3, r0, #4294967295
   8a9c0:	d218      	bcs.n	8a9f4 <__udivmoddi4+0x2a8>
   8a9c2:	458e      	cmp	lr, r1
   8a9c4:	d916      	bls.n	8a9f4 <__udivmoddi4+0x2a8>
   8a9c6:	3802      	subs	r0, #2
   8a9c8:	4429      	add	r1, r5
   8a9ca:	eba1 010e 	sub.w	r1, r1, lr
   8a9ce:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   8a9d2:	e73a      	b.n	8a84a <__udivmoddi4+0xfe>
   8a9d4:	4637      	mov	r7, r6
   8a9d6:	4630      	mov	r0, r6
   8a9d8:	e708      	b.n	8a7ec <__udivmoddi4+0xa0>
   8a9da:	460f      	mov	r7, r1
   8a9dc:	e6e6      	b.n	8a7ac <__udivmoddi4+0x60>
   8a9de:	4618      	mov	r0, r3
   8a9e0:	e6fb      	b.n	8a7da <__udivmoddi4+0x8e>
   8a9e2:	4543      	cmp	r3, r8
   8a9e4:	d2ab      	bcs.n	8a93e <__udivmoddi4+0x1f2>
   8a9e6:	ebb8 0102 	subs.w	r1, r8, r2
   8a9ea:	eb69 020c 	sbc.w	r2, r9, ip
   8a9ee:	3801      	subs	r0, #1
   8a9f0:	4696      	mov	lr, r2
   8a9f2:	e7a4      	b.n	8a93e <__udivmoddi4+0x1f2>
   8a9f4:	4618      	mov	r0, r3
   8a9f6:	e7e8      	b.n	8a9ca <__udivmoddi4+0x27e>
   8a9f8:	4608      	mov	r0, r1
   8a9fa:	e795      	b.n	8a928 <__udivmoddi4+0x1dc>
   8a9fc:	4607      	mov	r7, r0
   8a9fe:	e7cf      	b.n	8a9a0 <__udivmoddi4+0x254>
   8aa00:	4681      	mov	r9, r0
   8aa02:	e77b      	b.n	8a8fc <__udivmoddi4+0x1b0>
   8aa04:	3802      	subs	r0, #2
   8aa06:	442c      	add	r4, r5
   8aa08:	e747      	b.n	8a89a <__udivmoddi4+0x14e>
   8aa0a:	f1ae 0e02 	sub.w	lr, lr, #2
   8aa0e:	442b      	add	r3, r5
   8aa10:	e72f      	b.n	8a872 <__udivmoddi4+0x126>
   8aa12:	4638      	mov	r0, r7
   8aa14:	e707      	b.n	8a826 <__udivmoddi4+0xda>
   8aa16:	4637      	mov	r7, r6
   8aa18:	e6e8      	b.n	8a7ec <__udivmoddi4+0xa0>
   8aa1a:	bf00      	nop

0008aa1c <__aeabi_idiv0>:
   8aa1c:	4770      	bx	lr
   8aa1e:	bf00      	nop
   8aa20:	78383025 	.word	0x78383025
   8aa24:	00000000 	.word	0x00000000
   8aa28:	00000000 	.word	0x00000000
   8aa2c:	00000000 	.word	0x00000000
   8aa30:	aaaaaa00 	.word	0xaaaaaa00
   8aa34:	aaaaaaaa 	.word	0xaaaaaaaa
   8aa38:	eeeeeeaa 	.word	0xeeeeeeaa
   8aa3c:	eeeeeeee 	.word	0xeeeeeeee
   8aa40:	fffffeee 	.word	0xfffffeee
   8aa44:	ffffffff 	.word	0xffffffff
   8aa48:	ffffffff 	.word	0xffffffff
   8aa4c:	dfbf7fff 	.word	0xdfbf7fff
   8aa50:	fdfbf7ef 	.word	0xfdfbf7ef
   8aa54:	dfbf7efc 	.word	0xdfbf7efc
   8aa58:	fdfbf7ef 	.word	0xfdfbf7ef
   8aa5c:	0000007e 	.word	0x0000007e

0008aa60 <_global_impure_ptr>:
   8aa60:	200003b8 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   8aa70:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8aa80:	66656463 00000000 33323130 37363534     cdef....01234567
   8aa90:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8aaa0:	0000296c 00000030                       l)..0...

0008aaa8 <blanks.7315>:
   8aaa8:	20202020 20202020 20202020 20202020                     

0008aab8 <zeroes.7316>:
   8aab8:	30303030 30303030 30303030 30303030     0000000000000000
   8aac8:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   8aad8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0008aae8 <__mprec_bigtens>:
   8aae8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8aaf8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8ab08:	7f73bf3c 75154fdd                       <.s..O.u

0008ab10 <__mprec_tens>:
   8ab10:	00000000 3ff00000 00000000 40240000     .......?......$@
   8ab20:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8ab30:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8ab40:	00000000 412e8480 00000000 416312d0     .......A......cA
   8ab50:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8ab60:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8ab70:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8ab80:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8ab90:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8aba0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8abb0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8abc0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8abd0:	79d99db4 44ea7843                       ...yCx.D

0008abd8 <p05.6092>:
   8abd8:	00000005 00000019 0000007d              ........}...

0008abe4 <_ctype_>:
   8abe4:	20202000 20202020 28282020 20282828     .         ((((( 
   8abf4:	20202020 20202020 20202020 20202020                     
   8ac04:	10108820 10101010 10101010 10101010      ...............
   8ac14:	04040410 04040404 10040404 10101010     ................
   8ac24:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8ac34:	01010101 01010101 01010101 10101010     ................
   8ac44:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8ac54:	02020202 02020202 02020202 10101010     ................
   8ac64:	00000020 00000000 00000000 00000000      ...............
   8ac74:	00000000 00000000 00000000 00000000     ................
   8ac84:	00000000 00000000 00000000 00000000     ................
   8ac94:	00000000 00000000 00000000 00000000     ................
   8aca4:	00000000 00000000 00000000 00000000     ................
   8acb4:	00000000 00000000 00000000 00000000     ................
   8acc4:	00000000 00000000 00000000 00000000     ................
   8acd4:	00000000 00000000 00000000 00000000     ................
   8ace4:	00000000                                ....

0008ace8 <_init>:
   8ace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8acea:	bf00      	nop
   8acec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8acee:	bc08      	pop	{r3}
   8acf0:	469e      	mov	lr, r3
   8acf2:	4770      	bx	lr

0008acf4 <__init_array_start>:
   8acf4:	000877d1 	.word	0x000877d1

0008acf8 <__frame_dummy_init_array_entry>:
   8acf8:	000800e1                                ....

0008acfc <_fini>:
   8acfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8acfe:	bf00      	nop
   8ad00:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8ad02:	bc08      	pop	{r3}
   8ad04:	469e      	mov	lr, r3
   8ad06:	4770      	bx	lr

0008ad08 <__fini_array_start>:
   8ad08:	000800bd 	.word	0x000800bd

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000000e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20000012:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000014:	683b      	ldr	r3, [r7, #0]
20000016:	2b00      	cmp	r3, #0
20000018:	d101      	bne.n	2000001e <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
2000001a:	2302      	movs	r3, #2
2000001c:	e03c      	b.n	20000098 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000001e:	68fb      	ldr	r3, [r7, #12]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000026:	68fb      	ldr	r3, [r7, #12]
20000028:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000002a:	68bb      	ldr	r3, [r7, #8]
2000002c:	b2db      	uxtb	r3, r3
2000002e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000036:	68fb      	ldr	r3, [r7, #12]
20000038:	689b      	ldr	r3, [r3, #8]
2000003a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000003c:	697b      	ldr	r3, [r7, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b01      	cmp	r3, #1
20000044:	d0f7      	beq.n	20000036 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000046:	2300      	movs	r3, #0
20000048:	61fb      	str	r3, [r7, #28]
2000004a:	e00c      	b.n	20000066 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000004c:	69fb      	ldr	r3, [r7, #28]
2000004e:	009b      	lsls	r3, r3, #2
20000050:	69ba      	ldr	r2, [r7, #24]
20000052:	441a      	add	r2, r3
20000054:	69fb      	ldr	r3, [r7, #28]
20000056:	009b      	lsls	r3, r3, #2
20000058:	6839      	ldr	r1, [r7, #0]
2000005a:	440b      	add	r3, r1
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000060:	69fb      	ldr	r3, [r7, #28]
20000062:	3301      	adds	r3, #1
20000064:	61fb      	str	r3, [r7, #28]
20000066:	69fa      	ldr	r2, [r7, #28]
20000068:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000006a:	429a      	cmp	r2, r3
2000006c:	d3ee      	bcc.n	2000004c <efc_perform_read_sequence+0x4c>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000072:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000007a:	68fb      	ldr	r3, [r7, #12]
2000007c:	689b      	ldr	r3, [r3, #8]
2000007e:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	697b      	ldr	r3, [r7, #20]
20000082:	f003 0301 	and.w	r3, r3, #1
20000086:	2b01      	cmp	r3, #1
20000088:	d1f7      	bne.n	2000007a <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
20000096:	2300      	movs	r3, #0
}
20000098:	4618      	mov	r0, r3
2000009a:	3724      	adds	r7, #36	; 0x24
2000009c:	46bd      	mov	sp, r7
2000009e:	bc80      	pop	{r7}
200000a0:	4770      	bx	lr

200000a2 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000a2:	b480      	push	{r7}
200000a4:	b083      	sub	sp, #12
200000a6:	af00      	add	r7, sp, #0
200000a8:	6078      	str	r0, [r7, #4]
200000aa:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	683a      	ldr	r2, [r7, #0]
200000b0:	601a      	str	r2, [r3, #0]
}
200000b2:	bf00      	nop
200000b4:	370c      	adds	r7, #12
200000b6:	46bd      	mov	sp, r7
200000b8:	bc80      	pop	{r7}
200000ba:	4770      	bx	lr

200000bc <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000bc:	b480      	push	{r7}
200000be:	b085      	sub	sp, #20
200000c0:	af00      	add	r7, sp, #0
200000c2:	6078      	str	r0, [r7, #4]
200000c4:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000c6:	687b      	ldr	r3, [r7, #4]
200000c8:	683a      	ldr	r2, [r7, #0]
200000ca:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	689b      	ldr	r3, [r3, #8]
200000d0:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000d2:	68fb      	ldr	r3, [r7, #12]
200000d4:	f003 0301 	and.w	r3, r3, #1
200000d8:	2b01      	cmp	r3, #1
200000da:	d1f7      	bne.n	200000cc <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000dc:	68fb      	ldr	r3, [r7, #12]
200000de:	f003 0306 	and.w	r3, r3, #6
}
200000e2:	4618      	mov	r0, r3
200000e4:	3714      	adds	r7, #20
200000e6:	46bd      	mov	sp, r7
200000e8:	bc80      	pop	{r7}
200000ea:	4770      	bx	lr

200000ec <SystemInit>:
{
200000ec:	b480      	push	{r7}
200000ee:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000f0:	4b2a      	ldr	r3, [pc, #168]	; (2000019c <SystemInit+0xb0>)
200000f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000f6:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000f8:	4b29      	ldr	r3, [pc, #164]	; (200001a0 <SystemInit+0xb4>)
200000fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000fe:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000100:	4b28      	ldr	r3, [pc, #160]	; (200001a4 <SystemInit+0xb8>)
20000102:	6a1b      	ldr	r3, [r3, #32]
20000104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20000108:	2b00      	cmp	r3, #0
2000010a:	d109      	bne.n	20000120 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000010c:	4b25      	ldr	r3, [pc, #148]	; (200001a4 <SystemInit+0xb8>)
2000010e:	4a26      	ldr	r2, [pc, #152]	; (200001a8 <SystemInit+0xbc>)
20000110:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000112:	bf00      	nop
20000114:	4b23      	ldr	r3, [pc, #140]	; (200001a4 <SystemInit+0xb8>)
20000116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000118:	f003 0301 	and.w	r3, r3, #1
2000011c:	2b00      	cmp	r3, #0
2000011e:	d0f9      	beq.n	20000114 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000120:	4b20      	ldr	r3, [pc, #128]	; (200001a4 <SystemInit+0xb8>)
20000122:	4a22      	ldr	r2, [pc, #136]	; (200001ac <SystemInit+0xc0>)
20000124:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000126:	bf00      	nop
20000128:	4b1e      	ldr	r3, [pc, #120]	; (200001a4 <SystemInit+0xb8>)
2000012a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000012c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000130:	2b00      	cmp	r3, #0
20000132:	d0f9      	beq.n	20000128 <SystemInit+0x3c>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000134:	4b1b      	ldr	r3, [pc, #108]	; (200001a4 <SystemInit+0xb8>)
20000136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000138:	f023 0303 	bic.w	r3, r3, #3
2000013c:	4a19      	ldr	r2, [pc, #100]	; (200001a4 <SystemInit+0xb8>)
2000013e:	f043 0301 	orr.w	r3, r3, #1
20000142:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000144:	bf00      	nop
20000146:	4b17      	ldr	r3, [pc, #92]	; (200001a4 <SystemInit+0xb8>)
20000148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000014a:	f003 0308 	and.w	r3, r3, #8
2000014e:	2b00      	cmp	r3, #0
20000150:	d0f9      	beq.n	20000146 <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000152:	4b14      	ldr	r3, [pc, #80]	; (200001a4 <SystemInit+0xb8>)
20000154:	4a16      	ldr	r2, [pc, #88]	; (200001b0 <SystemInit+0xc4>)
20000156:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000158:	bf00      	nop
2000015a:	4b12      	ldr	r3, [pc, #72]	; (200001a4 <SystemInit+0xb8>)
2000015c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000015e:	f003 0302 	and.w	r3, r3, #2
20000162:	2b00      	cmp	r3, #0
20000164:	d0f9      	beq.n	2000015a <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000166:	4b0f      	ldr	r3, [pc, #60]	; (200001a4 <SystemInit+0xb8>)
20000168:	2211      	movs	r2, #17
2000016a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000016c:	bf00      	nop
2000016e:	4b0d      	ldr	r3, [pc, #52]	; (200001a4 <SystemInit+0xb8>)
20000170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000172:	f003 0308 	and.w	r3, r3, #8
20000176:	2b00      	cmp	r3, #0
20000178:	d0f9      	beq.n	2000016e <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000017a:	4b0a      	ldr	r3, [pc, #40]	; (200001a4 <SystemInit+0xb8>)
2000017c:	2212      	movs	r2, #18
2000017e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000180:	bf00      	nop
20000182:	4b08      	ldr	r3, [pc, #32]	; (200001a4 <SystemInit+0xb8>)
20000184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000186:	f003 0308 	and.w	r3, r3, #8
2000018a:	2b00      	cmp	r3, #0
2000018c:	d0f9      	beq.n	20000182 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000018e:	4b09      	ldr	r3, [pc, #36]	; (200001b4 <SystemInit+0xc8>)
20000190:	4a09      	ldr	r2, [pc, #36]	; (200001b8 <SystemInit+0xcc>)
20000192:	601a      	str	r2, [r3, #0]
}
20000194:	bf00      	nop
20000196:	46bd      	mov	sp, r7
20000198:	bc80      	pop	{r7}
2000019a:	4770      	bx	lr
2000019c:	400e0800 	.word	0x400e0800
200001a0:	400e0a00 	.word	0x400e0a00
200001a4:	400e0400 	.word	0x400e0400
200001a8:	00370809 	.word	0x00370809
200001ac:	01370809 	.word	0x01370809
200001b0:	200f3f01 	.word	0x200f3f01
200001b4:	20000298 	.word	0x20000298
200001b8:	05b8d800 	.word	0x05b8d800

200001bc <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200001bc:	b480      	push	{r7}
200001be:	b083      	sub	sp, #12
200001c0:	af00      	add	r7, sp, #0
200001c2:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200001c4:	687b      	ldr	r3, [r7, #4]
200001c6:	4a1f      	ldr	r2, [pc, #124]	; (20000244 <system_init_flash+0x88>)
200001c8:	4293      	cmp	r3, r2
200001ca:	d806      	bhi.n	200001da <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200001cc:	4b1e      	ldr	r3, [pc, #120]	; (20000248 <system_init_flash+0x8c>)
200001ce:	2200      	movs	r2, #0
200001d0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200001d2:	4b1e      	ldr	r3, [pc, #120]	; (2000024c <system_init_flash+0x90>)
200001d4:	2200      	movs	r2, #0
200001d6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
	}
}
200001d8:	e02e      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200001da:	687b      	ldr	r3, [r7, #4]
200001dc:	4a1c      	ldr	r2, [pc, #112]	; (20000250 <system_init_flash+0x94>)
200001de:	4293      	cmp	r3, r2
200001e0:	d808      	bhi.n	200001f4 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200001e2:	4b19      	ldr	r3, [pc, #100]	; (20000248 <system_init_flash+0x8c>)
200001e4:	f44f 7280 	mov.w	r2, #256	; 0x100
200001e8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200001ea:	4b18      	ldr	r3, [pc, #96]	; (2000024c <system_init_flash+0x90>)
200001ec:	f44f 7280 	mov.w	r2, #256	; 0x100
200001f0:	601a      	str	r2, [r3, #0]
}
200001f2:	e021      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200001f4:	687b      	ldr	r3, [r7, #4]
200001f6:	4a17      	ldr	r2, [pc, #92]	; (20000254 <system_init_flash+0x98>)
200001f8:	4293      	cmp	r3, r2
200001fa:	d808      	bhi.n	2000020e <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200001fc:	4b12      	ldr	r3, [pc, #72]	; (20000248 <system_init_flash+0x8c>)
200001fe:	f44f 7200 	mov.w	r2, #512	; 0x200
20000202:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000204:	4b11      	ldr	r3, [pc, #68]	; (2000024c <system_init_flash+0x90>)
20000206:	f44f 7200 	mov.w	r2, #512	; 0x200
2000020a:	601a      	str	r2, [r3, #0]
}
2000020c:	e014      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000020e:	687b      	ldr	r3, [r7, #4]
20000210:	4a11      	ldr	r2, [pc, #68]	; (20000258 <system_init_flash+0x9c>)
20000212:	4293      	cmp	r3, r2
20000214:	d808      	bhi.n	20000228 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000216:	4b0c      	ldr	r3, [pc, #48]	; (20000248 <system_init_flash+0x8c>)
20000218:	f44f 7240 	mov.w	r2, #768	; 0x300
2000021c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <system_init_flash+0x90>)
20000220:	f44f 7240 	mov.w	r2, #768	; 0x300
20000224:	601a      	str	r2, [r3, #0]
}
20000226:	e007      	b.n	20000238 <system_init_flash+0x7c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000228:	4b07      	ldr	r3, [pc, #28]	; (20000248 <system_init_flash+0x8c>)
2000022a:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000022e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000230:	4b06      	ldr	r3, [pc, #24]	; (2000024c <system_init_flash+0x90>)
20000232:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000236:	601a      	str	r2, [r3, #0]
}
20000238:	bf00      	nop
2000023a:	370c      	adds	r7, #12
2000023c:	46bd      	mov	sp, r7
2000023e:	bc80      	pop	{r7}
20000240:	4770      	bx	lr
20000242:	bf00      	nop
20000244:	016e35ff 	.word	0x016e35ff
20000248:	400e0800 	.word	0x400e0800
2000024c:	400e0a00 	.word	0x400e0a00
20000250:	026259ff 	.word	0x026259ff
20000254:	044aa1ff 	.word	0x044aa1ff
20000258:	0501bcff 	.word	0x0501bcff

2000025c <usb_serial_number>:
2000025c:	30303030 30303030 30303030 44414544     000000000000DEAD
2000026c:	46454542 00000000 00000000 00000000     BEEF............
2000027c:	00000000                                ....

20000280 <pwr_list>:
20000280:	000808ad 000808cd 000808ed              ............

2000028c <main_b_vendor_enable>:
2000028c:	00000001                                ....

20000290 <xram>:
20000290:	60000000                                ...`

20000294 <g_interrupt_enabled>:
20000294:	00000001                                ....

20000298 <SystemCoreClock>:
20000298:	003d0900                                ..=.

2000029c <udc_string_desc_languageid>:
2000029c:	04090304                                ....

200002a0 <udc_string_manufacturer_name>:
200002a0:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
200002b0:	636e4920 0000002e                        Inc....

200002b8 <udc_string_product_name>:
200002b8:	57796850 70736968 72657265 4253552d     PhyWhisperer-USB
200002c8:	00000000                                ....

200002cc <udc_string_desc>:
200002cc:	00000300 00000000 00000000 00000000     ................
200002dc:	00000000 00000000 00000000 00000000     ................
200002ec:	00000000 00000000 00000000 00000000     ................
200002fc:	00000000 00000000 00000000 00000000     ................
2000030c:	00000000                                ....

20000310 <udi_api_vendor>:
20000310:	00083bc9 00083c09 00083c25 00083c79     .;...<..%<..y<..
20000320:	00000000                                ....

20000324 <udc_device_desc>:
20000324:	02000112 40000000 c6102b3e 02010100     .......@>+......
20000334:	00000103                                ....

20000338 <udc_device_qual>:
20000338:	0200060a 40000000 00000001              .......@....

20000344 <udc_desc_fs>:
20000344:	00200209 80000101 000409fa ffff0200     .. .............
20000354:	050700ff 00400281 02050700 00004002     ......@......@..

20000364 <udc_desc_hs>:
20000364:	00200209 80000101 000409fa ffff0200     .. .............
20000374:	050700ff 02000281 02050700 00020002     ................

20000384 <udi_apis>:
20000384:	20000310                                ... 

20000388 <udc_config_lsfs>:
20000388:	20000344 20000384                       D.. ... 

20000390 <udc_config_hs>:
20000390:	20000364 20000384                       d.. ... 

20000398 <udc_config>:
20000398:	20000324 20000388 20000324 20000338     $.. ... $.. 8.. 
200003a8:	20000390 00000000                       ... ....

200003b0 <_impure_ptr>:
200003b0:	200003b8 00000000                       ... ....

200003b8 <impure_data>:
200003b8:	00000000 200006a4 2000070c 20000774     ....... ... t.. 
200003c8:	00000000 00000000 00000000 00000000     ................
200003d8:	00000000 00000000 00000000 00000000     ................
200003e8:	00000000 00000000 00000000 00000000     ................
200003f8:	00000000 00000000 00000000 00000000     ................
20000408:	00000000 00000000 00000000 00000000     ................
20000418:	00000000 00000000 00000000 00000000     ................
20000428:	00000000 00000000 00000000 00000000     ................
20000438:	00000000 00000000 00000000 00000000     ................
20000448:	00000000 00000000 00000000 00000000     ................
20000458:	00000000 00000000 00000001 00000000     ................
20000468:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
20000478:	00000000 00000000 00000000 00000000     ................
20000488:	00000000 00000000 00000000 00000000     ................
20000498:	00000000 00000000 00000000 00000000     ................
200004a8:	00000000 00000000 00000000 00000000     ................
200004b8:	00000000 00000000 00000000 00000000     ................
200004c8:	00000000 00000000 00000000 00000000     ................
200004d8:	00000000 00000000 00000000 00000000     ................
200004e8:	00000000 00000000 00000000 00000000     ................
200004f8:	00000000 00000000 00000000 00000000     ................
20000508:	00000000 00000000 00000000 00000000     ................
20000518:	00000000 00000000 00000000 00000000     ................
20000528:	00000000 00000000 00000000 00000000     ................
20000538:	00000000 00000000 00000000 00000000     ................
20000548:	00000000 00000000 00000000 00000000     ................
20000558:	00000000 00000000 00000000 00000000     ................
20000568:	00000000 00000000 00000000 00000000     ................
20000578:	00000000 00000000 00000000 00000000     ................
20000588:	00000000 00000000 00000000 00000000     ................
20000598:	00000000 00000000 00000000 00000000     ................
200005a8:	00000000 00000000 00000000 00000000     ................
200005b8:	00000000 00000000 00000000 00000000     ................
200005c8:	00000000 00000000 00000000 00000000     ................
200005d8:	00000000 00000000 00000000 00000000     ................
200005e8:	00000000 00000000 00000000 00000000     ................
200005f8:	00000000 00000000 00000000 00000000     ................
20000608:	00000000 00000000 00000000 00000000     ................
20000618:	00000000 00000000 00000000 00000000     ................
20000628:	00000000 00000000 00000000 00000000     ................
20000638:	00000000 00000000 00000000 00000000     ................
20000648:	00000000 00000000 00000000 00000000     ................
20000658:	00000000 00000000 00000000 00000000     ................
20000668:	00000000 00000000 00000000 00000000     ................
20000678:	00000000 00000000 00000000 00000000     ................
20000688:	00000000 00000000 00000000 00000000     ................
20000698:	00000000 00000000 00000000 00000000     ................
200006a8:	00000000 00000000 00000000 00000000     ................
200006b8:	00000000 00000000 00000000 00000000     ................
200006c8:	00000000 00000000 00000000 00000000     ................
200006d8:	00000000 00000000 00000000 00000000     ................
200006e8:	00000000 00000000 00000000 00000000     ................
200006f8:	00000000 00000000 00000000 00000000     ................
20000708:	00000000 00000000 00000000 00000000     ................
20000718:	00000000 00000000 00000000 00000000     ................
20000728:	00000000 00000000 00000000 00000000     ................
20000738:	00000000 00000000 00000000 00000000     ................
20000748:	00000000 00000000 00000000 00000000     ................
20000758:	00000000 00000000 00000000 00000000     ................
20000768:	00000000 00000000 00000000 00000000     ................
20000778:	00000000 00000000 00000000 00000000     ................
20000788:	00000000 00000000 00000000 00000000     ................
20000798:	00000000 00000000 00000000 00000000     ................
200007a8:	00000000 00000000 00000000 00000000     ................
200007b8:	00000000 00000000 00000000 00000000     ................
200007c8:	00000000 00000000 00000000 00000000     ................
200007d8:	00000000 00000000                       ........

200007e0 <__atexit_recursive_mutex>:
200007e0:	20001338                                8.. 

200007e4 <__global_locale>:
200007e4:	00000043 00000000 00000000 00000000     C...............
200007f4:	00000000 00000000 00000000 00000000     ................
20000804:	00000043 00000000 00000000 00000000     C...............
20000814:	00000000 00000000 00000000 00000000     ................
20000824:	00000043 00000000 00000000 00000000     C...............
20000834:	00000000 00000000 00000000 00000000     ................
20000844:	00000043 00000000 00000000 00000000     C...............
20000854:	00000000 00000000 00000000 00000000     ................
20000864:	00000043 00000000 00000000 00000000     C...............
20000874:	00000000 00000000 00000000 00000000     ................
20000884:	00000043 00000000 00000000 00000000     C...............
20000894:	00000000 00000000 00000000 00000000     ................
200008a4:	00000043 00000000 00000000 00000000     C...............
200008b4:	00000000 00000000 00000000 00000000     ................
200008c4:	00089cb1 00088f4d 00000000 0008abe4     ....M...........
200008d4:	0008aae4 0008aa98 0008aa98 0008aa98     ................
200008e4:	0008aa98 0008aa98 0008aa98 0008aa98     ................
200008f4:	0008aa98 0008aa98 ffffffff ffffffff     ................
20000904:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
20000914:	00000000 00000000 00000000 00000000     ................
20000924:	00000000 00000000 53410000 00494943     ..........ASCII.
20000934:	00000000 00000000 00000000 00000000     ................
20000944:	00000000 00000000 00000000              ............

20000950 <__malloc_av_>:
20000950:	00000000 00000000 20000950 20000950     ........P.. P.. 
20000960:	20000958 20000958 20000960 20000960     X.. X.. `.. `.. 
20000970:	20000968 20000968 20000970 20000970     h.. h.. p.. p.. 
20000980:	20000978 20000978 20000980 20000980     x.. x.. ... ... 
20000990:	20000988 20000988 20000990 20000990     ... ... ... ... 
200009a0:	20000998 20000998 200009a0 200009a0     ... ... ... ... 
200009b0:	200009a8 200009a8 200009b0 200009b0     ... ... ... ... 
200009c0:	200009b8 200009b8 200009c0 200009c0     ... ... ... ... 
200009d0:	200009c8 200009c8 200009d0 200009d0     ... ... ... ... 
200009e0:	200009d8 200009d8 200009e0 200009e0     ... ... ... ... 
200009f0:	200009e8 200009e8 200009f0 200009f0     ... ... ... ... 
20000a00:	200009f8 200009f8 20000a00 20000a00     ... ... ... ... 
20000a10:	20000a08 20000a08 20000a10 20000a10     ... ... ... ... 
20000a20:	20000a18 20000a18 20000a20 20000a20     ... ...  ..  .. 
20000a30:	20000a28 20000a28 20000a30 20000a30     (.. (.. 0.. 0.. 
20000a40:	20000a38 20000a38 20000a40 20000a40     8.. 8.. @.. @.. 
20000a50:	20000a48 20000a48 20000a50 20000a50     H.. H.. P.. P.. 
20000a60:	20000a58 20000a58 20000a60 20000a60     X.. X.. `.. `.. 
20000a70:	20000a68 20000a68 20000a70 20000a70     h.. h.. p.. p.. 
20000a80:	20000a78 20000a78 20000a80 20000a80     x.. x.. ... ... 
20000a90:	20000a88 20000a88 20000a90 20000a90     ... ... ... ... 
20000aa0:	20000a98 20000a98 20000aa0 20000aa0     ... ... ... ... 
20000ab0:	20000aa8 20000aa8 20000ab0 20000ab0     ... ... ... ... 
20000ac0:	20000ab8 20000ab8 20000ac0 20000ac0     ... ... ... ... 
20000ad0:	20000ac8 20000ac8 20000ad0 20000ad0     ... ... ... ... 
20000ae0:	20000ad8 20000ad8 20000ae0 20000ae0     ... ... ... ... 
20000af0:	20000ae8 20000ae8 20000af0 20000af0     ... ... ... ... 
20000b00:	20000af8 20000af8 20000b00 20000b00     ... ... ... ... 
20000b10:	20000b08 20000b08 20000b10 20000b10     ... ... ... ... 
20000b20:	20000b18 20000b18 20000b20 20000b20     ... ...  ..  .. 
20000b30:	20000b28 20000b28 20000b30 20000b30     (.. (.. 0.. 0.. 
20000b40:	20000b38 20000b38 20000b40 20000b40     8.. 8.. @.. @.. 
20000b50:	20000b48 20000b48 20000b50 20000b50     H.. H.. P.. P.. 
20000b60:	20000b58 20000b58 20000b60 20000b60     X.. X.. `.. `.. 
20000b70:	20000b68 20000b68 20000b70 20000b70     h.. h.. p.. p.. 
20000b80:	20000b78 20000b78 20000b80 20000b80     x.. x.. ... ... 
20000b90:	20000b88 20000b88 20000b90 20000b90     ... ... ... ... 
20000ba0:	20000b98 20000b98 20000ba0 20000ba0     ... ... ... ... 
20000bb0:	20000ba8 20000ba8 20000bb0 20000bb0     ... ... ... ... 
20000bc0:	20000bb8 20000bb8 20000bc0 20000bc0     ... ... ... ... 
20000bd0:	20000bc8 20000bc8 20000bd0 20000bd0     ... ... ... ... 
20000be0:	20000bd8 20000bd8 20000be0 20000be0     ... ... ... ... 
20000bf0:	20000be8 20000be8 20000bf0 20000bf0     ... ... ... ... 
20000c00:	20000bf8 20000bf8 20000c00 20000c00     ... ... ... ... 
20000c10:	20000c08 20000c08 20000c10 20000c10     ... ... ... ... 
20000c20:	20000c18 20000c18 20000c20 20000c20     ... ...  ..  .. 
20000c30:	20000c28 20000c28 20000c30 20000c30     (.. (.. 0.. 0.. 
20000c40:	20000c38 20000c38 20000c40 20000c40     8.. 8.. @.. @.. 
20000c50:	20000c48 20000c48 20000c50 20000c50     H.. H.. P.. P.. 
20000c60:	20000c58 20000c58 20000c60 20000c60     X.. X.. `.. `.. 
20000c70:	20000c68 20000c68 20000c70 20000c70     h.. h.. p.. p.. 
20000c80:	20000c78 20000c78 20000c80 20000c80     x.. x.. ... ... 
20000c90:	20000c88 20000c88 20000c90 20000c90     ... ... ... ... 
20000ca0:	20000c98 20000c98 20000ca0 20000ca0     ... ... ... ... 
20000cb0:	20000ca8 20000ca8 20000cb0 20000cb0     ... ... ... ... 
20000cc0:	20000cb8 20000cb8 20000cc0 20000cc0     ... ... ... ... 
20000cd0:	20000cc8 20000cc8 20000cd0 20000cd0     ... ... ... ... 
20000ce0:	20000cd8 20000cd8 20000ce0 20000ce0     ... ... ... ... 
20000cf0:	20000ce8 20000ce8 20000cf0 20000cf0     ... ... ... ... 
20000d00:	20000cf8 20000cf8 20000d00 20000d00     ... ... ... ... 
20000d10:	20000d08 20000d08 20000d10 20000d10     ... ... ... ... 
20000d20:	20000d18 20000d18 20000d20 20000d20     ... ...  ..  .. 
20000d30:	20000d28 20000d28 20000d30 20000d30     (.. (.. 0.. 0.. 
20000d40:	20000d38 20000d38 20000d40 20000d40     8.. 8.. @.. @.. 
20000d50:	20000d48 20000d48                       H.. H.. 

20000d58 <__malloc_sbrk_base>:
20000d58:	ffffffff                                ....

20000d5c <__malloc_trim_threshold>:
20000d5c:	00020000                                ....
